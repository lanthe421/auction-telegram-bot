import logging
from datetime import datetime
from typing import Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy.orm import Session

from bot.utils.keyboards import get_complaint_keyboard
from config.settings import SUPER_ADMIN_IDS, SUPPORT_IDS
from database.db import SessionLocal
from database.models import Complaint, Lot, User, UserRole

router = Router()
logger = logging.getLogger(__name__)


class ComplaintStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""

    waiting_for_target = State()
    waiting_for_reason = State()
    waiting_for_evidence = State()


@router.message(Command("complaint"))
async def complaint_menu(message: Message):
    """–ú–µ–Ω—é –∂–∞–ª–æ–±"""
    await message.answer(
        "üìù <b>–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "
        "–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_complaint_keyboard(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "submit_complaint")
async def start_complaint(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await callback.answer()

    await callback.message.answer(
        "üìù <b>–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–∞–µ—Ç–µ –∂–∞–ª–æ–±—É.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: username123",
        parse_mode="HTML",
    )

    await state.set_state(ComplaintStates.waiting_for_target)


@router.message(ComplaintStates.waiting_for_target)
async def process_complaint_target(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–ª–∏ –∂–∞–ª–æ–±—ã"""
    username = message.text.strip()

    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –¥–æ–±–∞–≤–∏–ª
    if username.startswith("@"):
        username = username[1:]

    if not username or len(username) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username.\n"
            "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: username123)"
        )
        return

    db = SessionLocal()
    try:
        target_user = db.query(User).filter(User.username == username).first()
        if not target_user:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ü–µ–ª–∏
        await state.update_data(target_user_id=target_user.id)

        await message.answer(
            f"‚úÖ –¶–µ–ª—å –∂–∞–ª–æ–±—ã: @{target_user.username} ({target_user.first_name})\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
            parse_mode="HTML",
        )

        await state.set_state(ComplaintStates.waiting_for_reason)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(ComplaintStates.waiting_for_reason)
async def process_complaint_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã"""
    reason = message.text.strip()

    if len(reason) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
    await state.update_data(reason=reason)

    await message.answer(
        "üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Å—Å—ã–ª–∫–∏), "
        "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å.\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞.",
        parse_mode="HTML",
    )

    await state.set_state(ComplaintStates.waiting_for_evidence)


@router.message(ComplaintStates.waiting_for_evidence)
async def process_complaint_evidence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∂–∞–ª–æ–±—ã"""
    evidence = message.text.strip()

    if evidence.lower() in ["–Ω–µ—Ç", "no", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"]:
        evidence = None

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    target_user_id = data.get("target_user_id")
    reason = data.get("reason")

    if not target_user_id or not reason:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
    db = SessionLocal()
    try:
        complainant = (
            db.query(User).filter(User.telegram_id == message.from_user.id).first()
        )
        if not complainant:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        complaint = Complaint(
            complainant_id=complainant.id,
            target_user_id=target_user_id,
            reason=reason,
            evidence=evidence,
            status="pending",
        )

        db.add(complaint)
        db.commit()

        await message.answer(
            "‚úÖ <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!</b>\n\n"
            f"üìù <b>–ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã:</b> #{complaint.id}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {complaint.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await notify_support_about_complaint(complaint, complainant)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.callback_query(F.data == "my_complaints")
async def show_my_complaints(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        complaints = (
            db.query(Complaint).filter(Complaint.complainant_id == user.id).all()
        )

        if not complaints:
            await callback.message.answer(
                "üìù <b>–ú–æ–∏ –∂–∞–ª–æ–±—ã</b>\n\n" "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±.",
                parse_mode="HTML",
            )
            return

        text = "üìù <b>–ú–æ–∏ –∂–∞–ª–æ–±—ã</b>\n\n"

        for complaint in complaints[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            target_user = (
                db.query(User).filter(User.id == complaint.target_user_id).first()
            )
            target_name = target_user.first_name if target_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            status_emoji = {"pending": "‚è≥", "reviewed": "üëÅÔ∏è", "resolved": "‚úÖ"}.get(
                complaint.status, "‚ùì"
            )

            text += f"{status_emoji} <b>–ñ–∞–ª–æ–±–∞ #{complaint.id}</b>\n"
            text += f"üë§ –ù–∞: {target_name}\n"
            text += f"üìÖ {complaint.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìù {complaint.reason[:50]}{'...' if len(complaint.reason) > 50 else ''}\n\n"

        if len(complaints) > 10:
            text += f"... –∏ –µ—â–µ {len(complaints) - 10} –∂–∞–ª–æ–±"

        await callback.message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±.")
    finally:
        db.close()


async def notify_support_about_complaint(complaint: Complaint, complainant: User):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
    try:
        from aiogram import Bot

        from config.settings import BOT_TOKEN

        bot = Bot(token=BOT_TOKEN)

        support_message = f"""
üö® <b>–ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê</b>

üìù <b>–ñ–∞–ª–æ–±–∞ #{complaint.id}</b>
üë§ <b>–û—Ç:</b> {complainant.first_name} (@{complainant.username or 'N/A'})
üë§ <b>–ù–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{complaint.target_user_id}
üìÖ <b>–î–∞—Ç–∞:</b> {complaint.created_at.strftime('%d.%m.%Y %H:%M')}

üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b>
{complaint.reason}

{f'üìé <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b>\n{complaint.evidence}' if complaint.evidence else ''}

üîó <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ /review_complaint_{complaint.id} - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–ª–æ–±—É
‚Ä¢ /resolve_complaint_{complaint.id} - –†–∞–∑—Ä–µ—à–∏—Ç—å –∂–∞–ª–æ–±—É
        """.strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–ª—É–∂–±–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        for support_id in SUPPORT_IDS + SUPER_ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=support_id, text=support_message, parse_mode="HTML"
                )
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–µ {support_id}: {e}"
                )

        await bot.session.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")


@router.message(Command("review_complaint"))
async def review_complaint_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∂–∞–ª–æ–±—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"""
    if message.from_user.id not in SUPPORT_IDS + SUPER_ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∂–∞–ª–æ–±.")
        return

    # –ü–∞—Ä—Å–∏–º ID –∂–∞–ª–æ–±—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∂–∞–ª–æ–±—ã: /review_complaint <ID>")
        return

    try:
        complaint_id = int(command_parts[1])
        await show_complaint_details(message, complaint_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∂–∞–ª–æ–±—ã.")


async def show_complaint_details(message: Message, complaint_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∂–∞–ª–æ–±—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"""
    db = SessionLocal()
    try:
        complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
        if not complaint:
            await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        complainant = db.query(User).filter(User.id == complaint.complainant_id).first()
        target_user = db.query(User).filter(User.id == complaint.target_user_id).first()

        text = f"""
üìù <b>–ñ–ê–õ–û–ë–ê #{complaint.id}</b>

üë§ <b>–û—Ç:</b> {complainant.first_name} (@{complainant.username or 'N/A'})
üë§ <b>–ù–∞:</b> {target_user.first_name} (@{target_user.username or 'N/A'})
üìÖ <b>–î–∞—Ç–∞:</b> {complaint.created_at.strftime('%d.%m.%Y %H:%M')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {complaint.status}

üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b>
{complaint.reason}

{f'üìé <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b>\n{complaint.evidence}' if complaint.evidence else ''}

{f'‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n{complaint.resolution}' if complaint.resolution else ''}
        """.strip()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å",
                        callback_data=f"resolve_complaint:{complaint_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_complaint:{complaint_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ö†Ô∏è –í—ã–¥–∞—Ç—å —Å—Ç—Ä–∞–π–∫",
                        callback_data=f"strike_user:{complaint.target_user_id}",
                    )
                ],
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∂–∞–ª–æ–±—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∂–∞–ª–æ–±—ã.")
    finally:
        db.close()


@router.callback_query(F.data.startswith("resolve_complaint:"))
async def resolve_complaint(callback: CallbackQuery):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∂–∞–ª–æ–±—É"""
    if callback.from_user.id not in SUPPORT_IDS + SUPER_ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    complaint_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
        if not complaint:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        complaint.status = "resolved"
        complaint.is_resolved = True
        complaint.reviewed_by = callback.from_user.id
        complaint.reviewed_at = datetime.utcnow()

        db.commit()

        await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞!")
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ <b>–ñ–∞–ª–æ–±–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞</b>", parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã.")
    finally:
        db.close()


@router.callback_query(F.data.startswith("strike_user:"))
async def strike_user(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if callback.from_user.id not in SUPPORT_IDS + SUPER_ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    user_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user.strikes += 1

        if user.strikes >= 3:
            user.is_banned = True
            status_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (3 —Å—Ç—Ä–∞–π–∫–∞)"
        else:
            status_text = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω —Å—Ç—Ä–∞–π–∫ ({user.strikes}/3)"

        db.commit()

        await callback.answer(status_text)
        await callback.message.edit_text(
            callback.message.text + f"\n\n{status_text}", parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç—Ä–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç—Ä–∞–π–∫–∞.")
    finally:
        db.close()
