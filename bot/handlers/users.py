import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import func

from bot.handlers.bid_states import BalanceStates, BidStates
from bot.utils.finance_manager import finance_manager

# from bot.utils.finance_manager import finance_manager
from bot.utils.keyboards import get_main_keyboard, get_user_profile_keyboard
from bot.utils.time_utils import get_moscow_time
from config.settings import (  # AUTO_BID_MIN_BALANCE,; TELEGRAM_CHANNEL_USERNAME,
    ADMIN_IDS,
    AUTO_BID_MIN_PAYMENTS,
    SUPER_ADMIN_IDS,
    SUPPORT_IDS,
)
from database.db import SessionLocal
from database.models import Bid, Lot, LotStatus, Payment, User, UserRole

# from datetime import datetime


# from management.core.telegram_publisher_sync import telegram_publisher_sync

router = Router()
logger = logging.getLogger(__name__)


async def check_user_banned(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        db.close()


async def check_user_banned_callback(callback: CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è callback)"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        logger.info(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: user=%s, is_banned=%s",
            callback.from_user.id,
            user,
            (user.is_banned if user else "None"),
        )

        if not user:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            return False

        if user.is_banned:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            )
            await callback.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True
            )
            return True
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        db.close()


def allow_auto_bid_for_test_user(user, db):
    test_ids = {1063712346, 1196965399}
    if user.telegram_id in test_ids:
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫,
        # –Ω–µ –º–µ–Ω—è—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∞–º
        if user.successful_payments < AUTO_BID_MIN_PAYMENTS:
            user.successful_payments = AUTO_BID_MIN_PAYMENTS
            db.commit()


async def _safe_edit_text(
    message_obj, text: str, reply_markup=None, parse_mode: str = "HTML"
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç,
    –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –º–µ–¥–∏–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å, –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        await message_obj.edit_text(
            text, parse_mode=parse_mode, reply_markup=reply_markup
        )
        return
    except Exception as e:
        err = str(e).lower()
        if "message is not modified" in err:
            return
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ) ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        if (
            "there is no text in the message to edit" in err
            or "message to edit has no text" in err
        ):
            try:
                await message_obj.edit_caption(
                    caption=text, parse_mode=parse_mode, reply_markup=reply_markup
                )
                return
            except Exception as cap_err:
                if "message is not modified" in str(cap_err).lower():
                    return
                # –ø–∞–¥–∞–µ–º –≤ –æ–±—â–∏–π —Ñ–æ–ª–±—ç–∫ –Ω–∏–∂–µ
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await message_obj.answer(
                text, parse_mode=parse_mode, reply_markup=reply_markup
            )
        except Exception as inner_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {inner_e}")


async def _safe_callback_answer(callback: CallbackQuery, text: str):
    try:
        await callback.answer(text)
    except Exception as e:
        if "query is too old" in str(e).lower():
            return
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")


@router.message(Command("profile"))
async def user_profile(message: Message):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                role=UserRole.SELLER,
            )
            db.add(user)
            db.commit()
            db.refresh(user)
        allow_auto_bid_for_test_user(user, db)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_text = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if user.telegram_id in SUPER_ADMIN_IDS:
            role_text = "üëë –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif user.telegram_id in ADMIN_IDS:
            role_text = "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif user.telegram_id in SUPPORT_IDS:
            role_text = "üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bids = db.query(Bid).filter(Bid.bidder_id == user.id).count()

        text = f"""üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üë§ –ò–º—è: {user.first_name} {user.last_name or ''}
üîó Username: @{user.username or 'N/A'}
üé≠ –†–æ–ª—å: {role_text}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üí∞ –°–¥–µ–ª–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {user_bids}
üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {user.successful_payments}
‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–æ–≤: {user.strikes}/3

**–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not user.is_banned else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""

        await message.answer(text, reply_markup=get_user_profile_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
    finally:
        db.close()


@router.callback_query(F.data == "top_up_balance")
async def top_up_balance(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.edit_text(
            (
                f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance:,.2f} ‚ÇΩ</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)."
            ),
            parse_mode="HTML",
        )
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="start_top_up"
                    ),
                    InlineKeyboardButton(
                        text="‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="start_withdraw"
                    ),
                ]
            ]
        )
        await callback.message.edit_text(
            f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance:,.2f} ‚ÇΩ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    finally:
        db.close()


@router.message(F.text == "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_my_balance(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        text = (
            f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance:,.2f} ‚ÇΩ</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="start_top_up"
                    ),
                    InlineKeyboardButton(
                        text="‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="start_withdraw"
                    ),
                ]
            ]
        )
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    finally:
        db.close()


@router.message(BalanceStates.waiting_for_top_up_amount)
async def process_top_up_amount(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        try:
            amount = float(message.text.replace(",", ".").replace(" ", ""))
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.clear()
            return

        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
        success = finance_manager.add_balance(user.id, amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
        if not success:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            await state.clear()
            return

        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        db.refresh(user)
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:,.2f} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} ‚ÇΩ"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏")
        await state.clear()
    finally:
        db.close()


@router.callback_query(F.data == "start_top_up")
async def start_top_up(callback: CallbackQuery, state: FSMContext):
    if await check_user_banned_callback(callback):
        return
    await callback.message.edit_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—á–∏—Å–ª–æ)")
    await state.set_state(BalanceStates.waiting_for_top_up_amount)
    await callback.answer()


@router.callback_query(F.data == "start_withdraw")
async def start_withdraw(callback: CallbackQuery, state: FSMContext):
    if await check_user_banned_callback(callback):
        return
    await callback.message.edit_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (—á–∏—Å–ª–æ)")
    await state.set_state(BalanceStates.waiting_for_withdraw_amount)
    await callback.answer()


@router.message(BalanceStates.waiting_for_withdraw_amount)
async def process_withdraw_amount(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        try:
            amount = float(message.text.replace(",", ".").replace(" ", ""))
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.clear()
            return
        success = finance_manager.deduct_balance(
            user.id, amount, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–¥–µ–º–æ)"
        )
        if not success:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞")
            await state.clear()
            return
        db.refresh(user)
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:,.2f} ‚ÇΩ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ (–¥–µ–º–æ).\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} ‚ÇΩ"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ")
        await state.clear()
    finally:
        db.close()


def get_auto_bid_settings_text_and_keyboard(user):
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if user.auto_bid_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    action = "–û—Ç–∫–ª—é—á–∏—Ç—å" if user.auto_bid_enabled else "–í–∫–ª—é—á–∏—Ç—å"
    action_data = "disable_auto_bid" if user.auto_bid_enabled else "enable_auto_bid"
    text = f"""
ü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫**

**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status}

**–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
üí≥ –ú–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {AUTO_BID_MIN_PAYMENTS}

**–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:**
üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {user.successful_payments} {'‚úÖ' if user.successful_payments >= AUTO_BID_MIN_PAYMENTS else '‚ùå'}

**–§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏—è
    """
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{action} –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏", callback_data=action_data
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")],
        ]
    )
    return text, keyboard


@router.callback_query(F.data == "auto_bid_settings")
async def auto_bid_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        allow_auto_bid_for_test_user(user, db)
        text, keyboard = get_auto_bid_settings_text_and_keyboard(user)
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    finally:
        db.close()


@router.callback_query(F.data.startswith("toggle_auto_bid:"))
async def toggle_auto_bid_inline(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    try:
        await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await show_settings(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "my_participation")
async def show_my_participation(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö (—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–∫—É–ø–∫–∏) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    logger.info(
        "=== –ù–ê–ß–ê–õ–û show_my_participation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s ===",
        callback.from_user.id,
    )

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")

        if not user:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        logger.info(f"–°—Ç–∞—Ç—É—Å is_banned: {user.is_banned}")

        # –ü—Ä–æ—Å—Ç–∞—è –∏ –ø—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if user.is_banned:
            logger.info("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            await callback.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True
            )
            return
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

        # –†–∏—Å—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 1
        text, keyboard = _build_my_participation_page(db, user, page=1, per_page=5)
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (—Å—Ç—Ä.1)", callback.from_user.id)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()
        logger.info(
            "=== –ö–û–ù–ï–¶ show_my_participation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s ===",
            callback.from_user.id,
        )


def _build_my_participation_page(db, user, page: int = 1, per_page: int = 5):
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–µ —É—á–∞—Å—Ç–∏–µ" —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏
    user_bids = db.query(Bid).filter(Bid.bidder_id == user.id).all()
    participated_lots = list({bid.lot_id for bid in user_bids})

    lots_info = []
    for lot_id in participated_lots:
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            continue
        last_bid = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id, Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .first()
        )
        if lot.status == LotStatus.SOLD:
            winning_bid = (
                db.query(Bid)
                .filter(Bid.lot_id == lot_id)
                .order_by(Bid.amount.desc())
                .first()
            )
            if winning_bid and winning_bid.bidder_id == user.id:
                status = "üèÜ –í—ã–∏–≥—Ä–∞–ª"
                status_emoji = "üèÜ"
            else:
                status = "üí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª"
                status_emoji = "üí∏"
        elif lot.status == LotStatus.ACTIVE and (
            lot.end_time is None
            or lot.end_time > get_moscow_time().replace(tzinfo=None)
        ):
            status = "üîÑ –ê–∫—Ç–∏–≤–µ–Ω"
            status_emoji = "üîÑ"
        else:
            status = "‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω"
            status_emoji = "‚è∞"

        lots_info.append(
            {
                "lot": lot,
                "last_bid": last_bid,
                "status": status,
                "status_emoji": status_emoji,
            }
        )

    if not lots_info:
        empty_text = (
            "üì¶ <b>–ú–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö</b>\n\n"
            "–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ.\n"
            "–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–æ—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
            ]
        )
        return empty_text, keyboard

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏
    lots_info.sort(
        key=lambda x: (
            x["last_bid"].created_at if x["last_bid"] else x["lot"].created_at
        ),
        reverse=True,
    )

    total_items = len(lots_info)
    total_pages = max(1, (total_items + per_page - 1) // per_page)
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    page_items = lots_info[start:end]

    text_lines = ["üì¶ <b>–ú–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö</b>\n"]
    for info in page_items:
        lot = info["lot"]
        last_bid = info["last_bid"]
        text_lines.append(f"{info['status_emoji']} <b>{lot.title}</b>")
        if last_bid:
            text_lines.append(f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {last_bid.amount:,.2f} ‚ÇΩ")
        text_lines.append(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ")
        text_lines.append(f"üìÖ –°—Ç–∞—Ç—É—Å: {info['status']}")
        text_lines.append(
            f"üïê –û–∫–æ–Ω—á–∞–Ω–∏–µ: {lot.end_time.strftime('%d.%m.%Y %H:%M') if lot.end_time else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
        )

    text_lines.append(f"–ü–æ–∫–∞–∑–∞–Ω–æ {start + 1}-{min(end, total_items)} –∏–∑ {total_items}")
    text = "\n".join(text_lines)

    buttons = []
    for info in page_items:
        lot = info["lot"]
        title = lot.title if len(lot.title) <= 24 else lot.title[:21] + "..."
        buttons.append(
            [InlineKeyboardButton(text=f"üì¶ {title}", callback_data=f"my_lot:{lot.id}")]
        )

    # –°—Ç—Ä–æ–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    prev_page = page - 1 if page > 1 else 1
    next_page = page + 1 if page < total_pages else total_pages
    pagination_row = [
        InlineKeyboardButton(
            text="‚óÄÔ∏è", callback_data=f"my_participation_page:{prev_page}"
        ),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è", callback_data=f"my_participation_page:{next_page}"
        ),
    ]
    buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return text, keyboard


async def show_my_participation_message(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç '–ú–æ–µ —É—á–∞—Å—Ç–∏–µ' –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é (–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é), —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text, keyboard = _build_my_participation_page(db, user, page=1, per_page=5)
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ '–ú–æ–µ —É—á–∞—Å—Ç–∏–µ' (message): {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data.startswith("my_participation_page:"))
async def paginate_my_participation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–µ —É—á–∞—Å—Ç–∏–µ'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        try:
            page = int(callback.data.split(":")[1])
        except Exception:
            page = 1

        text, keyboard = _build_my_participation_page(db, user, page=page, per_page=5)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ '–ú–æ–µ —É—á–∞—Å—Ç–∏–µ': {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data == "noop")
async def ignore_noop(callback: CallbackQuery):
    """–ù–µ –¥–µ–ª–∞–µ—Ç –Ω–∏—á–µ–≥–æ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    try:
        await callback.answer()
    except Exception:
        pass


@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await state.clear()
        await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ª–æ—Ç—ã\n"
            "‚Ä¢ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard(),
        )
        await callback.answer()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if "there is no text in the message to edit" in str(e).lower():
            try:
                await callback.message.edit_caption(
                    caption="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ª–æ—Ç—ã\n"
                    "‚Ä¢ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏\n"
                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=get_main_keyboard(),
                )
                await callback.answer()
            except Exception:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ª–æ—Ç—ã\n"
                    "‚Ä¢ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏\n"
                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=get_main_keyboard(),
                )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("my_lot:"))
async def show_my_lot_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    lot_id = int(callback.data.split(":")[1])
    db = SessionLocal()

    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()

        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç
        user_bids = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id, Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .all()
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_user_bid = user_bids[0] if user_bids else None

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ –ª–æ—Ç
        max_bid = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id)
            .order_by(Bid.amount.desc())
            .first()
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if lot.status == LotStatus.SOLD:
            if max_bid and max_bid.bidder_id == user.id:
                status = "üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ª–æ—Ç!"
                status_emoji = "üèÜ"
            else:
                status = "üí∏ –í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ª–æ—Ç"
                status_emoji = "üí∏"
        elif (
            lot.status == LotStatus.ACTIVE
            and lot.end_time > get_moscow_time().replace(tzinfo=None)
        ):
            if max_bid and max_bid.bidder_id == user.id:
                status = "ü•á –í—ã –ª–∏–¥–∏—Ä—É–µ—Ç–µ!"
                status_emoji = "ü•á"
            else:
                status = "üîÑ –ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω"
                status_emoji = "üîÑ"
        else:
            status = "‚è∞ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω"
            status_emoji = "‚è∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–∞—Ö
        last_bid_text = (
            f"{last_user_bid.amount:,.2f} ‚ÇΩ" if last_user_bid else "–ù–µ—Ç —Å—Ç–∞–≤–æ–∫"
        )
        max_bid_text = f"{max_bid.amount:,.2f} ‚ÇΩ" if max_bid else "–ù–µ—Ç —Å—Ç–∞–≤–æ–∫"

        text = f"""
{status_emoji} **{lot.title}**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {lot.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üí∞ **–¶–µ–Ω—ã:**
‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ
‚Ä¢ –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {last_bid_text}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_bid_text}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {len(lot.bids)}
‚Ä¢ –í–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫: {len(user_bids)}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}

‚è∞ **–í—Ä–µ–º—è:**
‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {lot.end_time.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {lot.created_at.strftime('%d.%m.%Y %H:%M')}
        """

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard_buttons = []

        if lot.status == LotStatus.ACTIVE and lot.end_time > get_moscow_time().replace(
            tzinfo=None
        ):
            keyboard_buttons.append(
                [
                    InlineKeyboardButton(
                        text="üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{lot_id}"
                    )
                ]
            )

        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text="üìã –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫", callback_data=f"bid_history:{lot_id}"
                )
            ]
        )

        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–∏—é", callback_data="my_participation"
                )
            ]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data == "user_stats")
async def show_user_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_bids = db.query(Bid).filter(Bid.bidder_id == user.id).count()
        won_auctions = (
            db.query(Bid).filter(Bid.bidder_id == user.id).distinct(Bid.lot_id).count()
        )

        total_spent = (
            db.query(Payment)
            .filter(Payment.user_id == user.id, Payment.status == "completed")
            .with_entities(func.sum(Payment.amount))
            .scalar()
            or 0
        )

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

**–°—Ç–∞–≤–∫–∏:**
üí∞ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bids}
üèÜ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {won_auctions}

**–ü–æ–∫—É–ø–∫–∏:**
üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {user.successful_payments}
üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_spent:,.2f} ‚ÇΩ

**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}
‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–æ–≤: {user.strikes}/3
        """

        await callback.message.edit_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        db.close()


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    try:
        await callback.message.edit_text(
            "üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_profile_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if "there is no text in the message to edit" in str(e).lower():
            try:
                await callback.message.edit_caption(
                    caption="üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_user_profile_keyboard(),
                    parse_mode="Markdown",
                )
                await callback.answer()
            except Exception:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_user_profile_keyboard(),
                    parse_mode="Markdown",
                )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(Command("balance"))
async def show_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            await message.answer(f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {user.balance:,.2f} ‚ÇΩ")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
    finally:
        db.close()


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_profile_from_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await user_profile(message)


# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ


@router.message(F.text == "üéØ –ú–æ–µ —É—á–∞—Å—Ç–∏–µ")
async def show_my_participation_from_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    await show_my_participation_message(message)


@router.message(F.text == "üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")
async def show_my_bids_from_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å—Ç–∞–≤–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bids.py
    from bot.handlers.bids import my_bids

    await my_bids(message, state)


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤")
async def show_trading_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_bids = (
            db.query(Bid)
            .filter(Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .limit(10)
            .all()
        )

        if not recent_bids:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤")
            return

        text = "üìã **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤:**\n\n"
        for bid in recent_bids:
            lot = db.query(Lot).filter(Lot.id == bid.lot_id).first()
            if lot:
                text += f"üè∑Ô∏è **{lot.title}**\n"
                text += f"üí∞ –°—Ç–∞–≤–∫–∞: {bid.amount:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –î–∞—Ç–∞: {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"ü§ñ –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞: {'–î–∞' if bid.is_auto_bid else '–ù–µ—Ç'}\n\n"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤")
    finally:
        db.close()


@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support_from_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    await message.answer(
        "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n"
        "2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "3Ô∏è‚É£ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
        "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_keyboard(),
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                role=UserRole.SELLER,
            )
            db.add(user)
            db.commit()
            db.refresh(user)

        text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

ü§ñ **–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.auto_bid_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üìä **–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {AUTO_BID_MIN_PAYMENTS}
‚Ä¢ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.successful_payments}/{AUTO_BID_MIN_PAYMENTS}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üì± **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫",
                        callback_data="auto_bid_settings",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=(
                            "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            if not user.notifications_enabled
                            else "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        ),
                        callback_data=(
                            "enable_notifications"
                            if not user.notifications_enabled
                            else "disable_notifications"
                        ),
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"
                    )
                ],
            ]
        )

        await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    finally:
        db.close()


@router.callback_query(F.data.startswith("auto_bid:"))
async def handle_auto_bid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É"""
    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        allow_auto_bid_for_test_user(user, db)
        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–≤–æ–π –ª–æ—Ç
        if lot and user and lot.seller_id == user.id:
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç"
            )
            return

        if not user or not lot:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∞–º: –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤–∫–ª—é—á–µ–Ω—ã –∏ –∑–∞–¥–∞–Ω –ª–∏–º–∏—Ç, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –Ω–µ –ø—Ä–æ—Å–∏–º –≤–≤–æ–¥
        if not user.auto_bid_enabled:
            await callback.answer("‚ùå –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        if user.successful_payments < AUTO_BID_MIN_PAYMENTS:
            await callback.answer(
                f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è {AUTO_BID_MIN_PAYMENTS}+ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"
            )
            return

        # –ï—Å–ª–∏ max_bid_amount —É–∂–µ –∑–∞–¥–∞–Ω, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥)
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(lot_id=lot_id, message_id=callback.message.message_id)
        await state.set_state(BidStates.waiting_for_max_bid_amount)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        from bot.utils.bid_calculator import calculate_min_bid

        min_bid = calculate_min_bid(lot.current_price)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            f"üè∑Ô∏è <b>–õ–æ—Ç:</b> {lot.title}\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {lot.current_price:,.2f} ‚ÇΩ\n"
            f"üìà <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> {min_bid:,.2f} ‚ÇΩ\n\n"
            f"üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏</b>\n"
            f"‚ÑπÔ∏è –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–æ —ç—Ç–æ–π —Å—É–º–º—ã\n"
            f"‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã ‚ÇΩ, –∑–∞–ø—è—Ç—ã–µ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É",
                        callback_data=f"lot_details:{lot_id}",
                    )
                ]
            ]
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await _safe_edit_text(callback.message, text, reply_markup=keyboard)
        await _safe_callback_answer(callback, "ü§ñ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data.startswith("enable_auto_bid"))
async def enable_auto_bid(callback: CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        allow_auto_bid_for_test_user(user, db)

        if user.successful_payments < AUTO_BID_MIN_PAYMENTS:
            await callback.answer(
                f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è {AUTO_BID_MIN_PAYMENTS}+ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"
            )
            return

        user.auto_bid_enabled = True
        db.commit()
        await callback.answer("ü§ñ –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫
        text, keyboard = get_auto_bid_settings_text_and_keyboard(user)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫")
    finally:
        db.close()


@router.callback_query(F.data.startswith("disable_auto_bid"))
async def disable_auto_bid(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        user.auto_bid_enabled = False
        user.max_bid_amount = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        db.commit()
        await callback.answer("ü§ñ –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫
        text, keyboard = get_auto_bid_settings_text_and_keyboard(user)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫")
    finally:
        db.close()


@router.callback_query(F.data.startswith("bid_history:"))
async def show_bid_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–æ—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    lot_id = int(callback.data.split(":")[1])
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()

        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç
        user_bids = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id, Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .all()
        )

        if not user_bids:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç")
            return

        text = f"üìã **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ –ª–æ—Ç:** {lot.title}\n\n"

        for i, bid in enumerate(user_bids, 1):
            text += f"{i}. {bid.amount:,.2f} ‚ÇΩ - {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"

        await callback.message.edit_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
    finally:
        db.close()


@router.callback_query(F.data.startswith("disable_auto_bid_for_lot:"))
async def disable_auto_bid_for_lot(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ª–æ—Ç–∞
        from bot.utils.auto_bid_manager import AutoBidManager

        success = AutoBidManager.disable_auto_bid_for_lot(user.id, lot_id)

        if success:
            await callback.answer("‚úÖ –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            from bot.utils.bid_calculator import format_bid_info
            from bot.utils.keyboards import get_bid_keyboard

            bid_info = format_bid_info(lot.current_price)
            bid_text = (
                f"üí∞ <b>–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b>\n\n"
                f"üè∑Ô∏è <b>–õ–æ—Ç:</b> {lot.title}\n\n"
                f"{bid_info}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏
            bid_keyboard = get_bid_keyboard(lot.id, lot.current_price, user.id)

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                await callback.message.edit_text(
                    bid_text, reply_markup=bid_keyboard, parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    bid_text, reply_markup=bid_keyboard, parse_mode="HTML"
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ª–æ—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

ü§ñ **–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.auto_bid_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üìä **–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {AUTO_BID_MIN_PAYMENTS}
‚Ä¢ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.successful_payments}/{AUTO_BID_MIN_PAYMENTS}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üì± **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫",
                        callback_data="auto_bid_settings",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=(
                            "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            if not user.notifications_enabled
                            else "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        ),
                        callback_data=(
                            "enable_notifications"
                            if not user.notifications_enabled
                            else "disable_notifications"
                        ),
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    finally:
        db.close()


@router.callback_query(F.data == "enable_notifications")
async def enable_notifications(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user.notifications_enabled = True
        db.commit()
        await callback.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

ü§ñ **–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.auto_bid_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üìä **–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {AUTO_BID_MIN_PAYMENTS}
‚Ä¢ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.successful_payments}/{AUTO_BID_MIN_PAYMENTS}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üì± **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫",
                        callback_data="auto_bid_settings",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=(
                            "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            if not user.notifications_enabled
                            else "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        ),
                        callback_data=(
                            "enable_notifications"
                            if not user.notifications_enabled
                            else "disable_notifications"
                        ),
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    finally:
        db.close()


@router.callback_query(F.data == "disable_notifications")
async def disable_notifications(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user.notifications_enabled = False
        db.commit()
        await callback.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

ü§ñ **–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.auto_bid_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üìä **–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {AUTO_BID_MIN_PAYMENTS}
‚Ä¢ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.successful_payments}/{AUTO_BID_MIN_PAYMENTS}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üì± **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫",
                        callback_data="auto_bid_settings",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=(
                            "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            if not user.notifications_enabled
                            else "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        ),
                        callback_data=(
                            "enable_notifications"
                            if not user.notifications_enabled
                            else "disable_notifications"
                        ),
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    finally:
        db.close()


@router.message(Command("test_ban"))
async def test_ban_status(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_banned else "–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            await message.answer(
                f"üîç **–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                f"üÜî Telegram ID: {user.telegram_id}\n"
                f"‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–∏: {user.strikes}/3\n"
                f"üö´ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
    finally:
        db.close()


@router.message(Command("debug_ban"))
async def debug_ban_user(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            user.is_banned = not user.is_banned
            db.commit()

            status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_banned else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            await message.answer(
                f"üîß **–û—Ç–ª–∞–¥–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                f"üÜî Telegram ID: {user.telegram_id}\n"
                f"üö´ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–∏: {user.strikes}/3\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å 'üéØ –ú–æ–µ —É—á–∞—Å—Ç–∏–µ'"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    finally:
        db.close()


@router.message(Command("debug_check"))
async def debug_check_user(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            await message.answer(
                f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                f"üë§ –ò–º—è: {user.first_name}\n"
                f"üÜî Telegram ID: {user.telegram_id}\n"
                f"üÜî User ID: {user.id}\n"
                f"üö´ is_banned: {user.is_banned}\n"
                f"‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–∏: {user.strikes}/3\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug_ban –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
    finally:
        db.close()
