#!/usr/bin/env python3
"""
–ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import os
import sys
from datetime import datetime
from typing import List, Optional

from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QColor, QFont
from PyQt5.QtWidgets import (
    QComboBox,
    QFrame,
    QGroupBox,
    QHBoxLayout,
    QHeaderView,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QSplitter,
    QTableWidget,
    QTableWidgetItem,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
)

from database.db import SessionLocal
from database.models import SupportQuestion, User


class SupportPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.current_user = None
        self.current_question: Optional[SupportQuestion] = None
        self.init_ui()
        self.load_questions()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.load_questions)
        self.update_timer.start(30000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìû –ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –°–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–∞
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        left_panel = self.create_questions_panel()
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        right_panel = self.create_answer_panel()
        splitter.addWidget(right_panel)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        splitter.setSizes([400, 600])
        layout.addWidget(splitter)

        self.setLayout(layout)

    def set_current_user(self, user_data: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.current_user = user_data

    def create_questions_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
        panel = QWidget()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìã –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        header.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(header)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()

        self.status_filter = QComboBox()
        self.status_filter.addItems(["–í—Å–µ", "–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞", "–û—Ç–≤–µ—á–µ–Ω—ã", "–ó–∞–∫—Ä—ã—Ç—ã"])
        self.status_filter.currentTextChanged.connect(self.apply_filters)
        filter_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        filter_layout.addWidget(self.status_filter)

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞...")
        self.search_input.textChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.search_input)

        layout.addLayout(filter_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.questions_table = QTableWidget()
        self.questions_table.setColumnCount(5)
        self.questions_table.setHorizontalHeaderLabels(
            ["ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–í–æ–ø—Ä–æ—Å"]
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.questions_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # ID
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –î–∞—Ç–∞
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(4, QHeaderView.Stretch)  # –í–æ–ø—Ä–æ—Å

        self.questions_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.questions_table.setAlternatingRowColors(True)
        self.questions_table.itemSelectionChanged.connect(self.on_question_selected)

        layout.addWidget(self.questions_table)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_questions)
        buttons_layout.addWidget(refresh_btn)

        buttons_layout.addStretch()

        layout.addLayout(buttons_layout)

        panel.setLayout(layout)
        return panel

    def create_answer_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        panel = QWidget()
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.answer_header = QLabel("üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
        self.answer_header.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(self.answer_header)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ
        self.question_info = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞")
        self.question_info.setWordWrap(True)
        self.question_info.setStyleSheet(
            "background-color: #f0f0f0; padding: 10px; border-radius: 5px;"
        )
        layout.addWidget(self.question_info)

        # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_label = QLabel("üìù –í–æ–ø—Ä–æ—Å:")
        question_label.setFont(QFont("Arial", 10, QFont.Bold))
        layout.addWidget(question_label)

        self.question_text = QTextEdit()
        self.question_text.setReadOnly(True)
        self.question_text.setMaximumHeight(100)
        layout.addWidget(self.question_text)

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        answer_label = QLabel("‚úçÔ∏è –í–∞—à –æ—Ç–≤–µ—Ç:")
        answer_label.setFont(QFont("Arial", 10, QFont.Bold))
        layout.addWidget(answer_label)

        self.answer_text = QTextEdit()
        self.answer_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        layout.addWidget(self.answer_text)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()

        self.send_answer_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
        self.send_answer_btn.clicked.connect(self.send_answer)
        self.send_answer_btn.setEnabled(False)
        buttons_layout.addWidget(self.send_answer_btn)

        self.close_question_btn = QPushButton("üîí –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å")
        self.close_question_btn.clicked.connect(self.close_question)
        self.close_question_btn.setEnabled(False)
        buttons_layout.addWidget(self.close_question_btn)

        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(self.clear_answer)
        buttons_layout.addWidget(clear_btn)

        layout.addLayout(buttons_layout)

        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        history_label = QLabel("üìö –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤:")
        history_label.setFont(QFont("Arial", 10, QFont.Bold))
        layout.addWidget(history_label)

        self.answer_history = QTextEdit()
        self.answer_history.setReadOnly(True)
        self.answer_history.setMaximumHeight(150)
        layout.addWidget(self.answer_history)

        panel.setLayout(layout)
        return panel

    def load_questions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
            questions = (
                db.query(SupportQuestion)
                .order_by(SupportQuestion.created_at.desc())
                .all()
            )

            self.questions_table.setRowCount(len(questions))

            for row, question in enumerate(questions):
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.id == question.user_id).first()
                user_name = user.first_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # ID
                id_item = QTableWidgetItem(str(question.id))
                id_item.setData(Qt.UserRole, question.id)
                self.questions_table.setItem(row, 0, id_item)

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                self.questions_table.setItem(row, 1, QTableWidgetItem(user_name))

                # –î–∞—Ç–∞
                date_str = question.created_at.strftime("%d.%m.%Y %H:%M")
                self.questions_table.setItem(row, 2, QTableWidgetItem(date_str))

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(self.get_status_text(question.status))
                status_item.setData(Qt.UserRole, question.status)
                self.set_status_color(status_item, question.status)
                self.questions_table.setItem(row, 3, status_item)

                # –í–æ–ø—Ä–æ—Å (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π)
                question_preview = (
                    question.question[:50] + "..."
                    if len(question.question) > 50
                    else question.question
                )
                self.questions_table.setItem(row, 4, QTableWidgetItem(question_preview))

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            self.apply_filters()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã: {e}")
        finally:
            db.close()

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        status_filter = self.status_filter.currentText()
        search_text = self.search_input.text().lower()

        for row in range(self.questions_table.rowCount()):
            show_row = True

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status_filter != "–í—Å–µ":
                status_item = self.questions_table.item(row, 3)
                if status_item and status_item.data(Qt.UserRole) != self.get_status_key(
                    status_filter
                ):
                    show_row = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
            if search_text:
                question_item = self.questions_table.item(row, 4)
                if question_item and search_text not in question_item.text().lower():
                    show_row = False

            self.questions_table.setRowHidden(row, not show_row)

    def get_status_text(self, status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            "pending": "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞",
            "answered": "–û—Ç–≤–µ—á–µ–Ω",
            "closed": "–ó–∞–∫—Ä—ã—Ç",
        }
        return status_map.get(status, status)

    def get_status_key(self, status_text: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        status_map = {
            "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞": "pending",
            "–û—Ç–≤–µ—á–µ–Ω—ã": "answered",
            "–ó–∞–∫—Ä—ã—Ç—ã": "closed",
        }
        return status_map.get(status_text, "")

    def set_status_color(self, item: QTableWidgetItem, status: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        colors = {
            "pending": QColor(255, 193, 7),  # –ñ–µ–ª—Ç—ã–π
            "answered": QColor(40, 167, 69),  # –ó–µ–ª–µ–Ω—ã–π
            "closed": QColor(108, 117, 125),  # –°–µ—Ä—ã–π
        }

        if status in colors:
            item.setBackground(colors[status])
            item.setForeground(QColor(0, 0, 0))

    def on_question_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        current_row = self.questions_table.currentRow()
        if current_row >= 0:
            question_id = int(self.questions_table.item(current_row, 0).text())
            self.load_question_details(question_id)
        else:
            self.clear_question_details()

    def load_question_details(self, question_id: int):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        db = SessionLocal()
        try:
            question = (
                db.query(SupportQuestion)
                .filter(SupportQuestion.id == question_id)
                .first()
            )
            if not question:
                return

            self.current_question = question

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == question.user_id).first()
            user_name = user.first_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.answer_header.setText(f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
            info_text = f"""
<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}<br>
<b>üìÖ –î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}<br>
<b>üìä –°—Ç–∞—Ç—É—Å:</b> {self.get_status_text(question.status)}
            """.strip()
            self.question_info.setText(info_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            self.question_text.setText(question.question)

            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
            self.answer_text.clear()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤
            self.load_answer_history(question)

            # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            can_answer = question.status == "pending"
            self.send_answer_btn.setEnabled(can_answer)
            self.close_question_btn.setEnabled(question.status != "closed")

        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}"
            )
        finally:
            db.close()

    def load_answer_history(self, question: SupportQuestion):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤"""
        if not question.answer:
            self.answer_history.setText("–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤")
            return

        history_text = f"""
<b>üìù –û—Ç–≤–µ—Ç:</b><br>
{question.answer}<br><br>
<b>‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {question.answered_at.strftime('%d.%m.%Y %H:%M') if question.answered_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        """.strip()

        self.answer_history.setText(history_text)

    def clear_question_details(self):
        """–û—á–∏—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        self.current_question = None
        self.answer_header.setText("üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
        self.question_info.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞")
        self.question_text.clear()
        self.answer_text.clear()
        self.answer_history.clear()
        self.send_answer_btn.setEnabled(False)
        self.close_question_btn.setEnabled(False)

    def send_answer(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        if not self.current_question:
            return

        answer_text = self.answer_text.toPlainText().strip()
        if not answer_text:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
            return

        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = SessionLocal()
            current_user_db = (
                db.query(User)
                .filter(User.telegram_id == self.current_user["telegram_id"])
                .first()
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            self.current_question.answer = answer_text
            self.current_question.status = "answered"
            self.current_question.answered_by = (
                current_user_db.id if current_user_db else None
            )
            self.current_question.answered_at = datetime.utcnow()

            db.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
            self.send_telegram_answer(answer_text)

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.load_questions()
            self.load_question_details(self.current_question.id)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
        finally:
            db.close()

    def send_telegram_answer(self, answer_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db = SessionLocal()
            user = (
                db.query(User).filter(User.id == self.current_question.user_id).first()
            )
            if not user:
                return

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
            import asyncio

            from bot.main import bot

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"""
üìû **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{self.current_question.id}**

{answer_text}

---
üí¨ –î–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support
            """.strip()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(
                    bot.send_message(
                        chat_id=user.telegram_id,
                        text=message_text,
                        parse_mode="Markdown",
                    )
                )
            finally:
                loop.close()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            db.close()

    def close_question(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"""
        if not self.current_question:
            return

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?",
            QMessageBox.Yes | QMessageBox.No,
        )

        if reply == QMessageBox.Yes:
            db = SessionLocal()
            try:
                self.current_question.status = "closed"
                db.commit()

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.load_questions()
                self.load_question_details(self.current_question.id)

            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å: {e}")
            finally:
                db.close()

    def clear_answer(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        self.answer_text.clear()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.update_timer.stop()
        super().closeEvent(event)
