import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from bot.utils.keyboards import get_complaint_keyboard, get_support_keyboard
from config.settings import SUPPORT_IDS
from database.db import SessionLocal
from database.models import Complaint, Lot, LotStatus, SupportQuestion, User, UserRole

router = Router()
logger = logging.getLogger(__name__)


async def check_user_banned(user_id: int, message_or_callback) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user and user.is_banned:
            ban_message = (
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )

            if hasattr(message_or_callback, "message"):
                # –≠—Ç–æ callback query
                await message_or_callback.answer(ban_message, parse_mode="Markdown")
            else:
                # –≠—Ç–æ message
                await message_or_callback.answer(ban_message, parse_mode="Markdown")

            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        db.close()


class SupportStates(StatesGroup):
    waiting_for_question = State()


@router.message(Command("support"))
async def support_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    from bot.utils.fsm_utils import clear_bid_state_if_needed

    if await clear_bid_state_if_needed(state):
        logger.info(
            f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /support"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message.from_user.id, message):
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                role=UserRole.SELLER,
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_text = (
            f"üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"üîß –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
            f"‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n"
            f"‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(
            support_text,
            reply_markup=get_support_keyboard(),
            parse_mode="HTML",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã support: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    finally:
        db.close()


@router.callback_query(F.data == "ask_support")
async def ask_support(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await callback.answer()
    await callback.message.edit_text(
        "üìù **–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await state.set_state(SupportStates.waiting_for_question)


@router.message(SupportStates.waiting_for_question)
async def process_user_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question_text = message.text.strip()

    if len(question_text) < 10:
        await message.answer(
            "‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        support_question = SupportQuestion(
            user_id=user.id,
            question=question_text,
            status="pending",
        )

        db.add(support_question)
        db.commit()

        await message.answer(
            "‚úÖ **–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!**\n\n"
            f"üìù <b>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:</b> #{support_question.id}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {support_question.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await notify_support_about_question(support_question, user)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()
        await state.clear()


async def notify_support_about_question(question: SupportQuestion, user: User):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
    try:
        from bot.main import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞

        support_message = f"""
‚ùì <b>–ù–û–í–´–ô –í–û–ü–†–û–° –í –ü–û–î–î–ï–†–ñ–ö–£</b>

üìù <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>
üë§ <b>–û—Ç:</b> {user.first_name} (@{user.username or 'N/A'})
üìÖ <b>–î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}

üìù <b>–í–æ–ø—Ä–æ—Å:</b>
{question.question}

üîó <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ /answer_question_{question.id} - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """.strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–ª—É–∂–±–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        for support_id in SUPPORT_IDS:
            try:
                await bot.send_message(
                    chat_id=support_id, text=support_message, parse_mode="HTML"
                )
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–µ {support_id}: {e}"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /admin_support —É–¥–∞–ª–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é. –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏/–º–µ–Ω—é.


@router.callback_query(F.data == "pending_lots")
async def show_pending_lots(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    db = SessionLocal()
    try:
        pending_lots = db.query(Lot).filter(Lot.status == LotStatus.PENDING).all()

        if not pending_lots:
            await callback.message.edit_text("üìã –ù–µ—Ç –ª–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return

        text = "üìã **–õ–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**\n\n"
        for lot in pending_lots:
            seller = db.query(User).filter(User.id == lot.seller_id).first()
            text += f"üî∏ **{lot.title}**\n"
            text += f"üí∞ –¶–µ–Ω–∞: {lot.starting_price:,.2f} ‚ÇΩ\n"
            text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.first_name}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω: {lot.created_at.strftime('%d.%m.%Y')}\n\n"

        await callback.message.edit_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data == "pending_complaints")
async def show_pending_complaints(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"""
    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    db = SessionLocal()
    try:
        pending_complaints = (
            db.query(Complaint).filter(Complaint.status == "pending").all()
        )

        if not pending_complaints:
            await callback.message.edit_text("üìã –ù–µ—Ç –∂–∞–ª–æ–± –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
            return

        text = "üìã **–ñ–∞–ª–æ–±—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:**\n\n"
        for complaint in pending_complaints:
            complainant = (
                db.query(User).filter(User.id == complaint.complainant_id).first()
            )
            target = db.query(User).filter(User.id == complaint.target_user_id).first()

            text += f"üî∏ **–ñ–∞–ª–æ–±–∞ #{complaint.id}**\n"
            text += f"üë§ –û—Ç: {complainant.first_name}\n"
            text += f"üéØ –ù–∞: {target.first_name}\n"
            text += f"üìÖ –î–∞—Ç–∞: {complaint.created_at.strftime('%d.%m.%Y')}\n\n"

        await callback.message.edit_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data == "approve_lot")
async def approve_lot_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ª–æ—Ç–∞"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")


@router.callback_query(F.data == "reject_lot")
async def reject_lot_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ª–æ—Ç–∞"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")


@router.callback_query(F.data == "review_complaint")
async def review_complaint_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"""
    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    db = SessionLocal()
    try:
        pending_complaints = (
            db.query(Complaint).filter(Complaint.status == "pending").all()
        )

        if not pending_complaints:
            await callback.message.edit_text(
                "üìã **–ñ–∞–ª–æ–±—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**\n\n" "–ù–µ—Ç –∂–∞–ª–æ–± –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è."
            )
            return

        text = "üìã **–ñ–∞–ª–æ–±—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:**\n\n"
        for complaint in pending_complaints[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            complainant = (
                db.query(User).filter(User.id == complaint.complainant_id).first()
            )
            target_user = (
                db.query(User).filter(User.id == complaint.target_user_id).first()
            )

            complainant_name = complainant.first_name if complainant else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            target_name = target_user.first_name if target_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            text += f"üî∏ **–ñ–∞–ª–æ–±–∞ #{complaint.id}**\n"
            text += f"üë§ –û—Ç: {complainant_name}\n"
            text += f"üéØ –ù–∞: {target_name}\n"
            text += f"üìÖ {complaint.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìù {complaint.reason[:50]}{'...' if len(complaint.reason) > 50 else ''}\n\n"

        if len(pending_complaints) > 10:
            text += f"... –∏ –µ—â–µ {len(pending_complaints) - 10} –∂–∞–ª–æ–±"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_support")]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data.startswith("review_complaint_detail:"))
async def review_complaint_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∂–∞–ª–æ–±—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"""
    await callback.answer()

    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    complaint_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
        if not complaint:
            await callback.message.edit_text("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        complainant = db.query(User).filter(User.id == complaint.complainant_id).first()
        target_user = db.query(User).filter(User.id == complaint.target_user_id).first()

        complainant_name = complainant.first_name if complainant else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        target_name = target_user.first_name if target_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        text = f"""
üìù **–ñ–ê–õ–û–ë–ê #{complaint.id}**

üë§ **–û—Ç:** {complainant_name} (@{complainant.username or 'N/A'})
üéØ **–ù–∞:** {target_name} (@{target_user.username or 'N/A'})
üìÖ **–î–∞—Ç–∞:** {complaint.created_at.strftime('%d.%m.%Y %H:%M')}
üìä **–°—Ç–∞—Ç—É—Å:** {complaint.status}

üìù **–ü—Ä–∏—á–∏–Ω–∞:**
{complaint.reason}

{f'üìé **–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:**\n{complaint.evidence}' if complaint.evidence else ''}

{f'‚úÖ **–†–µ—à–µ–Ω–∏–µ:**\n{complaint.resolution}' if complaint.resolution else ''}
        """.strip()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–∞–ª–æ–±–æ–π
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å",
                        callback_data=f"resolve_complaint:{complaint_id}",
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_complaint:{complaint_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚ö†Ô∏è –í—ã–¥–∞—Ç—å —Å—Ç—Ä–∞–π–∫",
                        callback_data=f"strike_user:{complaint.target_user_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –∂–∞–ª–æ–±–∞–º", callback_data="review_complaint"
                    ),
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data.startswith("resolve_complaint:"))
async def resolve_complaint_handler(callback: CallbackQuery):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∂–∞–ª–æ–±—É"""
    await callback.answer()

    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    complaint_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
        if not complaint:
            await callback.message.edit_text("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
        complaint.status = "resolved"
        complaint.is_resolved = True
        complaint.resolution = "–ñ–∞–ª–æ–±–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        complaint.reviewed_by = callback.from_user.id
        complaint.reviewed_at = datetime.now()

        db.commit()

        await callback.message.edit_text(
            f"‚úÖ **–ñ–∞–ª–æ–±–∞ #{complaint_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞**\n\n"
            "–ñ–∞–ª–æ–±–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∞.",
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã")
    finally:
        db.close()


@router.callback_query(F.data.startswith("reject_complaint:"))
async def reject_complaint_handler(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∂–∞–ª–æ–±—É"""
    await callback.answer()

    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    complaint_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
        if not complaint:
            await callback.message.edit_text("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
        complaint.status = "rejected"
        complaint.is_resolved = True
        complaint.resolution = "–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        complaint.reviewed_by = callback.from_user.id
        complaint.reviewed_at = datetime.now()

        db.commit()

        await callback.message.edit_text(
            f"‚ùå **–ñ–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
            "–ñ–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∞.",
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã")
    finally:
        db.close()


@router.callback_query(F.data.startswith("strike_user:"))
async def strike_user_handler(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.answer()

    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    target_user_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        target_user = db.query(User).filter(User.id == target_user_id).first()
        if not target_user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–π–∫–æ–≤
        target_user.strikes += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user.strikes >= 3:
            target_user.is_banned = True
            ban_message = f"‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name} –ø–æ–ª—É—á–∏–ª 3 —Å—Ç—Ä–∞–π–∫–∞ –∏ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        else:
            ban_message = f"‚ö†Ô∏è **–°—Ç—Ä–∞–π–∫ –≤—ã–¥–∞–Ω!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name} –ø–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞–π–∫ #{target_user.strikes}/3"

        db.commit()

        await callback.message.edit_text(
            ban_message,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç—Ä–∞–π–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç—Ä–∞–π–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data == "back_to_support")
async def back_to_support(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø–∞–Ω–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "üÜò **–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_support_keyboard(),
        parse_mode="Markdown",
    )


@router.message(Command("pending_questions"))
async def show_pending_questions(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"""
    if message.from_user.id not in SUPPORT_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    db = SessionLocal()
    try:
        pending_questions = (
            db.query(SupportQuestion).filter(SupportQuestion.status == "pending").all()
        )

        if not pending_questions:
            await message.answer("üìã –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return

        text = "üìã **–í–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:**\n\n"
        for question in pending_questions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            user = db.query(User).filter(User.id == question.user_id).first()
            user_name = user.first_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            text += f"üî∏ **–í–æ–ø—Ä–æ—Å #{question.id}**\n"
            text += f"üë§ –û—Ç: {user_name}\n"
            text += f"üìÖ {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìù {question.question[:50]}{'...' if len(question.question) > 50 else ''}\n\n"

        if len(pending_questions) > 10:
            text += f"... –∏ –µ—â–µ {len(pending_questions) - 10} –≤–æ–ø—Ä–æ—Å–æ–≤"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data == "pending_questions")
async def show_pending_questions_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"""
    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    db = SessionLocal()
    try:
        pending_questions = (
            db.query(SupportQuestion).filter(SupportQuestion.status == "pending").all()
        )

        if not pending_questions:
            await callback.message.edit_text("üìã –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return

        text = "üìã **–í–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:**\n\n"
        for question in pending_questions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            user = db.query(User).filter(User.id == question.user_id).first()
            user_name = user.first_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            text += f"üî∏ **–í–æ–ø—Ä–æ—Å #{question.id}**\n"
            text += f"üë§ –û—Ç: {user_name}\n"
            text += f"üìÖ {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìù {question.question[:50]}{'...' if len(question.question) > 50 else ''}\n\n"

        if len(pending_questions) > 10:
            text += f"... –∏ –µ—â–µ {len(pending_questions) - 10} –≤–æ–ø—Ä–æ—Å–æ–≤"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_support")]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.callback_query(F.data.startswith("answer_question:"))
async def answer_question_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    await callback.answer()

    if callback.from_user.id not in SUPPORT_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    question_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        question = (
            db.query(SupportQuestion).filter(SupportQuestion.id == question_id).first()
        )
        if not question:
            await callback.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user = db.query(User).filter(User.id == question.user_id).first()
        user_name = user.first_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        text = f"""
‚ùì **–í–û–ü–†–û–° #{question.id}**

üë§ **–û—Ç:** {user_name} (@{user.username or 'N/A'})
üìÖ **–î–∞—Ç–∞:** {question.created_at.strftime('%d.%m.%Y %H:%M')}
üìä **–°—Ç–∞—Ç—É—Å:** {question.status}

üìù **–í–æ–ø—Ä–æ—Å:**
{question.question}

{f'‚úÖ **–û—Ç–≤–µ—Ç:**\n{question.answer}' if question.answer else ''}
        """.strip()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ–ø—Ä–æ—Å–æ–º
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                        callback_data=f"answer_question_form:{question_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="pending_questions"
                    ),
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.message(Command("answer_question"))
async def answer_question_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"""
    if message.from_user.id not in SUPPORT_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /answer_question ID –æ—Ç–≤–µ—Ç
    command_parts = message.text.split(" ", 2)
    if len(command_parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answer_question ID –æ—Ç–≤–µ—Ç"
        )
        return

    try:
        question_id = int(command_parts[1])
        answer_text = command_parts[2]

        db = SessionLocal()
        try:
            question = (
                db.query(SupportQuestion)
                .filter(SupportQuestion.id == question_id)
                .first()
            )
            if not question:
                await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            question.answer = answer_text
            question.status = "answered"
            question.answered_at = datetime.now()

            db.commit()

            await message.answer(
                f"‚úÖ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                f"üìù –û—Ç–≤–µ—Ç: {answer_text}",
                parse_mode="Markdown",
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–≤–µ—Ç–µ
            try:
                from bot.main import bot

                user = db.query(User).filter(User.id == question.user_id).first()
                if user:
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üí¨ **–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{question_id}**\n\n"
                        f"üìù –û—Ç–≤–µ—Ç: {answer_text}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                        parse_mode="Markdown",
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        finally:
            db.close()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å")
