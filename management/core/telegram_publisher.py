"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤ –≤ Telegram –≥—Ä—É–ø–ø—ã
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto

from config.settings import (
    BOT_TOKEN,
    BOT_USERNAME,
    DEBUG,
    TELEGRAM_API_TIMEOUT,
    TELEGRAM_GROUP_ID,
    TELEGRAM_RETRY_DELAY,
)
from database.db import SessionLocal
from database.models import Bid, Lot, LotStatus, User

logger = logging.getLogger(__name__)


class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª"""

    def __init__(self):
        self.bot = None
        self.group_id = TELEGRAM_GROUP_ID
        self._published_lots = set()  # –ö—ç—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤

    def _get_bot(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        if self.bot is None:
            self.bot = Bot(token=BOT_TOKEN)
        return self.bot

    async def publish_lot(self, lot_id: int, retry_count: int = 3) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ª–æ—Ç –≤ Telegram –∫–∞–Ω–∞–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ª–æ—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        if lot_id in self._published_lots:
            logger.info(f"–õ–æ—Ç {lot_id} —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            return True

        for attempt in range(retry_count):
            try:
                db = SessionLocal()
                lot = db.query(Lot).filter(Lot.id == lot_id).first()

                if not lot:
                    logger.error(f"–õ–æ—Ç {lot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                if lot.status != LotStatus.ACTIVE:
                    logger.error(f"–õ–æ—Ç {lot_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {lot.status})")
                    return False

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                seller = db.query(User).filter(User.id == lot.seller_id).first()
                seller_name = seller.first_name if seller else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = self.create_lot_message(lot, seller_name)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = self.create_lot_keyboard(lot.id)

                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                bot = self._get_bot()
                message = await bot.send_message(
                    chat_id=self.group_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                lot.telegram_message_id = message.message_id
                db.commit()

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
                self._published_lots.add(lot_id)

                logger.info(
                    f"–õ–æ—Ç {lot_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"
                )
                return True

            except TelegramRetryAfter as e:
                wait_time = e.retry_after
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –æ–∂–∏–¥–∞–µ–º {wait_time} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_time)

            except TelegramAPIError as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–∞ {lot_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}"
                )
                if attempt < retry_count - 1:
                    await asyncio.sleep(TELEGRAM_RETRY_DELAY)

            except Exception as e:
                logger.error(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–∞ {lot_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}"
                )
                if attempt < retry_count - 1:
                    await asyncio.sleep(TELEGRAM_RETRY_DELAY)

            finally:
                db.close()

        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç {lot_id} –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫"
        )
        return False

    def create_lot_message(self, lot: Lot, seller_name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ—Ç–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –ú–°–ö
        try:
            from bot.utils.time_utils import utc_to_moscow

            start_time = (
                utc_to_moscow(lot.start_time).strftime("%d.%m.%Y –≤ %H:%M")
                if lot.start_time
                else "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            )
            end_time = (
                utc_to_moscow(lot.end_time).strftime("%d.%m.%Y –≤ %H:%M")
                if lot.end_time
                else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            )
        except Exception:
            start_time = (
                lot.start_time.strftime("%d.%m.%Y –≤ %H:%M")
                if lot.start_time
                else "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            )
            end_time = (
                lot.end_time.strftime("%d.%m.%Y –≤ %H:%M")
                if lot.end_time
                else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_text = {
            "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç",
            "jewelry": "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            "historical": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
        }.get(lot.document_type.value, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö
        db = SessionLocal()
        try:
            current_bids = db.query(Bid).filter(Bid.lot_id == lot.id).count()
            highest_bid = (
                db.query(Bid)
                .filter(Bid.lot_id == lot.id)
                .order_by(Bid.amount.desc())
                .first()
            )
            current_price = highest_bid.amount if highest_bid else lot.starting_price
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–≤–∫–∞—Ö: {e}")
            current_bids = 0
            current_price = lot.starting_price
        finally:
            db.close()

        message = f"""
üèõÔ∏è <b>–ù–û–í–´–ô –õ–û–¢ #{lot.id}</b>

üì¶ <b>{lot.title}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{lot.description}

üí∞ <b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {lot.starting_price:,.2f} ‚ÇΩ
üíé <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:,.2f} ‚ÇΩ
üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:</b> {current_bids}

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_name}

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> {lot.location or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üìÖ <b>–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:</b> {start_time}
‚è∞ <b>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {end_time}

üìÑ <b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {doc_type_text}

üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {lot.seller_link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üí° <b>–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É" –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ @{BOT_USERNAME}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏: {lot.min_bid_increment:,.2f} ‚ÇΩ
        """

        return message.strip()

    def create_lot_keyboard(self, lot_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: –∫–æ–Ω—Ç–∞–∫—Ç/–≤—Ä–µ–º—è + —Å—Å—ã–ª–∫–∞ '–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç'."""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
                        callback_data=f"contact_seller_{lot_id}",
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                        callback_data=f"time_remaining_{lot_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîó –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç",
                        url=f"https://t.me/{BOT_USERNAME}?start=lot_{lot_id}",
                    )
                ],
            ]
        )
        return keyboard

    async def update_lot_status(self, lot_id: int, new_status: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            db = SessionLocal()
            lot = db.query(Lot).filter(Lot.id == lot_id).first()

            if not lot:
                logger.error(f"–õ–æ—Ç {lot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            status_messages = {
                "sold": f"üèÜ –õ–æ—Ç #{lot_id} –ø—Ä–æ–¥–∞–Ω!",
                "cancelled": f"‚ùå –õ–æ—Ç #{lot_id} –æ—Ç–º–µ–Ω–µ–Ω",
                "expired": f"‚è∞ –õ–æ—Ç #{lot_id} –∏—Å—Ç–µ–∫ –±–µ–∑ —Å—Ç–∞–≤–æ–∫",
            }

            message_text = status_messages.get(
                new_status, f"üì¢ –õ–æ—Ç #{lot_id} - {new_status}"
            )

            bot = self._get_bot()
            await bot.send_message(
                chat_id=self.group_id,
                text=message_text,
                parse_mode="HTML",
            )

            logger.info(f"–°—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ {lot_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ—Ç–∞ {lot_id}: {e}")
            return False
        finally:
            db.close()

    async def edit_lot_message(
        self, lot_id: int, message_id: int, new_text: str
    ) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–æ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot = self._get_bot()
            await bot.edit_message_text(
                chat_id=self.group_id,
                message_id=message_id,
                text=new_text,
                parse_mode="HTML",
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–æ—Ç–µ {lot_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–æ—Ç–µ {lot_id}: {e}")
            return False

    async def send_lot_deleted_message(
        self, lot_id: int, lot_title: str, had_bids: bool
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞"""
        try:
            if had_bids:
                message_text = f"""
‚ùå <b>–õ–û–¢ –£–î–ê–õ–ï–ù</b>

üì¶ <b>–õ–æ—Ç #{lot_id}: {lot_title}</b>

‚ö†Ô∏è <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ</b>
üìä <b>–ë—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —Å—Ç–∞–≤–∫–∏</b>

üí° <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –õ–æ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                """
            else:
                message_text = f"""
‚ùå <b>–õ–û–¢ –£–î–ê–õ–ï–ù</b>

üì¶ <b>–õ–æ—Ç #{lot_id}: {lot_title}</b>

‚ö†Ô∏è <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b>
üìä <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç</b>

üí° <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –õ–æ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                """

            bot = self._get_bot()
            await bot.send_message(
                chat_id=self.group_id,
                text=message_text.strip(),
                parse_mode="HTML",
            )

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ {lot_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ {lot_id}: {e}"
            )
            return False

    async def publish_winner_announcement(
        self, lot_id: int, winner_id: int, final_price: float
    ) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ"""
        try:
            db = SessionLocal()
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            winner = db.query(User).filter(User.id == winner_id).first()

            if not lot or not winner:
                logger.error(f"–õ–æ—Ç {lot_id} –∏–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {winner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            winner_name = f"{winner.first_name} {winner.last_name or ''}".strip()

            message = f"""
üèÜ <b>–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –ê–£–ö–¶–ò–û–ù–ê!</b>

üì¶ <b>–õ–æ—Ç:</b> {lot.title}
üë§ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> {winner_name}
üí∞ <b>–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b> {final_price:,.2f} ‚ÇΩ

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!
üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.

#–∞—É–∫—Ü–∏–æ–Ω #–ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            """

            bot = self._get_bot()
            await bot.send_message(
                chat_id=self.group_id,
                text=message.strip(),
                parse_mode="HTML",
            )

            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –ª–æ—Ç–∞ {lot_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –ª–æ—Ç–∞ {lot_id}: {e}"
            )
            return False
        finally:
            db.close()

    async def check_and_publish_scheduled_lots(self) -> List[int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã"""
        published_lots = []

        try:
            db = SessionLocal()
            current_time = datetime.now()

            # –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            lots_to_publish = (
                db.query(Lot)
                .filter(
                    Lot.status == LotStatus.PENDING,
                    Lot.start_time <= current_time,
                    Lot.approved_by.isnot(None),  # –¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã
                )
                .all()
            )

            for lot in lots_to_publish:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ—Ç
                lot.status = LotStatus.ACTIVE
                db.commit()

                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                if await self.publish_lot(lot.id):
                    published_lots.append(lot.id)
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ—Ç {lot.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤: {e}")
        finally:
            db.close()

        return published_lots

    async def check_and_close_expired_lots(self) -> List[int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ª–æ—Ç—ã"""
        closed_lots = []

        try:
            db = SessionLocal()
            current_time = datetime.now()

            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–æ
            expired_lots = (
                db.query(Lot)
                .filter(Lot.status == LotStatus.ACTIVE, Lot.end_time <= current_time)
                .all()
            )

            for lot in expired_lots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–≤–∫–∏
                highest_bid = (
                    db.query(Bid)
                    .filter(Bid.lot_id == lot.id)
                    .order_by(Bid.amount.desc())
                    .first()
                )

                if highest_bid:
                    # –ï—Å—Ç—å —Å—Ç–∞–≤–∫–∏ - –ª–æ—Ç –ø—Ä–æ–¥–∞–Ω
                    lot.status = LotStatus.SOLD
                    lot.current_price = highest_bid.amount

                    # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
                    await self.publish_winner_announcement(
                        lot.id, highest_bid.bidder_id, highest_bid.amount
                    )

                    logger.info(f"–õ–æ—Ç {lot.id} –ø—Ä–æ–¥–∞–Ω –∑–∞ {highest_bid.amount:,.2f} ‚ÇΩ")
                else:
                    # –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ - –ª–æ—Ç –∏—Å—Ç–µ–∫
                    lot.status = LotStatus.EXPIRED
                    await self.update_lot_status(lot.id, "expired")
                    logger.info(f"–õ–æ—Ç {lot.id} –∏—Å—Ç–µ–∫ –±–µ–∑ —Å—Ç–∞–≤–æ–∫")

                closed_lots.append(lot.id)

            db.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ª–æ—Ç–æ–≤: {e}")
        finally:
            db.close()

        return closed_lots

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        try:
            if self.bot:
                await self.bot.session.close()
                self.bot = None
            logger.info("Telegram Publisher –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Telegram Publisher: {e}")

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤"""
        self._published_lots.clear()
        logger.info("–ö—ç—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
telegram_publisher = TelegramPublisher()
