import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    Message,
)
from sqlalchemy.orm import Session

from bot.utils.bid_calculator import calculate_min_bid, format_bid_info, validate_bid
from bot.utils.keyboards import (
    get_auction_keyboard,
    get_bid_keyboard,
    get_main_keyboard,
)
from bot.utils.lot_helpers import get_current_leader
from bot.utils.time_utils import get_moscow_time
from config.settings import TELEGRAM_CHANNEL_USERNAME
from database.db import SessionLocal, get_db
from database.models import Bid, Document, DocumentType, Lot, LotStatus, User, UserRole

router = Router()
logger = logging.getLogger(__name__)

from typing import Dict, Set, Tuple

# –ö—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –≤ —á–∞—Ç–µ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
_sent_albums: Set[Tuple[int, int]] = set()

# Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è


async def safe_edit_message(
    callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if not text or not str(text).strip():
            raise ValueError("empty_text_for_edit")
        await callback.message.edit_text(
            text, reply_markup=reply_markup, parse_mode=parse_mode
        )
    except Exception as e:
        err = str(e).lower()
        if "message is not modified" in err:
            return
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é) ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
        if (
            "there is no text in the message to edit" in err
            or "message to edit has no text" in err
        ):
            try:
                await callback.message.edit_caption(
                    caption=text, reply_markup=reply_markup, parse_mode=parse_mode
                )
                return
            except Exception as cap_err:
                if "message is not modified" in str(cap_err).lower():
                    return
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        safe_text = text if text and str(text).strip() else "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        await callback.message.answer(
            safe_text, reply_markup=reply_markup, parse_mode=parse_mode
        )


async def check_user_banned(user_id: int, message_or_callback) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user and user.is_banned:
            ban_message = (
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )

            if hasattr(message_or_callback, "message"):
                # –≠—Ç–æ callback query
                await message_or_callback.answer(ban_message, parse_mode="Markdown")
            else:
                # –≠—Ç–æ message
                await message_or_callback.answer(ban_message, parse_mode="Markdown")

            return True
        return False
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        return False
    finally:
        db.close()


class AuctionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞"""

    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_duration = State()
    waiting_for_image = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    from bot.utils.fsm_utils import clear_bid_state_if_needed

    if await clear_bid_state_if_needed(state):
        logger.info(
            f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned(message.from_user.id, message):
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                role=UserRole.SELLER,
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä lot_id –≤ –∫–æ–º–∞–Ω–¥–µ
        args = message.text.split()
        if len(args) > 1:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "lot_44" –∏–∑ —Å—Å—ã–ª–∫–∏
                param = args[1]
                if param.startswith("lot_"):
                    lot_id = int(param.split("_")[1])
                    await show_lot_from_start(message, lot_id)
                    return
                else:
                    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)
                    lot_id = int(param)
                    await show_lot_from_start(message, lot_id)
                    return
            except (ValueError, IndexError):
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å lot_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
            f"üéØ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ª–æ—Ç—ã\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(
            welcome_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML",
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    finally:
        db.close()


async def show_lot_from_start(message: Message, lot_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    db = next(get_db())

    try:
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await message.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        seller = db.query(User).filter(User.id == lot.seller_id).first()
        seller_name = seller.first_name or seller.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫
        bids_count = len(lot.bids)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ UTC) —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π tz
        now_utc = datetime.now(timezone.utc)
        lot_end_utc = lot.end_time
        if lot_end_utc is not None and lot_end_utc.tzinfo is None:
            lot_end_utc = lot_end_utc.replace(tzinfo=timezone.utc)
        is_active = lot.status == LotStatus.ACTIVE and (
            lot_end_utc is None or lot_end_utc > now_utc
        )
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        min_bid_amount = calculate_min_bid(lot.current_price)
        min_increment = min_bid_amount - lot.current_price

        # –õ–∏–¥–µ—Ä
        leader_name, leader_amount = get_current_leader(db, lot.id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ –ú–°–ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from bot.utils.time_utils import utc_to_moscow

        end_time_text = (
            utc_to_moscow(lot.end_time).strftime("%d.%m.%Y %H:%M")
            if lot.end_time
            else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )

        text = (
            f"üè∑Ô∏è <b>{lot.title}</b>\n\n"
            f"üìù {lot.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price}‚ÇΩ</b>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{min_bid_amount:,.2f}‚ÇΩ</b> (—à–∞–≥: {min_increment:,.2f}‚ÇΩ)\n"
            f"ü•á –õ–∏–¥–µ—Ä: {leader_name}{f' ({leader_amount:,.2f}‚ÇΩ)' if leader_amount is not None and leader_name != '‚Äî' else ''}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
            f"üìä –°—Ç–∞–≤–æ–∫: {bids_count}\n"
            f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time_text}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}"
        )

        if lot.images:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∏–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
            import json

            try:
                images = json.loads(lot.images)
                images = [img for img in images if img]
                if images and len(images) > 1:
                    cache_key = (message.chat.id, lot.id)
                    if cache_key not in _sent_albums:
                        media = []
                        for img_path in images:
                            try:
                                media.append(
                                    InputMediaPhoto(media=FSInputFile(img_path))
                                )
                            except Exception as e:
                                logger.warning(
                                    f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}"
                                )
                        if media:
                            try:
                                await message.bot.send_media_group(
                                    chat_id=message.chat.id, media=media
                                )
                                _sent_albums.add(cache_key)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –≤ –±–æ—Ç–µ: {e}")
                    await message.answer(
                        text,
                        reply_markup=get_auction_keyboard(lot.id),
                        parse_mode="HTML",
                    )
                    return
                elif images:
                    await message.answer_photo(
                        photo=FSInputFile(images[0]),
                        caption=text,
                        reply_markup=get_auction_keyboard(lot.id),
                        parse_mode="HTML",
                    )
                    return
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %s", e)

        await message.answer(
            text, reply_markup=get_auction_keyboard(lot.id), parse_mode="HTML"
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ users.py —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ users.py —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è


async def _render_lot_details(callback: CallbackQuery, lot_id: int) -> None:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞ –ø–æ –µ–≥–æ id (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)."""
    db = next(get_db())
    try:
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        seller = db.query(User).filter(User.id == lot.seller_id).first()
        seller_name = seller.first_name or seller.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        bids_count = len(lot.bids)
        now_utc = datetime.now(timezone.utc)
        lot_end_utc = lot.end_time
        if lot_end_utc is not None and lot_end_utc.tzinfo is None:
            lot_end_utc = lot_end_utc.replace(tzinfo=timezone.utc)
        is_active = lot.status == LotStatus.ACTIVE and (
            lot_end_utc is None or lot_end_utc > now_utc
        )
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"

        min_bid_amount = calculate_min_bid(lot.current_price)
        min_increment = min_bid_amount - lot.current_price
        leader_name, leader_amount = get_current_leader(db, lot.id)

        from bot.utils.time_utils import utc_to_moscow

        end_time_text = (
            utc_to_moscow(lot.end_time).strftime("%d.%m.%Y %H:%M")
            if lot.end_time
            else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )

        text = (
            f"üè∑Ô∏è <b>{lot.title}</b>\n\n"
            f"üìù {lot.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price}‚ÇΩ</b>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{min_bid_amount:,.2f}‚ÇΩ</b> (—à–∞–≥: {min_increment:,.2f}‚ÇΩ)\n"
            f"ü•á –õ–∏–¥–µ—Ä: {leader_name}{f' ({leader_amount:,.2f}‚ÇΩ)' if leader_amount is not None and leader_name != '‚Äî' else ''}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
            f"üìä –°—Ç–∞–≤–æ–∫: {bids_count}\n"
            f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time_text}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}"
        )

        if lot.images:
            import json

            try:
                images = json.loads(lot.images)
                images = [img for img in images if img]
                if images and len(images) > 1:
                    cache_key = (callback.message.chat.id, lot.id)
                    if cache_key not in _sent_albums:
                        media = []
                        for img_path in images:
                            try:
                                media.append(
                                    InputMediaPhoto(media=FSInputFile(img_path))
                                )
                            except Exception as e:
                                logger.warning(
                                    f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}"
                                )
                        if media:
                            try:
                                await callback.message.bot.send_media_group(
                                    chat_id=callback.message.chat.id, media=media
                                )
                                _sent_albums.add(cache_key)
                            except Exception as e:
                                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –≤ –±–æ—Ç–µ: %s", e)
                    await safe_edit_message(
                        callback, text, reply_markup=get_auction_keyboard(lot.id)
                    )
                    await callback.answer()
                    return
                elif images:
                    await callback.message.edit_media(
                        media=InputMediaPhoto(
                            media=FSInputFile(images[0]),
                            caption=text,
                            parse_mode="HTML",
                        ),
                        reply_markup=get_auction_keyboard(lot.id),
                    )
                    await callback.answer()
                    return
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %s", e)

        await safe_edit_message(
            callback, text, reply_markup=get_auction_keyboard(lot.id)
        )
        await callback.answer()
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞: %s", e)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data.startswith("lot:"))
async def show_lot_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    from bot.utils.fsm_utils import clear_bid_state_if_needed
    from bot.utils.safe_parsers import safe_extract_lot_id

    if await clear_bid_state_if_needed(state):
        logger.info(
            f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–æ—Ç–∞"
        )

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    await _render_lot_details(callback, lot_id)


@router.callback_query(F.data.startswith("lot_details:"))
async def show_lot_details_from_back_button(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É'"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    from bot.utils.fsm_utils import clear_bid_state_if_needed
    from bot.utils.safe_parsers import safe_extract_lot_id

    if await clear_bid_state_if_needed(state):
        logger.info(
            f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É'"
        )

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    await _render_lot_details(callback, lot_id)


@router.callback_query(F.data.startswith("download_files:"))
async def download_lot_files(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –ª–æ—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞)"""
    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return
    db = next(get_db())

    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ—Ç–∞
        from management.utils.document_utils import ImageManager

        files = ImageManager.get_lot_files(lot)

        if not files:
            await callback.answer(
                "üìÅ –§–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_any = False
        for file_path in files:
            try:
                await callback.message.answer_document(document=FSInputFile(file_path))
                sent_any = True
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ %s: %s", file_path, e)

        if sent_any:
            await callback.answer("üìÅ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", show_alert=True)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ—Ç–∞: %s", e)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data.startswith("download_transfer_doc:"))
async def download_transfer_document(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é"""
    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return
    db = next(get_db())
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –í—ã–∏–≥—Ä–∞–≤—à–∞—è —Å—Ç–∞–≤–∫–∞
        winning_bid = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id)
            .order_by(Bid.amount.desc())
            .first()
        )
        if not winning_bid:
            await callback.answer("‚ùå –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        buyer = db.query(User).filter(User.id == winning_bid.bidder_id).first()
        seller = db.query(User).filter(User.id == lot.seller_id).first()

        if not buyer or not seller:
            await callback.answer(
                "‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞/–ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True
            )
            return

        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        if buyer.telegram_id != callback.from_user.id:
            await callback.answer(
                "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True
            )
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        import os
        from pathlib import Path

        from bot.utils.documents import create_document, save_document_to_file

        document = create_document(lot, buyer)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ñ–∞–π–ª
        tmp_dir = Path("tmp_docs")
        tmp_dir.mkdir(parents=True, exist_ok=True)
        file_path = tmp_dir / f"transfer_lot_{lot.id}_buyer_{buyer.id}.txt"
        save_document_to_file(document, str(file_path))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        try:
            await callback.message.answer_document(
                document=FSInputFile(str(file_path)),
                caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –ø–æ –ª–æ—Ç—É #{lot.id}",
            )
            await callback.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s", e)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except Exception:
                pass
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data.startswith("contact_seller:"))
async def contact_seller(callback: CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"""
    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return
    db = next(get_db())

    try:
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        seller = db.query(User).filter(User.id == lot.seller_id).first()
        if not seller:
            await callback.answer("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ callback –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∏–∑ –±–æ—Ç–∞
        if callback.message.chat.type in ["channel", "supergroup"]:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            contact_info = f"""üìû –ö–û–ù–¢–ê–ö–¢–´ –ü–†–û–î–ê–í–¶–ê

üè∑Ô∏è –õ–æ—Ç: {lot.title}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.first_name}
üîó @{seller.username or 'N/A'}
üì± ID: {seller.telegram_id}

{f'üîó –°—Å—ã–ª–∫–∞: {lot.seller_link}' if lot.seller_link else ''}

üí° –î–ª—è —Å–≤—è–∑–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É –≤ Telegram –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ #{lot_id}"""

            await callback.answer(contact_info, show_alert=True)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            text = f"""
üìû <b>–°–í–Ø–ó–¨ –° –ü–†–û–î–ê–í–¶–û–ú</b>

üè∑Ô∏è <b>–õ–æ—Ç:</b> {lot.title}

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller.first_name}
üîó <b>Username:</b> @{seller.username or 'N/A'}
üì± <b>Telegram ID:</b> {seller.telegram_id}

{f'üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {lot.seller_link}' if lot.seller_link else ''}

üí° <b>–î–ª—è —Å–≤—è–∑–∏:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É –≤ Telegram
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ #{lot_id}
‚Ä¢ –û–±—Å—É–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
            """.strip()

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É",
                            callback_data=f"lot_details:{lot_id}",
                        )
                    ]
                ]
            )

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            await safe_edit_message(callback, text, reply_markup=keyboard)
            await callback.answer()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞: %s", e)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data.startswith("time_remaining:"))
async def time_remaining_colon(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ)."""
    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    db = next(get_db())
    try:
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if not lot.end_time:
            await callback.answer("‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ", show_alert=True)
            return

        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –ú–°–ö
        from bot.utils.time_utils import utc_to_moscow

        now = get_moscow_time()
        lot_end_msk = utc_to_moscow(lot.end_time)
        remaining = lot_end_msk - now
        total_seconds = int(remaining.total_seconds())
        if total_seconds <= 0:
            await callback.answer("‚è∞ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
            return

        days = total_seconds // 86400
        hours = (total_seconds % 86400) // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60

        parts = []
        if days:
            parts.append(f"{days} –¥")
        parts.append(f"{hours:02d}:{minutes:02d}:{seconds:02d}")
        end_str = lot_end_msk.strftime("%d.%m.%Y %H:%M")
        text = f"‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {' '.join(parts)}\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_str}"
        await callback.answer(text, show_alert=True)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ time_remaining: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data.startswith("time_remaining_"))
async def time_remaining_underscore(callback: CallbackQuery):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –≤ callback_data."""
    from bot.utils.safe_parsers import safe_extract_id

    lot_id = safe_extract_id(callback.data, "_", 1)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    class Dummy:
        data = f"time_remaining:{lot_id}"

    await time_remaining_colon(
        CallbackQuery(model=callback.model_copy(update={"data": Dummy.data}))
    )


@router.callback_query(F.data.startswith("contact_seller_"))
async def contact_seller_underscore(callback: CallbackQuery):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –≤ callback_data (contact_seller_)."""
    from bot.utils.safe_parsers import safe_extract_id

    lot_id = safe_extract_id(callback.data, "_", 1)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    class Dummy:
        data = f"contact_seller:{lot_id}"

    await contact_seller(
        CallbackQuery(model=callback.model_copy(update={"data": Dummy.data}))
    )


@router.callback_query(F.data.startswith("participate:"))
async def participate_in_auction(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await check_user_banned(callback.from_user.id, callback):
        return

    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return
    db = next(get_db())

    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        now_utc = datetime.now(timezone.utc)
        lot_end_utc = lot.end_time
        if lot_end_utc is not None and lot_end_utc.tzinfo is None:
            lot_end_utc = lot_end_utc.replace(tzinfo=timezone.utc)
        if lot.status != LotStatus.ACTIVE or (
            lot_end_utc is not None and lot_end_utc <= now_utc
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        if user.id == lot.seller_id:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–º –ª–æ—Ç–µ")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è
        seller = db.query(User).filter(User.id == lot.seller_id).first()
        seller_name = seller.first_name or seller.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        bids_count = len(lot.bids)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        min_bid_amount = calculate_min_bid(lot.current_price)
        min_increment = min_bid_amount - lot.current_price

        from bot.utils.time_utils import utc_to_moscow

        end_time_text = (
            utc_to_moscow(lot.end_time).strftime("%d.%m.%Y %H:%M")
            if lot.end_time
            else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )

        text = f"""
üéØ <b>–£–ß–ê–°–¢–ò–ï –í –ê–£–ö–¶–ò–û–ù–ï</b>

üè∑Ô∏è <b>{lot.title}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{lot.description}

üí∞ <b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {lot.starting_price:,.2f} ‚ÇΩ
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {lot.current_price:,.2f} ‚ÇΩ
üìà <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> {min_bid_amount:,.2f} ‚ÇΩ (—à–∞–≥: {min_increment:,.2f} ‚ÇΩ)

 ü•á <b>–õ–∏–¥–µ—Ä:</b> {get_current_leader(db, lot.id)[0]}{f" ({get_current_leader(db, lot.id)[1]:,.2f} ‚ÇΩ)" if get_current_leader(db, lot.id)[1] else ''}

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_name}
üìä <b>–°—Ç–∞–≤–æ–∫:</b> {bids_count}
‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_text}

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> {lot.location or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {lot.seller_link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
        """.strip()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–∞—Å—Ç–∏—è
        from bot.utils.keyboards import get_bid_keyboard

        keyboard = get_bid_keyboard(lot.id, lot.current_price)

        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ: %s", e)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data.startswith("bid:"))
async def show_bid_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await check_user_banned(callback.from_user.id, callback):
        return

    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    db = next(get_db())

    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        now_utc = datetime.now(timezone.utc)
        lot_end_utc = lot.end_time
        if lot_end_utc is not None and lot_end_utc.tzinfo is None:
            lot_end_utc = lot_end_utc.replace(tzinfo=timezone.utc)
        if lot.status != LotStatus.ACTIVE or (
            lot_end_utc is not None and lot_end_utc <= now_utc
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–∞—Ö
        bid_info = format_bid_info(lot.current_price)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏ —Å—Ç–∞–≤–æ–∫
        bid_text = (
            f"üí∞ <b>–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b>\n\n"
            f"üè∑Ô∏è <b>–õ–æ—Ç:</b> {lot.title}\n\n"
            f"{bid_info}\n\n"
            f"ü•á <b>–õ–∏–¥–µ—Ä:</b> {get_current_leader(db, lot.id)[0]}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –ª–∏–¥–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å None
        leader = get_current_leader(db, lot.id)
        if leader and leader[1] is not None:
            bid_text += f" ({leader[1]:,.2f} ‚ÇΩ)"
        bid_keyboard = get_bid_keyboard(
            lot.id, lot.current_price, user.id if user else None
        )

        # –ü–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

        await safe_edit_message(callback, bid_text, reply_markup=bid_keyboard)

        # Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    finally:
        db.close()


@router.callback_query(F.data.startswith("seller_contact:"))
async def seller_contact_colon(callback: CallbackQuery):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º–∏ seller_contact:"""
    from bot.utils.safe_parsers import safe_extract_lot_id

    lot_id = safe_extract_lot_id(callback.data)
    if lot_id is None:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞", show_alert=True)
        return

    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ contact_seller
    class Dummy:
        data = f"contact_seller:{lot_id}"

    await contact_seller(
        CallbackQuery(model=callback.model_copy(update={"data": Dummy.data}))
    )
