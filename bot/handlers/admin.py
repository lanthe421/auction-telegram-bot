import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from sqlalchemy import func

from bot.utils.keyboards import get_admin_keyboard, get_main_keyboard
from config.settings import ADMIN_IDS, SUPER_ADMIN_IDS
from database.db import SessionLocal
from database.models import Bid, Lot, LotStatus, Payment, User, UserRole

router = Router()
logger = logging.getLogger(__name__)


def _get_user_role_by_telegram_id(user_id: int) -> UserRole | None:
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        return user.role if user else None
    except Exception:
        return None
    finally:
        db.close()


def is_super_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if user_id in SUPER_ADMIN_IDS:
        return True
    return _get_user_role_by_telegram_id(user_id) == UserRole.SUPER_ADMIN


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if user_id in ADMIN_IDS or user_id in SUPER_ADMIN_IDS:
        return True
    # –°—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω–∞–º–∏ —Ç–µ—Ö, —É –∫–æ–≥–æ —Ä–æ–ª—å SUPER_ADMIN –≤ –ë–î
    return _get_user_role_by_telegram_id(user_id) in {UserRole.SUPER_ADMIN}


# –ö–æ–º–∞–Ω–¥–∞ /admin —É–¥–∞–ª–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é. –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º –æ—Å—Ç–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Ä–æ–ª—å –∏ –∫–Ω–æ–ø–∫–∏.


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(message.from_user.id):
        return

    db = SessionLocal()
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = db.query(User).count()
        total_lots = db.query(Lot).count()
        active_lots = db.query(Lot).filter(Lot.status == LotStatus.ACTIVE).count()
        total_bids = db.query(Bid).count()
        total_payments = db.query(Payment).count()

        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_revenue = (
            db.query(Payment)
            .filter(Payment.status == "completed")
            .with_entities(func.sum(Payment.amount))
            .scalar()
            or 0
        )

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {db.query(User).filter(User.role == UserRole.MODERATOR).count()}
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {db.query(User).filter(User.role == UserRole.SUPPORT).count()}

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bids}
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.2f} ‚ÇΩ

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}
        """

        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        db.close()


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def show_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        return

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users = db.query(User).order_by(User.created_at.desc()).limit(10).all()

        text = "üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
        for user in recent_users:
            role_emoji = {
                UserRole.SELLER: "üë§",
                UserRole.MODERATOR: "‚öôÔ∏è",
                UserRole.SUPPORT: "üîß",
                UserRole.SUPER_ADMIN: "üëë",
            }
            emoji = role_emoji.get(user.role, "‚ùì")

            text += f"{emoji} **{user.first_name}**\n"
            text += f"üîó @{user.username or 'N/A'}\n"
            text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n"
            text += f"‚ö†Ô∏è –°—Ç—Ä–∞–π–∫–æ–≤: {user.strikes}/3\n\n"

        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏")
async def manage_auctions(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏**\n\n"
        "–õ–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ PyQt5 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ª–æ—Ç–æ–≤.\n\n"
        "üí° –í—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
    )


@router.message(F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")
async def show_finances(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(message.from_user.id):
        return

    db = SessionLocal()
    try:
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_payments = db.query(Payment).count()
        completed_payments = (
            db.query(Payment).filter(Payment.status == "completed").count()
        )
        pending_payments = db.query(Payment).filter(Payment.status == "pending").count()

        total_revenue = (
            db.query(Payment)
            .filter(Payment.status == "completed")
            .with_entities(func.sum(Payment.amount))
            .scalar()
            or 0
        )

        commission_revenue = (
            db.query(Payment)
            .filter(Payment.status == "completed", Payment.payment_type == "commission")
            .with_entities(func.sum(Payment.amount))
            .scalar()
            or 0
        )

        avg_payment = (
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {total_revenue/completed_payments:,.2f} ‚ÇΩ"
            if completed_payments > 0
            else "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: 0 ‚ÇΩ"
        )

        text = "\n".join(
            [
                "üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**",
                "",
                "üí≥ **–ü–ª–∞—Ç–µ–∂–∏:**",
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}",
                f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_payments}",
                f"‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pending_payments}",
                "",
                "üí∞ **–í—ã—Ä—É—á–∫–∞:**",
                f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.2f} ‚ÇΩ",
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: {commission_revenue:,.2f} ‚ÇΩ",
                f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {commission_revenue:,.2f} ‚ÇΩ",
                "",
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
                avg_payment,
            ]
        )

        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_admin_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É
        # –ü—É—Å—Ç—å –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ users.py
        return

    role_text = (
        "üëë –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        if is_super_admin(message.from_user.id)
        else "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    )

    text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üë§ **–†–æ–ª—å:** {role_text}
üïê **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ª–æ—Ç–æ–≤
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üí° **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PyQt5 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.**
    """

    await message.answer(text)


@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ª–æ—Ç—ã\n"
        "‚Ä¢ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard(),
    )
