"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.utils.telegram_publisher import telegram_publisher
from bot.utils.time_utils import get_moscow_time, utc_to_moscow
from config.settings import BOT_TOKEN, NOTIFICATION_INTERVAL_MINUTES
from database.db import SessionLocal
from database.models import (
    Bid,
    Lot,
    LotStatus,
    Payment,
    SupportQuestion,
    User,
    UserRole,
)

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.notification_interval = NOTIFICATION_INTERVAL_MINUTES
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        self.processed_lots: Set[int] = set()
        # –ö—ç—à –ø–ª–∞–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: (lot_id, label)
        self._scheduled_reminders: Set[Tuple[int, str]] = set()
        # –ö–∞—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∞ –Ω–µ —Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ: (user_id, topic) -> (message_id, last_text)
        self._user_topic_last: Dict[Tuple[int, str], Tuple[int, str]] = {}

    async def send_notification(
        self,
        user_id: int,
        message: str,
        keyboard: Optional[InlineKeyboardMarkup] = None,
        *,
        topic: Optional[str] = None,
        silent: bool = True,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.telegram_id == user_id).first()
                if user and getattr(user, "notifications_enabled", True) is False:
                    return False
            finally:
                db.close()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å—Ç–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            try:
                ack_button = InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª (—É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)",
                    callback_data="acknowledge",
                )
                if keyboard and getattr(keyboard, "inline_keyboard", None):
                    combined_keyboard = InlineKeyboardMarkup(
                        inline_keyboard=keyboard.inline_keyboard + [[ack_button]]
                    )
                else:
                    combined_keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[[ack_button]]
                    )
            except Exception:
                combined_keyboard = keyboard

            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ç–µ–º–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
            if topic:
                key = (user_id, topic)
                prev = self._user_topic_last.get(key)
                if prev and prev[0]:
                    try:
                        await self.bot.edit_message_text(
                            chat_id=user_id,
                            message_id=prev[0],
                            text=message,
                            reply_markup=combined_keyboard,
                            parse_mode="HTML",
                        )
                        self._user_topic_last[key] = (prev[0], message)
                        logger.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (topic={topic}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
                        )
                        return True
                    except Exception:
                        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è/–¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
                        pass

            sent = await self.bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=combined_keyboard,
                parse_mode="HTML",
                disable_notification=silent,
            )
            if topic:
                self._user_topic_last[(user_id, topic)] = (sent.message_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e:
            error_msg = str(e).lower()
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
            if "chat not found" in error_msg or "user not found" in error_msg:
                logger.debug(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç–æ–≤—ã–π ID)"
                )
            else:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                )
            return False

    async def notify_new_bid(
        self, lot_id: int, bid_amount: float, bidder_name: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ, –±–µ–∑ –∑–≤—É–∫–∞)
            seller = db.query(User).filter(User.id == lot.seller_id).first()
            if seller:
                message = f"""
üí∞ <b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!</b>

üè∑Ô∏è –õ–æ—Ç: {lot.title}
üí∞ –°—É–º–º–∞: {bid_amount:,.2f} ‚ÇΩ
üë§ –°—Ç–∞–≤—â–∏–∫: {bidder_name}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}
                """
                await self.send_notification(
                    seller.telegram_id,
                    message.strip(),
                    topic=f"lot:{lot_id}:seller_updates",
                    silent=True,
                )

            # –ë–æ–ª—å—à–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ: {e}")
        finally:
            db.close()

    async def notify_auction_ending(self, lot_id: int, hours_left: int) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞. –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ–Ω—å—à–µ —á–∞—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω—É—Ç—ã."""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = (
                db.query(Bid).filter(Bid.lot_id == lot_id).distinct(Bid.bidder_id).all()
            )
            # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            left_seconds = 0
            try:
                now = get_moscow_time().replace(tzinfo=None)
                left_seconds = (
                    max(int((lot.end_time - now).total_seconds()), 0)
                    if lot.end_time
                    else 0
                )
            except Exception:
                left_seconds = 0

            if left_seconds >= 3600:
                left_str = f"{left_seconds // 3600} —á."
            elif left_seconds > 0:
                left_str = f"{max(left_seconds // 60, 1)} –º–∏–Ω"
            else:
                left_str = "–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã"

            for bid in participants:
                bidder = db.query(User).filter(User.id == bid.bidder_id).first()
                if bidder:
                    message = f"""
‚è∞ <b>–ê—É–∫—Ü–∏–æ–Ω —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>

üè∑Ô∏è {lot.title}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ
üïê –û—Å—Ç–∞–ª–æ—Å—å: {left_str}
üéØ –°–¥–µ–ª–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É!
                    """
                    await self.send_notification(bidder.telegram_id, message.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        finally:
            db.close()

    async def notify_auction_winner(
        self, lot_id: int, winner_id: int, final_price: float
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            winner = db.query(User).filter(User.id == winner_id).first()
            seller = db.query(User).filter(User.id == lot.seller_id).first()

            if lot and winner and seller:
                message = f"""
üèÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω!</b>

üè∑Ô∏è –õ–æ—Ç: {lot.title}
üí∞ –¶–µ–Ω–∞: {final_price:,.2f} ‚ÇΩ
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.first_name}
üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏!
                """

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞",
                                callback_data=f"seller_contact:{lot_id}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìã –î–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞",
                                callback_data=f"lot_details:{lot_id}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìÑ –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
                                callback_data=f"download_transfer_doc:{lot_id}",
                            )
                        ],
                    ]
                )

                await self.send_notification(
                    winner.telegram_id, message.strip(), keyboard
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
        finally:
            db.close()

    async def notify_lot_approved(self, lot_id: int, seller_id: int) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ª–æ—Ç–∞"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            seller = db.query(User).filter(User.id == seller_id).first()

            if lot and seller:
                message = f"""
‚úÖ <b>–í–∞—à –ª–æ—Ç –æ–¥–æ–±—Ä–µ–Ω!</b>

üè∑Ô∏è {lot.title}
üìÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: {lot.start_time.strftime('%d.%m.%Y –≤ %H:%M') if lot.start_time else '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ'}
üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot.starting_price:,.2f} ‚ÇΩ

üéØ –õ–æ—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
                """
                await self.send_notification(seller.telegram_id, message.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    async def notify_lot_rejected(
        self, lot_id: int, seller_id: int, reason: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            seller = db.query(User).filter(User.id == seller_id).first()

            if lot and seller:
                message = f"""
‚ùå <b>–õ–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</b>

üè∑Ô∏è {lot.title}
üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}

üîÑ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ª–æ—Ç —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π
                """
                await self.send_notification(seller.telegram_id, message.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    async def notify_complaint_received(
        self, complaint_id: int, complainant_id: int
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã"""
        db = SessionLocal()
        try:
            complainant = db.query(User).filter(User.id == complainant_id).first()
            if complainant:
                message = f"""
üìù <b>–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>

‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚è∞ –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤

üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
                """
                await self.send_notification(complainant.telegram_id, message.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∂–∞–ª–æ–±–µ: {e}")
        finally:
            db.close()

    async def notify_support_staff(
        self, message: str, keyboard: Optional[InlineKeyboardMarkup] = None
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        db = SessionLocal()
        try:
            support_users = db.query(User).filter(User.role == UserRole.SUPPORT).all()
            for user in support_users:
                await self.send_notification(user.telegram_id, message, keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        finally:
            db.close()

    async def check_ending_auctions(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É–∫—Ü–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞)"""
        db = SessionLocal()
        try:
            now = get_moscow_time()
            ending_soon = (
                db.query(Lot)
                .filter(
                    Lot.status == LotStatus.ACTIVE,
                    Lot.end_time > now.replace(tzinfo=None),
                    Lot.end_time <= (now + timedelta(hours=1)).replace(tzinfo=None),
                )
                .all()
            )

            for lot in ending_soon:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                lot_moscow_time = utc_to_moscow(lot.end_time)
                hours_left = int((lot_moscow_time - now).total_seconds() / 3600)
                await self.notify_auction_ending(lot.id, hours_left)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–Ω—à–∏–≤–∞—é—â–∏—Ö—Å—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {e}")
        finally:
            db.close()

    async def notify_auction_extended(
        self, lot_id: int, old_end_time: datetime, new_end_time: datetime
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = (
                db.query(Bid).filter(Bid.lot_id == lot_id).distinct(Bid.bidder_id).all()
            )

            from bot.utils.time_utils import get_extension_message

            message = get_extension_message(old_end_time, new_end_time)

            for bid in participants:
                bidder = db.query(User).filter(User.id == bid.bidder_id).first()
                if bidder:
                    await self.send_notification(bidder.telegram_id, message)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller = db.query(User).filter(User.id == lot.seller_id).first()
            if seller:
                seller_message = f"""
‚è∞ <b>–ê—É–∫—Ü–∏–æ–Ω –ø—Ä–æ–¥–ª–µ–Ω!</b>

üè∑Ô∏è {lot.title}
üîÑ –ò–∑-–∑–∞ —Å—Ç–∞–≤–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É –∞—É–∫—Ü–∏–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç.

üìÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_time.strftime('%H:%M')} (–±—ã–ª–æ {old_end_time.strftime('%H:%M')})

üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ
                """
                await self.send_notification(seller.telegram_id, seller_message.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        finally:
            db.close()

    async def notify_outbid(
        self, lot_id: int, outbid_user_id: int, new_price: float
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –µ–≥–æ –ø–µ—Ä–µ–±–∏–ª–∏"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                return
            user = db.query(User).filter(User.id == outbid_user_id).first()
            if not user:
                return
            message = f"""
‚ö†Ô∏è <b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–±–∏—Ç–∞</b>

üè∑Ô∏è {lot.title}
üí∞ –ù–æ–≤–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {new_price:,.2f} ‚ÇΩ
‚û°Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ
            """
            await self.send_notification(
                user.telegram_id,
                message.strip(),
                topic=f"lot:{lot_id}:outbid",
                silent=True,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–µ—Ä–µ–±–∏—Ç–æ–π —Å—Ç–∞–≤–∫–µ: {e}")
        finally:
            db.close()

    async def notify_autobid_rejected(
        self, lot_id: int, user_id: int, reason: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –µ–≥–æ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                return
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return
            message = f"""
üö´ <b>–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

üè∑Ô∏è {lot.title}
‚ùå –ü—Ä–∏—á–∏–Ω–∞: {reason}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞: {lot.current_price:,.2f} ‚ÇΩ
            """
            await self.send_notification(user.telegram_id, message.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏: {e}")
        finally:
            db.close()

    async def notify_purchase_started(self, lot_id: int, buyer_id: int) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–ø–ª–∞—Ç—É"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            buyer = db.query(User).filter(User.id == buyer_id).first()
            seller = (
                db.query(User).filter(User.id == lot.seller_id).first() if lot else None
            )
            if lot and buyer and seller:
                message = f"""
üí≥ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –æ–ø–ª–∞—Ç–µ</b>

üè∑Ô∏è {lot.title}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.first_name or buyer.username or buyer.id}
üí∞ –°—É–º–º–∞: {lot.current_price:,.2f} ‚ÇΩ
                """
                await self.send_notification(seller.telegram_id, message.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")
        finally:
            db.close()

    async def notify_purchase_completed(
        self, lot_id: int, buyer_id: int, amount: float
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            buyer = db.query(User).filter(User.id == buyer_id).first()
            seller = (
                db.query(User).filter(User.id == lot.seller_id).first() if lot else None
            )
            if lot and buyer and seller:
                msg_buyer = f"""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞</b>

üè∑Ô∏è {lot.title}
üí∞ –°—É–º–º–∞: {amount:,.2f} ‚ÇΩ
üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                """
                msg_seller = f"""
‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞</b>

üè∑Ô∏è {lot.title}
üí∞ –°—É–º–º–∞: {amount:,.2f} ‚ÇΩ
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.first_name or buyer.username or buyer.id}
                """
                await self.send_notification(buyer.telegram_id, msg_buyer.strip())
                await self.send_notification(seller.telegram_id, msg_seller.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")
        finally:
            db.close()

    async def _schedule_single_reminder(
        self, lot_id: int, when: datetime, label: str
    ) -> None:
        """–û–∂–∏–¥–∞–µ—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ when –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        key = (lot_id, label)
        if key in self._scheduled_reminders:
            return
        self._scheduled_reminders.add(key)
        now = get_moscow_time()
        delay = (when - now).total_seconds()
        if delay > 0:
            await asyncio.sleep(delay)
        # –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–∫—Ü–∏–æ–Ω –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot or lot.status != LotStatus.ACTIVE or not lot.end_time:
                return
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
            time_left = (
                lot.end_time - get_moscow_time().replace(tzinfo=None)
            ).total_seconds()
            hours_left = max(int(time_left // 3600), 0)
            await self.notify_auction_ending(lot_id, hours_left)
        finally:
            db.close()

    async def schedule_reminders_for_lot(self, lot: Lot) -> None:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3—á, 2—á, 1—á –∏ 10–º–∏–Ω –¥–æ –∫–æ–Ω—Ü–∞ —Ç–æ—Ä–≥–æ–≤"""
        if not lot.end_time:
            return
        end_naive = lot.end_time
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
        marks = [
            ("3h", timedelta(hours=3)),
            ("2h", timedelta(hours=2)),
            ("1h", timedelta(hours=1)),
            ("10m", timedelta(minutes=10)),
        ]
        for label, delta in marks:
            when = end_naive - delta
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ
            if when > get_moscow_time().replace(tzinfo=None):
                asyncio.create_task(self._schedule_single_reminder(lot.id, when, label))

    async def check_ended_auctions(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        db = SessionLocal()
        try:
            now = get_moscow_time()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

            ended_lots = (
                db.query(Lot)
                .filter(
                    Lot.status == LotStatus.ACTIVE,
                    Lot.end_time <= now.replace(tzinfo=None),
                )
                .all()
            )

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤: {len(ended_lots)}")

            for lot in ended_lots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –ª–æ—Ç
                if lot.id in self.processed_lots:
                    logger.info(f"–õ–æ—Ç #{lot.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞ #{lot.id}: {lot.title}")
                logger.info(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {lot.end_time}, –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
                winning_bid = (
                    db.query(Bid)
                    .filter(Bid.lot_id == lot.id)
                    .order_by(Bid.amount.desc())
                    .first()
                )

                if winning_bid:
                    logger.info(
                        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–∞ #{lot.id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winning_bid.bidder_id}, —Å—É–º–º–∞: {winning_bid.amount}"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞
                    lot.status = LotStatus.SOLD
                    db.commit()
                    logger.info(f"–õ–æ—Ç #{lot.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π")

                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    self.processed_lots.add(lot.id)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    await self.notify_auction_winner(
                        lot.id, winning_bid.bidder_id, winning_bid.amount
                    )

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                    seller = db.query(User).filter(User.id == lot.seller_id).first()
                    if seller:
                        message = f"""
üí∞ <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üè∑Ô∏è {lot.title}
üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {winning_bid.amount:,.2f} ‚ÇΩ
üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {db.query(User).filter(User.id == winning_bid.bidder_id).first().first_name}

üí≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                        """
                        await self.send_notification(
                            seller.telegram_id, message.strip()
                        )
                else:
                    logger.info(f"–ù–∞ –ª–æ—Ç–µ #{lot.id} –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫")
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫
                    self.processed_lots.add(lot.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {e}")
        finally:
            db.close()

    async def check_lot_end(self, lot_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ—Ç –ø–æ id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –µ—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            now = get_moscow_time().replace(tzinfo=None)
            if not lot or lot.status != LotStatus.ACTIVE:
                return
            if lot.end_time is None or lot.end_time > now:
                return
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
            winning_bid = (
                db.query(Bid)
                .filter(Bid.lot_id == lot.id)
                .order_by(Bid.amount.desc())
                .first()
            )
            if winning_bid:
                lot.status = LotStatus.SOLD
                db.commit()
                await self.notify_auction_winner(
                    lot.id, winning_bid.bidder_id, winning_bid.amount
                )
                seller = db.query(User).filter(User.id == lot.seller_id).first()
                if seller:
                    message = f"""
üí∞ <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!</b>
\nüè∑Ô∏è {lot.title}
üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {winning_bid.amount:,.2f} ‚ÇΩ
üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {db.query(User).filter(User.id == winning_bid.bidder_id).first().first_name}
\nüí≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                    """
                    await self.send_notification(seller.telegram_id, message.strip())
            else:
                # –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ SOLD –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                lot.status = LotStatus.SOLD
                db.commit()
                if lot.telegram_message_id:
                    text = (
                        f"üè∑Ô∏è <b>{lot.title}</b>\n\n‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç."
                    )
                    await telegram_publisher.edit_lot_message(
                        lot.id, lot.telegram_message_id, text
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    async def schedule_lot_end_check(self, lot_id: int, end_time):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç end_time"""
        now = get_moscow_time().replace(tzinfo=None)
        delay = (end_time - now).total_seconds()
        if delay > 0:
            await asyncio.sleep(delay)
        await self.check_lot_end(lot_id)

    async def schedule_all_active_lots(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        db = SessionLocal()
        try:
            now = get_moscow_time().replace(tzinfo=None)
            active_lots = (
                db.query(Lot)
                .filter(
                    Lot.status == LotStatus.ACTIVE,
                    Lot.end_time != None,
                    Lot.end_time > now,
                )
                .all()
            )
            for lot in active_lots:
                asyncio.create_task(self.schedule_lot_end_check(lot.id, lot.end_time))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤: {e}")
        finally:
            db.close()

    async def run_notification_service(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        await self.schedule_all_active_lots()
        while True:
            try:
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –∞—É–∫—Ü–∏–æ–Ω—ã
                await self.check_ending_auctions()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
                await self.check_ended_auctions()

                logger.info(
                    f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ {self.notification_interval} –º–∏–Ω—É—Ç..."
                )

                # –ü–µ—Ä–µ-–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
                await self.schedule_all_active_lots()

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.notification_interval * 60)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()


async def start_notification_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await notification_service.run_notification_service()


async def notify_answered_support_questions(bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    from sqlalchemy.orm import Session

    from database.db import SessionLocal

    while True:
        db: Session = SessionLocal()
        try:
            questions = (
                db.query(SupportQuestion)
                .filter(
                    SupportQuestion.status == "answered",
                    SupportQuestion.notified == False,
                )
                .all()
            )
            for q in questions:
                user = db.query(User).filter(User.id == q.user_id).first()
                if user and user.telegram_id:
                    text = (
                        f"üìû <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{q.id}</b>\n\n{q.answer}\n\n"
                        f"üí¨ –î–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support"
                    )
                    try:
                        await notification_service.send_notification(
                            user.telegram_id, text
                        )
                        q.notified = True
                        db.commit()
                    except Exception as e:
                        import logging

                        logging.getLogger(__name__).error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}"
                        )
        finally:
            db.close()
        await asyncio.sleep(60)


if __name__ == "__main__":
    asyncio.run(start_notification_service())
