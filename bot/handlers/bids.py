import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.handlers.bid_states import BidStates
from bot.utils.auto_bid_manager import AutoBidManager
from bot.utils.bid_calculator import calculate_min_bid, validate_bid
from bot.utils.keyboards import get_auction_keyboard
from bot.utils.lot_helpers import get_current_leader
from bot.utils.notifications import notification_service
from bot.utils.time_utils import (
    extend_auction_end_time,
    get_moscow_time,
    should_extend_auction,
)
from config.settings import TELEGRAM_CHANNEL_USERNAME
from database.db import SessionLocal
from database.models import Bid, Lot, LotStatus, User, UserRole
from management.core.telegram_publisher_sync import telegram_publisher_sync

router = Router()
logger = logging.getLogger(__name__)

# Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


async def check_user_banned_callback(callback: CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è callback)"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user and user.is_banned:
            await callback.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True
            )
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        db.close()


@router.callback_query(F.data.startswith("auto_bid:"))
@router.callback_query(F.data.startswith("change_auto_bid:"))
async def handle_auto_bid(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞."""
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        parts = callback.data.split(":")
        lot_id = int(parts[1])

        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()

        if not user or not lot:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–æ—Ç–∞
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ —à–∞–≥—É
        min_bid_amount = calculate_min_bid(lot.current_price)

        # –¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä
        leader_info = get_current_leader(db, lot.id)
        leader_text = ""
        if leader_info and leader_info[0]:
            if leader_info[1] is not None:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info[0]} ({leader_info[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info[0]}\n"

        # –¢–µ–∫—É—â–∞—è –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_auto_bid = AutoBidManager.get_user_auto_bid(user.id, lot.id)
        existing_text = (
            f"\nü§ñ <b>–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∞:</b> {existing_auto_bid.target_amount:,.2f} ‚ÇΩ\n"
            if existing_auto_bid
            else ""
        )

        text = (
            f"ü§ñ <b>–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞</b>\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price:,.2f} ‚ÇΩ</b>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>{min_bid_amount:,.2f} ‚ÇΩ</b>\n"
            f"{leader_text}"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏, –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É."
            f"{existing_text}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        await state.update_data(lot_id=lot_id, message_id=callback.message.message_id)
        await state.set_state(BidStates.waiting_for_max_bid_amount)

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É", callback_data=f"lot_details:{lot_id}"
                    )
                ]
            ]
        )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_text(
                text, parse_mode="HTML", reply_markup=back_keyboard
            )
        except Exception as e:
            if "there is no text in the message to edit" in str(e).lower():
                try:
                    await callback.message.edit_caption(
                        caption=text, parse_mode="HTML", reply_markup=back_keyboard
                    )
                except Exception:
                    await callback.message.answer(
                        text, parse_mode="HTML", reply_markup=back_keyboard
                    )
            else:
                raise e

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏")
    finally:
        db.close()


async def ensure_user_registered(message: Message) -> User:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                role=UserRole.SELLER,
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            return None

        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        db.close()


@router.message(Command("my_bids"))
async def my_bids(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å—Ç–∞–≤–∫–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    from bot.utils.fsm_utils import clear_bid_state_if_needed

    if await clear_bid_state_if_needed(state):
        logger.info(
            f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /my_bids"
        )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await ensure_user_registered(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    db = SessionLocal()
    try:

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bids = (
            db.query(Bid)
            .filter(Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .limit(10)
            .all()
        )

        if not user_bids:
            await message.answer(
                "üìã **–ú–æ–∏ —Å—Ç–∞–≤–∫–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.\n"
                f"–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–æ—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ @{TELEGRAM_CHANNEL_USERNAME} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
            )
            return

        text = "üìã **–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:**\n\n"
        for bid in user_bids:
            lot = db.query(Lot).filter(Lot.id == bid.lot_id).first()
            if lot:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞
                if lot.status == LotStatus.SOLD:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    max_bid = (
                        db.query(Bid)
                        .filter(Bid.lot_id == bid.lot_id)
                        .order_by(Bid.amount.desc())
                        .first()
                    )
                    if max_bid and max_bid.bidder_id == user.id:
                        status = "üèÜ –í—ã–∏–≥—Ä–∞–ª"
                        status_emoji = "üèÜ"
                    else:
                        status = "üí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª"
                        status_emoji = "üí∏"
                elif lot.status == LotStatus.ACTIVE and (
                    lot.end_time is None
                    or lot.end_time > get_moscow_time().replace(tzinfo=None)
                ):
                    status = "üîÑ –ê–∫—Ç–∏–≤–µ–Ω"
                    status_emoji = "üîÑ"
                else:
                    status = "‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω"
                    status_emoji = "‚è∞"

                text += f"{status_emoji} **{lot.title}**\n"
                text += f"üí∞ –°—Ç–∞–≤–∫–∞: {bid.amount:,.2f} ‚ÇΩ\n"
                text += f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"ü§ñ –ê–≤—Ç–æ: {'–î–∞' if bid.is_auto_bid else '–ù–µ—Ç'}\n"
                text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()


# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_bids —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ


@router.callback_query(F.data.startswith("quick_bid:"))
async def quick_bid(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞–≤–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        parts = callback.data.split(":")
        lot_id = int(parts[1])
        selected_amount = None
        if len(parts) >= 3:
            try:
                selected_amount = float(parts[2])
            except ValueError:
                selected_amount = None
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()

        if not user or not lot:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–≤–æ–π –ª–æ—Ç
        if lot.seller_id == user.id:
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç"
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        min_bid_amount = calculate_min_bid(lot.current_price)
        min_increment = min_bid_amount - lot.current_price

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏: –±–µ—Ä—ë–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–æ –Ω–µ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
        bid_amount_to_place = (
            selected_amount
            if selected_amount and selected_amount >= min_bid_amount
            else min_bid_amount
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ (–¥–æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏)
        leader_info_before = get_current_leader(db, lot.id)
        leader_text_before = ""
        if leader_info_before and leader_info_before[0]:
            if leader_info_before[1] is not None:
                leader_text_before = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_before[0]} ({leader_info_before[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text_before = (
                    f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_before[0]}\n"
                )

        # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        previous_top_bid = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id)
            .order_by(Bid.amount.desc())
            .first()
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
        auction_extended = False
        old_end_time = lot.end_time
        if lot.end_time and should_extend_auction(lot.end_time):
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
            lot.end_time = extend_auction_end_time(lot.end_time)
            auction_extended = True
            logger.info(f"–ê—É–∫—Ü–∏–æ–Ω {lot_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {lot.end_time}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
        new_bid = Bid(
            lot_id=lot_id,
            bidder_id=user.id,
            amount=bid_amount_to_place,
            is_auto_bid=False,
        )

        db.add(new_bid)
        lot.current_price = bid_amount_to_place
        db.commit()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏
        try:
            AutoBidManager.process_new_bid(lot_id, bid_amount_to_place, user.id)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏: {e}"
            )

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        logger.info(
            f"–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: –ª–æ—Ç {lot_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}, —Å—É–º–º–∞ {bid_amount_to_place}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        if auction_extended:
            await notification_service.notify_auction_extended(
                lot_id, old_end_time, lot.end_time
            )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ AutoBidManager –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        leader_info_after = get_current_leader(db, lot.id)
        leader_text = ""
        if leader_info_after and leader_info_after[0]:
            if leader_info_after[1] is not None:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]} ({leader_info_after[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]}\n"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        if previous_top_bid and previous_top_bid.bidder_id != user.id:
            await notification_service.notify_outbid(
                lot_id, previous_top_bid.bidder_id, bid_amount_to_place
            )

        # –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ö–∞–Ω–∞–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –ø–æ—Å—Ç—ã –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        result_text = (
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –°—É–º–º–∞: {bid_amount_to_place:,.2f} ‚ÇΩ\n"
            f"{leader_text}"
            f"üìä –°—Ç–∞—Ç—É—Å: –ü—Ä–∏–º–µ–Ω–µ–Ω–∞\n\n"
            f"‚ÑπÔ∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π"
        )
        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É",
                        callback_data=f"change_auto_bid:{lot_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É", callback_data=f"lot_details:{lot_id}"
                    )
                ],
            ]
        )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        try:
            await callback.message.edit_text(
                result_text, parse_mode="HTML", reply_markup=back_keyboard
            )
        except Exception as e:
            if "there is no text in the message to edit" in str(e).lower():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                try:
                    await callback.message.edit_caption(
                        caption=result_text,
                        parse_mode="HTML",
                        reply_markup=back_keyboard,
                    )
                except Exception:
                    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        result_text, parse_mode="HTML", reply_markup=back_keyboard
                    )
            else:
                raise e

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞–≤–∫–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏")
    finally:
        db.close()


@router.callback_query(F.data.startswith("custom_bid:"))
async def custom_bid(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await check_user_banned_callback(callback):
        return

    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        lot = db.query(Lot).filter(Lot.id == lot_id).first()

        if not user or not lot:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await callback.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–≤–æ–π –ª–æ—Ç
        if lot.seller_id == user.id:
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(lot_id=lot_id, message_id=callback.message.message_id)
        await state.set_state(BidStates.waiting_for_bid_amount)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        min_bid_amount = calculate_min_bid(lot.current_price)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ
        leader_info = get_current_leader(db, lot.id)
        leader_text = ""
        if leader_info and leader_info[0]:
            if leader_info[1] is not None:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info[0]} ({leader_info[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info[0]}\n"

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏</b>\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price:,.2f} ‚ÇΩ</b>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{min_bid_amount:,.2f} ‚ÇΩ</b>\n"
            f"{leader_text}"
            f"üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏"
        )

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É", callback_data=f"lot_details:{lot_id}"
                    )
                ]
            ]
        )
        # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        try:
            await callback.message.edit_text(
                text, parse_mode="HTML", reply_markup=back_keyboard
            )
        except Exception as e:
            if "there is no text in the message to edit" in str(e).lower():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                try:
                    await callback.message.edit_caption(
                        caption=text, parse_mode="HTML", reply_markup=back_keyboard
                    )
                except Exception:
                    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        text, parse_mode="HTML", reply_markup=back_keyboard
                    )
            else:
                raise e

        # Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏")
    finally:
        db.close()


@router.message(BidStates.waiting_for_bid_amount)
async def process_custom_bid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            await state.clear()
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    finally:
        db.close()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lot_id = data.get("lot_id")
    message_id = data.get("message_id")

    if not lot_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not lot or not user:
            await message.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await message.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            await state.clear()
            return

        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–≤–æ–π –ª–æ—Ç
        if lot.seller_id == user.id:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç"
            )
            await state.clear()
            return

        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
        try:
            bid_amount = float(message.text.replace(",", ".").replace(" ", ""))
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)"
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        min_bid_amount = calculate_min_bid(lot.current_price)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
        if bid_amount < min_bid_amount:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_bid_amount:,.2f} ‚ÇΩ"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ
        leader_info = get_current_leader(db, lot.id)
        leader_text = ""
        if leader_info and leader_info[0]:
            if leader_info[1] is not None:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> @{leader_info[0]} ({leader_info[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> @{leader_info[0]}\n"

        # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        previous_top_bid = (
            db.query(Bid)
            .filter(Bid.lot_id == lot_id)
            .order_by(Bid.amount.desc())
            .first()
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
        auction_extended = False
        old_end_time = lot.end_time
        if lot.end_time and should_extend_auction(lot.end_time):
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
            lot.end_time = extend_auction_end_time(lot.end_time)
            auction_extended = True
            logger.info(f"–ê—É–∫—Ü–∏–æ–Ω {lot_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {lot.end_time}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
        new_bid = Bid(
            lot_id=lot_id,
            bidder_id=user.id,
            amount=bid_amount,
            is_auto_bid=False,
        )

        db.add(new_bid)
        lot.current_price = bid_amount
        db.commit()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏
        try:
            AutoBidManager.process_new_bid(lot_id, bid_amount, user.id)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏: {e}"
            )

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        logger.info(
            f"–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: –ª–æ—Ç {lot_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}, —Å—É–º–º–∞ {bid_amount}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        if auction_extended:
            await notification_service.notify_auction_extended(
                lot_id, old_end_time, lot.end_time
            )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ AutoBidManager –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥–µ—Ä–∞ –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
        leader_info_after = get_current_leader(db, lot.id)
        leader_text = ""
        if leader_info_after and leader_info_after[0]:
            if leader_info_after[1] is not None:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]} ({leader_info_after[1]:,.2f} ‚ÇΩ)\n"
            else:
                leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]}\n"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        if previous_top_bid and previous_top_bid.bidder_id != user.id:
            await notification_service.notify_outbid(
                lot_id, previous_top_bid.bidder_id, bid_amount
            )

        # –ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ö–∞–Ω–∞–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –ø–æ—Å—Ç—ã –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        result_text = (
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –°—É–º–º–∞: {bid_amount:,.2f} ‚ÇΩ\n"
            f"{leader_text}"
            f"üìä –°—Ç–∞—Ç—É—Å: –ü—Ä–∏–º–µ–Ω–µ–Ω–∞\n\n"
            f"‚ÑπÔ∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π"
        )

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É; —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç—É", callback_data=f"lot_details:{lot_id}"
                    )
                ]
            ]
        )

        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=result_text,
                reply_markup=back_keyboard,
                parse_mode="HTML",
            )
            # –£–¥–∞–ª—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
            try:
                await message.delete()
            except Exception:
                pass
        except Exception:
            # –§–æ–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                result_text, parse_mode="HTML", reply_markup=back_keyboard
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏")
        await state.clear()
    finally:
        db.close()


@router.message(BidStates.waiting_for_max_bid_amount)
async def process_auto_bid_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.is_banned:
            await message.answer(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown",
            )
            await state.clear()
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    finally:
        db.close()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lot_id = data.get("lot_id")
    message_id = data.get("message_id")

    if not lot_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not lot or not user:
            await message.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç
        if lot.status != LotStatus.ACTIVE or (
            lot.end_time is not None
            and lot.end_time <= get_moscow_time().replace(tzinfo=None)
        ):
            await message.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
            await state.clear()
            return

        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–≤–æ–π –ª–æ—Ç
        if lot.seller_id == user.id:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç"
            )
            await state.clear()
            return

        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
        try:
            target_amount = float(message.text.replace(",", ".").replace(" ", ""))
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ
        check_result = AutoBidManager.check_auto_bid_with_notifications(
            user.id, lot.id, target_amount
        )

        if not check_result["can_set"]:
            await message.answer(f"‚ùå {check_result['message']}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        leader_text = ""
        if (
            check_result["current_leader_name"]
            and check_result["current_leader_name"] != "–ù–µ—Ç –ª–∏–¥–µ—Ä–∞"
        ):
            leader_text = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {check_result['current_leader_name']} ({check_result['current_leader_amount']:,.2f} ‚ÇΩ)\n"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É
        success = AutoBidManager.set_auto_bid(user.id, lot.id, target_amount)

        if success:
            # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞
            try:
                AutoBidManager.recalculate_auto_bids_for_lot(lot.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∞–≤—Ç–æ—Å—Ç–∞–≤–æ–∫ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ª–æ—Ç–∞ –∏ –ª–∏–¥–µ—Ä–∞ –∏–∑ –ë–î
            db.refresh(lot)
            leader_info_after = get_current_leader(db, lot.id)
            leader_text_after = ""
            if leader_info_after and leader_info_after[0]:
                if leader_info_after[1] is not None:
                    leader_text_after = f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]} ({leader_info_after[1]:,.2f} ‚ÇΩ)\n"
                else:
                    leader_text_after = (
                        f"ü•á <b>–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:</b> {leader_info_after[0]}\n"
                    )

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            existing_auto_bid = AutoBidManager.get_user_auto_bid(user.id, lot.id)
            if existing_auto_bid:
                auto_bid_text = f"ü§ñ <b>–í–∞—à–∞ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∞:</b> {existing_auto_bid.target_amount:,.2f} ‚ÇΩ"
            else:
                auto_bid_text = (
                    f"ü§ñ <b>–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {target_amount:,.2f} ‚ÇΩ"
                )

            response_text = (
                f"‚úÖ <b>–ê–≤—Ç–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üì¶ <b>–õ–æ—Ç:</b> {lot.title}\n"
                f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {lot.current_price:,.2f} ‚ÇΩ\n"
                f"{leader_text_after}"
                f"{auto_bid_text}\n\n"
                f"<i>–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫.</i>"
            )

            await message.answer(response_text, parse_mode="HTML")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ AutoBidManager
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏")
        await state.clear()
    finally:
        db.close()


@router.message(BidStates.waiting_for_bid_amount)
async def invalid_bid_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏"""
    await message.answer(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50) –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –≤–∞–ª—é—Ç—ã."
    )
