"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ª–æ—Ç–æ–≤
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from database.models import DocumentType, Lot, LotStatus

logger = logging.getLogger(__name__)


def format_local_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if dt is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    try:
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        import logging

        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"


class DocumentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ—Ç–æ–≤"""

    @staticmethod
    def generate_lot_report(lot: Lot, format_type: str = "txt") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ª–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if format_type == "html":
            return DocumentGenerator._generate_html_report(lot)
        else:
            return DocumentGenerator._generate_text_report(lot)

    @staticmethod
    def _generate_text_report(lot: Lot) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ª–æ—Ç–µ"""
        status_text = {
            LotStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            LotStatus.PENDING: "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            LotStatus.ACTIVE: "–ê–∫—Ç–∏–≤–µ–Ω",
            LotStatus.SOLD: "–ü—Ä–æ–¥–∞–Ω",
            LotStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω",
            LotStatus.EXPIRED: "–ò—Å—Ç–µ–∫",
        }.get(lot.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        content = f"""
–û–¢–ß–ï–¢ –û –õ–û–¢–ï
=============

ID: {lot.id}
–ù–∞–∑–≤–∞–Ω–∏–µ: {lot.title}
–û–ø–∏—Å–∞–Ω–∏–µ: {lot.description}
–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot.starting_price:,.2f} ‚ÇΩ
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ
–°—Ç–∞—Ç—É—Å: {status_text}
–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {lot.start_time.strftime("%d.%m.%Y %H:%M") if lot.start_time else "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"}
–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {lot.end_time.strftime("%d.%m.%Y %H:%M") if lot.end_time else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}
–°–æ–∑–¥–∞–Ω: {lot.created_at.strftime("%d.%m.%Y %H:%M")}

"""

        if lot.location:
            content += f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {lot.location}\n"
        if lot.seller_link:
            content += f"–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {lot.seller_link}\n"

        if lot.bids:
            content += f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–í–û–ö\n"
            content += f"================\n"
            content += f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {len(lot.bids)}\n"
            max_bid = max([bid.amount for bid in lot.bids]) if lot.bids else 0
            content += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_bid:,.2f} ‚ÇΩ\n"
            unique_bidders = len(set([bid.bidder_id for bid in lot.bids]))
            content += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {unique_bidders}\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            recent_bids = sorted(lot.bids, key=lambda x: x.created_at, reverse=True)[
                :10
            ]
            if recent_bids:
                content += f"\n–ü–û–°–õ–ï–î–ù–ò–ï –°–¢–ê–í–ö–ò\n"
                content += f"================\n"
                for i, bid in enumerate(recent_bids, 1):
                    content += f"{i}. {bid.amount:,.2f} ‚ÇΩ ({bid.created_at.strftime('%d.%m.%Y %H:%M')})\n"

        return content

    @staticmethod
    def _generate_html_report(lot: Lot) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç –æ –ª–æ—Ç–µ"""
        status_text = {
            LotStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            LotStatus.PENDING: "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            LotStatus.ACTIVE: "–ê–∫—Ç–∏–≤–µ–Ω",
            LotStatus.SOLD: "–ü—Ä–æ–¥–∞–Ω",
            LotStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω",
            LotStatus.EXPIRED: "–ò—Å—Ç–µ–∫",
        }.get(lot.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>–û—Ç—á–µ—Ç –æ –ª–æ—Ç–µ {lot.id} - {lot.title}</title>
    <style>
        body {{ 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{ 
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white; 
            padding: 30px; 
            border-radius: 10px; 
            margin-bottom: 30px;
            text-align: center;
        }}
        .info {{ 
            background-color: #f8f9fa; 
            padding: 25px; 
            margin: 20px 0; 
            border-radius: 10px;
            border-left: 5px solid #007bff;
        }}
        .status {{ 
            padding: 8px 15px; 
            border-radius: 5px; 
            font-weight: bold; 
            display: inline-block;
        }}
        .status-draft {{ background-color: #6c757d; color: white; }}
        .status-pending {{ background-color: #fff3cd; color: #856404; }}
        .status-active {{ background-color: #d4edda; color: #155724; }}
        .status-sold {{ background-color: #f8d7da; color: #721c24; }}
        .status-cancelled {{ background-color: #f8d7da; color: #721c24; }}
        .status-expired {{ background-color: #e2e3e5; color: #383d41; }}
        .stats {{ 
            background-color: #e9ecef; 
            padding: 25px; 
            margin: 20px 0; 
            border-radius: 10px;
            border-left: 5px solid #28a745;
        }}
        .bids-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }}
        .bids-table th, .bids-table td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        .bids-table th {{
            background-color: #007bff;
            color: white;
        }}
        .bids-table tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        .price {{
            font-weight: bold;
            color: #28a745;
        }}
        .timestamp {{
            color: #6c757d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì¶ –û—Ç—á–µ—Ç –æ –ª–æ—Ç–µ</h1>
            <h2>–õ–æ—Ç {lot.id}: {lot.title}</h2>
        </div>
        
        <div class="info">
            <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ</h2>
            <table style="width: 100%;">
                <tr>
                    <td><strong>ID:</strong></td>
                    <td>{lot.id}</td>
                </tr>
                <tr>
                    <td><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong></td>
                    <td>{lot.title}</td>
                </tr>
                <tr>
                    <td><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong></td>
                    <td>{lot.description}</td>
                </tr>
                <tr>
                    <td><strong>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</strong></td>
                    <td class="price">{lot.starting_price:,.2f} ‚ÇΩ</td>
                </tr>
                <tr>
                    <td><strong>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</strong></td>
                    <td class="price">{lot.current_price:,.2f} ‚ÇΩ</td>
                </tr>
                <tr>
                    <td><strong>–°—Ç–∞—Ç—É—Å:</strong></td>
                    <td><span class="status status-{lot.status.value}">{status_text}</span></td>
                </tr>
                <tr>
                    <td><strong>–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:</strong></td>
                    <td>{lot.start_time.strftime("%d.%m.%Y %H:%M") if lot.start_time else "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"}</td>
                </tr>
                <tr>
                    <td><strong>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong></td>
                    <td>{lot.end_time.strftime("%d.%m.%Y %H:%M") if lot.end_time else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</td>
                </tr>
                <tr>
                    <td><strong>–°–æ–∑–¥–∞–Ω:</strong></td>
                    <td>{lot.created_at.strftime("%d.%m.%Y %H:%M")}</td>
                </tr>
"""

        if lot.location:
            html += f"""
                <tr>
                    <td><strong>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</strong></td>
                    <td>{lot.location}</td>
                </tr>
"""
        if lot.seller_link:
            html += f"""
                <tr>
                    <td><strong>–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:</strong></td>
                    <td><a href="{lot.seller_link}" target="_blank">{lot.seller_link}</a></td>
                </tr>
"""

        if lot.bids:
            html += f"""
            </table>
        </div>
        
        <div class="stats">
            <h2>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫</h2>
            <p><strong>–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</strong> {len(lot.bids)}</p>
"""
            max_bid = max([bid.amount for bid in lot.bids]) if lot.bids else 0
            html += f'            <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</strong> <span class="price">{max_bid:,.2f} ‚ÇΩ</span></p>\n'
            unique_bidders = len(set([bid.bidder_id for bid in lot.bids]))
            html += f"            <p><strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> {unique_bidders}</p>\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            recent_bids = sorted(lot.bids, key=lambda x: x.created_at, reverse=True)[
                :10
            ]
            if recent_bids:
                html += f"""
            <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</h3>
            <table class="bids-table">
                <thead>
                    <tr>
                        <th>‚Ññ</th>
                        <th>–°—É–º–º–∞</th>
                        <th>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</th>
                    </tr>
                </thead>
                <tbody>
"""
                for i, bid in enumerate(recent_bids, 1):
                    html += f"""
                    <tr>
                        <td>{i}</td>
                        <td class="price">{bid.amount:,.2f} ‚ÇΩ</td>
                        <td class="timestamp">{bid.created_at.strftime("%d.%m.%Y %H:%M")}</td>
                    </tr>
"""
                html += """
                </tbody>
            </table>
"""
        else:
            html += """
            </table>
        </div>
"""

        html += """
    </div>
</body>
</html>
"""

        return html


class ImageManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ—Ç–æ–≤"""

    @staticmethod
    def save_images_for_lot(lot_id: int, image_paths: List[str]) -> List[str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª–æ—Ç–∞"""
        if not image_paths:
            return []

        import shutil
        from pathlib import Path

        saved_paths = []
        media_dir = Path("media/lots")
        lot_dir = media_dir / str(lot_id)
        lot_dir.mkdir(parents=True, exist_ok=True)

        for i, image_path in enumerate(image_paths):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                ext = Path(image_path).suffix
                new_filename = f"image_{i+1}{ext}"
                new_path = lot_dir / new_filename

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(image_path, new_path)
                saved_paths.append(str(new_path))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")

        return saved_paths

    @staticmethod
    def get_lot_images(lot: Lot) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ—Ç–∞"""
        if not lot.images:
            return []

        try:
            images_data = json.loads(lot.images)
            return images_data if isinstance(images_data, list) else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ—Ç–∞ {lot.id}: {e}")
            return []

    @staticmethod
    def delete_lot_images(lot_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞"""
        try:
            import shutil
            from pathlib import Path

            lot_dir = Path("media/lots") / str(lot_id)
            if lot_dir.exists():
                shutil.rmtree(lot_dir)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ—Ç–∞ {lot_id}: {e}")

    @staticmethod
    def save_files_for_lot(lot_id: int, file_paths: List[str]) -> List[str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ—Ç–∞"""
        saved_paths = []

        try:
            import shutil
            from pathlib import Path

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ—Ç–∞
            lot_dir = Path("media/lots") / str(lot_id) / "files"
            lot_dir.mkdir(parents=True, exist_ok=True)

            for file_path in file_paths:
                try:
                    source_path = Path(file_path)
                    if source_path.exists():
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ—Ç–∞
                        dest_path = lot_dir / source_path.name
                        shutil.copy2(source_path, dest_path)
                        saved_paths.append(str(dest_path))
                    else:
                        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ—Ç–∞ {lot_id}: {e}")

        return saved_paths

    @staticmethod
    def get_lot_files(lot: Lot) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ—Ç–∞"""
        if not lot.files:
            return []

        try:
            files_data = json.loads(lot.files)
            return files_data if isinstance(files_data, list) else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ –ª–æ—Ç–∞ {lot.id}: {e}")
            return []

    @staticmethod
    def delete_lot_files(lot_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ—Ç–∞"""
        try:
            import shutil
            from pathlib import Path

            files_dir = Path("media/lots") / str(lot_id) / "files"
            if files_dir.exists():
                shutil.rmtree(files_dir)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ—Ç–∞ {lot_id}: {e}")


class LotValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞"""

    @staticmethod
    def validate_lot_data(data: Dict[str, Any]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if not data.get("title", "").strip():
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        elif len(data.get("title", "").strip()) < 3:
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        elif len(data.get("title", "").strip()) > 200:
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if not data.get("description", "").strip():
            errors.append("–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        elif len(data.get("description", "").strip()) < 10:
            errors.append("–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        price = data.get("starting_price", 0)
        if price <= 0:
            errors.append("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        elif price > 1000000:
            errors.append("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1,000,000 ‚ÇΩ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
        start_time = data.get("start_time")
        if start_time is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ
            if start_time <= datetime.now():
                errors.append("–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

        return errors

    @staticmethod
    def validate_start_time(start_time) -> list:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –ª–æ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫."""
        errors = []
        if start_time is not None:
            if start_time <= datetime.now():
                errors.append("–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        return errors

    @staticmethod
    def can_edit_lot(lot: Lot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç"""
        return lot.status == LotStatus.DRAFT

    @staticmethod
    def can_delete_lot(lot: Lot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç"""
        return lot.status == LotStatus.DRAFT

    @staticmethod
    def can_submit_for_moderation(lot: Lot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        if lot.status != LotStatus.DRAFT:
            return False

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫), —Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if lot.start_time is None:
            return True

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–æ –≤ –±—É–¥—É—â–µ–º
        if lot.start_time is not None and lot.start_time <= datetime.now():
            return False

        return True
