"""
–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
"""

import logging
from datetime import datetime, timedelta

from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtWidgets import (
    QDialog,
    QFileDialog,
    QFormLayout,
    QGroupBox,
    QHBoxLayout,
    QHeaderView,
    QInputDialog,
    QLabel,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QTableWidget,
    QTableWidgetItem,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from database.db import SessionLocal
from database.models import Bid, Complaint, Lot, LotStatus, SupportQuestion, User
from management.utils.document_utils import (
    DocumentGenerator,
    ImageManager,
    format_local_time,
)

logger = logging.getLogger(__name__)


class LotDetailDialog(QDialog):
    """–ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞"""

    def __init__(self, lot: Lot, parent=None):
        super().__init__(parent)
        self.lot = lot
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle(f"üì¶ –î–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞: {self.lot.title}")
        self.setMinimumSize(800, 700)
        self.setStyleSheet(
            """
            QDialog {
                background-color: #f8f9fa;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #495057;
            }
            QLabel {
                color: #212529;
            }
            QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """
        )

        layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ
        info_group = QGroupBox("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QFormLayout()

        # ID –ª–æ—Ç–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        id_label = QLabel(f"#{self.lot.id}")
        id_label.setStyleSheet(
            """
            QLabel {
                background-color: #e9ecef;
                padding: 5px 10px;
                border-radius: 15px;
                font-weight: bold;
                color: #495057;
            }
        """
        )
        info_layout.addRow("ID –ª–æ—Ç–∞:", id_label)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title_label = QLabel(self.lot.title)
        title_label.setStyleSheet(
            """
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #212529;
                padding: 5px;
                background-color: #f8f9fa;
                border-radius: 4px;
            }
        """
        )
        info_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", title_label)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description_label = QLabel(self.lot.description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        description_label.setWordWrap(True)
        description_label.setStyleSheet(
            """
            QLabel {
                padding: 10px;
                background-color: #f8f9fa;
                border-radius: 5px;
                border-left: 4px solid #007bff;
            }
        """
        )
        info_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_label)

        # –¶–µ–Ω—ã
        price_layout = QHBoxLayout()

        starting_price_label = QLabel(f"{self.lot.starting_price:,.2f} ‚ÇΩ")
        starting_price_label.setStyleSheet(
            """
            QLabel {
                background-color: #d4edda;
                color: #155724;
                padding: 8px 12px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 14px;
            }
        """
        )
        price_layout.addWidget(QLabel("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:"))
        price_layout.addWidget(starting_price_label)

        current_price_label = QLabel(f"{self.lot.current_price:,.2f} ‚ÇΩ")
        current_price_label.setStyleSheet(
            """
            QLabel {
                background-color: #cce5ff;
                color: #004085;
                padding: 8px 12px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 14px;
            }
        """
        )
        price_layout.addWidget(QLabel("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:"))
        price_layout.addWidget(current_price_label)

        info_layout.addRow("–¶–µ–Ω—ã:", price_layout)

        # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        status_text = {
            LotStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            LotStatus.PENDING: "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            LotStatus.ACTIVE: "–ê–∫—Ç–∏–≤–µ–Ω",
            LotStatus.SOLD: "–ü—Ä–æ–¥–∞–Ω",
            LotStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω",
            LotStatus.EXPIRED: "–ò—Å—Ç–µ–∫",
        }.get(self.lot.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        status_label = QLabel(status_text)
        status_style = {
            LotStatus.PENDING: "background-color: #fff3cd; color: #856404;",
            LotStatus.ACTIVE: "background-color: #d4edda; color: #155724;",
            LotStatus.SOLD: "background-color: #d1ecf1; color: #0c5460;",
            LotStatus.CANCELLED: "background-color: #f8d7da; color: #721c24;",
            LotStatus.EXPIRED: "background-color: #e2e3e5; color: #383d41;",
        }.get(self.lot.status, "")

        status_label.setStyleSheet(
            f"""
            QLabel {{
                {status_style}
                padding: 8px 12px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 14px;
            }}
        """
        )
        info_layout.addRow("–°—Ç–∞—Ç—É—Å:", status_label)

        info_group.setLayout(info_layout)
        scroll_layout.addWidget(info_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        seller_group = QGroupBox("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ")
        seller_layout = QFormLayout()

        db = SessionLocal()
        try:
            seller = db.query(User).filter(User.id == self.lot.seller_id).first()
            seller_name = (
                f"@{seller.username}" if seller and seller.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            seller_balance = f"{seller.balance:,.2f} ‚ÇΩ" if seller else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            seller_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            seller_balance = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        finally:
            db.close()

        seller_name_label = QLabel(seller_name)
        seller_name_label.setStyleSheet(
            """
            QLabel {
                background-color: #e9ecef;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
            }
        """
        )
        seller_layout.addRow("Username:", seller_name_label)

        seller_balance_label = QLabel(seller_balance)
        seller_balance_label.setStyleSheet(
            """
            QLabel {
                background-color: #f8f9fa;
                padding: 5px 10px;
                border-radius: 4px;
            }
        """
        )
        seller_layout.addRow("–ë–∞–ª–∞–Ω—Å:", seller_balance_label)

        seller_group.setLayout(seller_layout)
        scroll_layout.addWidget(seller_group)

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        time_group = QGroupBox("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        time_layout = QFormLayout()

        created_label = QLabel(format_local_time(self.lot.created_at))
        created_label.setStyleSheet(
            """
            QLabel {
                background-color: #f8f9fa;
                padding: 5px 10px;
                border-radius: 4px;
            }
        """
        )
        time_layout.addRow("–°–æ–∑–¥–∞–Ω:", created_label)

        start_time_label = QLabel(format_local_time(self.lot.start_time))
        start_time_label.setStyleSheet(
            """
            QLabel {
                background-color: #d4edda;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
            }
        """
        )
        time_layout.addRow("–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:", start_time_label)

        end_time_label = QLabel(format_local_time(self.lot.end_time))
        end_time_label.setStyleSheet(
            """
            QLabel {
                background-color: #f8d7da;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
            }
        """
        )
        time_layout.addRow("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", end_time_label)

        time_group.setLayout(time_layout)
        scroll_layout.addWidget(time_group)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        extra_group = QGroupBox("üìÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        extra_layout = QFormLayout()

        doc_type = (
            self.lot.document_type.value if self.lot.document_type else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
        )
        doc_type_label = QLabel(doc_type)
        doc_type_label.setStyleSheet(
            """
            QLabel {
                background-color: #e9ecef;
                padding: 5px 10px;
                border-radius: 4px;
            }
        """
        )
        extra_layout.addRow("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", doc_type_label)

        if self.lot.location:
            location_label = QLabel(self.lot.location)
            location_label.setStyleSheet(
                """
                QLabel {
                    background-color: #f8f9fa;
                    padding: 5px 10px;
                    border-radius: 4px;
                }
            """
            )
            extra_layout.addRow("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", location_label)

        if self.lot.seller_link:
            link_label = QLabel(self.lot.seller_link)
            link_label.setStyleSheet(
                """
                QLabel {
                    background-color: #cce5ff;
                    padding: 5px 10px;
                    border-radius: 4px;
                    color: #004085;
                }
            """
            )
            extra_layout.addRow("–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:", link_label)

        extra_group.setLayout(extra_layout)
        scroll_layout.addWidget(extra_group)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞
        images_data = ImageManager.get_lot_images(self.lot)
        if images_data:
            images_group = QGroupBox("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞")
            images_layout = QVBoxLayout()

            for i, image_path in enumerate(images_data):
                try:
                    from pathlib import Path

                    if Path(image_path).exists():
                        image_label = QLabel()
                        pixmap = QPixmap(image_path)
                        if not pixmap.isNull():
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            scaled_pixmap = pixmap.scaled(
                                400, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation
                            )
                            image_label.setPixmap(scaled_pixmap)
                            image_label.setAlignment(Qt.AlignCenter)
                            image_label.setStyleSheet(
                                "QLabel { border: 2px solid #dee2e6; border-radius: 8px; padding: 10px; background-color: white; }"
                            )
                            images_layout.addWidget(image_label)
                        else:
                            images_layout.addWidget(
                                QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}")
                            )
                    else:
                        images_layout.addWidget(QLabel(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"))
                except Exception as e:
                    images_layout.addWidget(
                        QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
                    )

            images_group.setLayout(images_layout)
            scroll_layout.addWidget(images_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫
        db = SessionLocal()
        try:
            bids = db.query(Bid).filter(Bid.lot_id == self.lot.id).all()
            if bids:
                bids_group = QGroupBox("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫")
                bids_layout = QFormLayout()

                total_bids = len(bids)
                max_bid = max([bid.amount for bid in bids]) if bids else 0
                unique_bidders = len(set([bid.bidder_id for bid in bids]))

                total_bids_label = QLabel(str(total_bids))
                total_bids_label.setStyleSheet(
                    """
                    QLabel {
                        background-color: #d4edda;
                        color: #155724;
                        padding: 5px 10px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                """
                )
                bids_layout.addRow("–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:", total_bids_label)

                max_bid_label = QLabel(f"{max_bid:,.2f} ‚ÇΩ")
                max_bid_label.setStyleSheet(
                    """
                    QLabel {
                        background-color: #cce5ff;
                        color: #004085;
                        padding: 5px 10px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                """
                )
                bids_layout.addRow("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:", max_bid_label)

                unique_bidders_label = QLabel(str(unique_bidders))
                unique_bidders_label.setStyleSheet(
                    """
                    QLabel {
                        background-color: #fff3cd;
                        color: #856404;
                        padding: 5px 10px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                """
                )
                bids_layout.addRow("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", unique_bidders_label)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
                recent_bids = sorted(bids, key=lambda x: x.created_at, reverse=True)[:5]
                if recent_bids:
                    bids_layout.addRow("", QLabel(""))  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                    bids_layout.addRow("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:", QLabel(""))
                    for i, bid in enumerate(recent_bids):
                        bid_text = f"{i+1}. {bid.amount:,.2f} ‚ÇΩ ({format_local_time(bid.created_at)})"
                        bid_label = QLabel(bid_text)
                        bid_label.setStyleSheet(
                            """
                            QLabel {
                                background-color: #f8f9fa;
                                padding: 3px 8px;
                                border-radius: 3px;
                                margin: 2px;
                            }
                        """
                        )
                        bids_layout.addRow("", bid_label)

                bids_group.setLayout(bids_layout)
                scroll_layout.addWidget(bids_group)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞–≤–æ–∫: {e}")
        finally:
            db.close()

        scroll_widget.setLayout(scroll_layout)
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self.export_lot)
        buttons_layout.addWidget(export_btn)

        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        close_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #545b62;
            }
        """
        )
        buttons_layout.addWidget(close_btn)

        layout.addLayout(buttons_layout)

        self.setLayout(layout)

    def export_lot(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        try:
            pass

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
            file_dialog = QFileDialog()
            file_dialog.setNameFilter("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (*.txt);;HTML —Ñ–∞–π–ª (*.html)")
            file_dialog.setDefaultSuffix("txt")
            file_dialog.setAcceptMode(QFileDialog.AcceptSave)

            if file_dialog.exec_():
                file_path = file_dialog.selectedFiles()[0]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                format_type = "html" if file_path.endswith(".html") else "txt"
                content = DocumentGenerator.generate_lot_report(self.lot, format_type)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)

                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", f"–õ–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª:\n{file_path}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


class ModerationPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.init_ui()
        self.setup_timer()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_lots_moderation_tab()
        self.create_complaints_tab()
        self.create_support_tab()
        self.create_statistics_tab()

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.refresh_data()

    def create_lots_moderation_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.refresh_pending_lots)
        btn_layout.addWidget(refresh_btn)

        approve_all_btn = QPushButton("–û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ")
        approve_all_btn.clicked.connect(self.approve_all_lots)
        approve_all_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #27ae60;
                color: white;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """
        )
        btn_layout.addWidget(approve_all_btn)

        layout.addLayout(btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.pending_lots_table = QTableWidget()
        self.pending_lots_table.setColumnCount(8)
        self.pending_lots_table.setHorizontalHeaderLabels(
            [
                "ID",
                "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "–ü—Ä–æ–¥–∞–≤–µ—Ü",
                "–¶–µ–Ω–∞",
                "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "–°–æ–∑–¥–∞–Ω",
                "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞",
                "–î–µ–π—Å—Ç–≤–∏—è",
            ]
        )

        header = self.pending_lots_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)

        layout.addWidget(self.pending_lots_table)

        self.tab_widget.addTab(tab, "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ª–æ—Ç–æ–≤")

    def create_complaints_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∂–∞–ª–æ–±"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        refresh_complaints_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_complaints_btn.clicked.connect(self.refresh_complaints)
        btn_layout.addWidget(refresh_complaints_btn)

        layout.addLayout(btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –∂–∞–ª–æ–±
        self.complaints_table = QTableWidget()
        self.complaints_table.setColumnCount(7)
        self.complaints_table.setHorizontalHeaderLabels(
            ["ID", "–ñ–∞–ª–æ–±—â–∏–∫", "–ü—Ä–∏—á–∏–Ω–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞", "–î–µ–π—Å—Ç–≤–∏—è"]
        )

        header = self.complaints_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)

        layout.addWidget(self.complaints_table)

        self.tab_widget.addTab(tab, "–ñ–∞–ª–æ–±—ã")

    def create_support_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        refresh_support_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_support_btn.clicked.connect(self.refresh_support_questions)
        btn_layout.addWidget(refresh_support_btn)

        layout.addLayout(btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.support_questions_table = QTableWidget()
        self.support_questions_table.setColumnCount(8)
        self.support_questions_table.setHorizontalHeaderLabels(
            [
                "ID",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "–í–æ–ø—Ä–æ—Å",
                "–°—Ç–∞—Ç—É—Å",
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
                "–û—Ç–≤–µ—Ç–∏–ª",
                "–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞",
                "–î–µ–π—Å—Ç–≤–∏—è",
            ]
        )

        header = self.support_questions_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)

        layout.addWidget(self.support_questions_table)

        self.tab_widget.addTab(tab, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    def create_statistics_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        stats_layout = QFormLayout(stats_group)

        self.pending_lots_count = QLabel("0")
        self.approved_lots_count = QLabel("0")
        self.rejected_lots_count = QLabel("0")
        self.pending_complaints_count = QLabel("0")
        self.resolved_complaints_count = QLabel("0")

        stats_layout.addRow("–õ–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", self.pending_lots_count)
        stats_layout.addRow("–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:", self.approved_lots_count)
        stats_layout.addRow("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:", self.rejected_lots_count)
        stats_layout.addRow("–ñ–∞–ª–æ–± –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:", self.pending_complaints_count)
        stats_layout.addRow("–†–µ—à–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±:", self.resolved_complaints_count)

        layout.addWidget(stats_group)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        detail_group = QGroupBox("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        detail_layout = QVBoxLayout(detail_group)

        self.moderation_stats_text = QTextEdit()
        self.moderation_stats_text.setReadOnly(True)
        self.moderation_stats_text.setMaximumHeight(200)
        detail_layout.addWidget(self.moderation_stats_text)

        layout.addWidget(detail_group)

        self.tab_widget.addTab(tab, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    def setup_timer(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.timer = QTimer()
        self.timer.timeout.connect(self.refresh_data)
        self.timer.start(30000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        self.refresh_pending_lots()
        self.refresh_complaints()
        self.refresh_support_questions()
        self.refresh_statistics()

    def refresh_pending_lots(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            # –°–Ω–∞—á–∞–ª–∞ –ª–æ—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
            # –ó–∞—Ç–µ–º –ª–æ—Ç—ã —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            pending_lots = (
                db.query(Lot)
                .filter(Lot.status == LotStatus.PENDING)
                .order_by(
                    Lot.start_time.is_(None).desc(),  # –°–Ω–∞—á–∞–ª–∞ –ª–æ—Ç—ã –±–µ–∑ start_time
                    Lot.start_time.asc(),  # –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
                )
                .all()
            )

            self.pending_lots_table.setRowCount(len(pending_lots))

            for row, lot in enumerate(pending_lots):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                is_immediate = lot.start_time is None

                # ID
                id_item = QTableWidgetItem(str(lot.id))
                if is_immediate:
                    id_item.setBackground(Qt.yellow)  # –í—ã–¥–µ–ª—è–µ–º —Å—Ä–æ—á–Ω—ã–µ –ª–æ—Ç—ã
                self.pending_lots_table.setItem(row, 0, id_item)

                # –ù–∞–∑–≤–∞–Ω–∏–µ
                title_item = QTableWidgetItem(lot.title)
                if is_immediate:
                    title_item.setBackground(Qt.yellow)
                self.pending_lots_table.setItem(row, 1, title_item)

                # –ü—Ä–æ–¥–∞–≤–µ—Ü
                seller = db.query(User).filter(User.id == lot.seller_id).first()
                seller_name = (
                    f"@{seller.username}"
                    if seller and seller.username
                    else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )
                seller_item = QTableWidgetItem(seller_name)
                if is_immediate:
                    seller_item.setBackground(Qt.yellow)
                self.pending_lots_table.setItem(row, 2, seller_item)

                # –¶–µ–Ω–∞
                price_item = QTableWidgetItem(f"{lot.starting_price:,.2f} ‚ÇΩ")
                if is_immediate:
                    price_item.setBackground(Qt.yellow)
                self.pending_lots_table.setItem(row, 3, price_item)

                # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_type = (
                    lot.document_type.value if lot.document_type else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
                )
                doc_item = QTableWidgetItem(doc_type)
                if is_immediate:
                    doc_item.setBackground(Qt.yellow)
                self.pending_lots_table.setItem(row, 4, doc_item)

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                created_date = format_local_time(lot.created_at)
                created_item = QTableWidgetItem(created_date)
                if is_immediate:
                    created_item.setBackground(Qt.yellow)
                self.pending_lots_table.setItem(row, 5, created_item)

                # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                start_time_str = (
                    format_local_time(lot.start_time)
                    if lot.start_time
                    else "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
                )
                start_item = QTableWidgetItem(start_time_str)
                if is_immediate:
                    start_item.setBackground(Qt.yellow)
                    start_item.setForeground(Qt.red)  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö
                self.pending_lots_table.setItem(row, 6, start_item)

                # –î–µ–π—Å—Ç–≤–∏—è
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(0, 0, 0, 0)

                approve_btn = QPushButton("–û–¥–æ–±—Ä–∏—Ç—å")
                approve_btn.clicked.connect(
                    lambda checked, lot_id=lot.id: self.approve_lot(lot_id)
                )
                if is_immediate:
                    approve_btn.setStyleSheet(
                        "background-color: #e74c3c; color: white; font-weight: bold;"
                    )
                    approve_btn.setText("–û–¥–æ–±—Ä–∏—Ç—å —Å—Ä–æ—á–Ω–æ")
                else:
                    approve_btn.setStyleSheet(
                        "background-color: #27ae60; color: white;"
                    )
                actions_layout.addWidget(approve_btn)

                reject_btn = QPushButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                reject_btn.clicked.connect(
                    lambda checked, lot_id=lot.id: self.reject_lot(lot_id)
                )
                reject_btn.setStyleSheet("background-color: #e74c3c; color: white;")
                actions_layout.addWidget(reject_btn)

                view_btn = QPushButton("–ü—Ä–æ—Å–º–æ—Ç—Ä")
                view_btn.clicked.connect(
                    lambda checked, lot_id=lot.id: self.view_lot(lot_id)
                )
                actions_layout.addWidget(view_btn)

                self.pending_lots_table.setCellWidget(row, 7, actions_widget)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            db.close()

    def refresh_complaints(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∂–∞–ª–æ–±"""
        db = SessionLocal()
        try:
            complaints = db.query(Complaint).order_by(Complaint.created_at.desc()).all()

            self.complaints_table.setRowCount(len(complaints))

            for row, complaint in enumerate(complaints):
                # ID
                self.complaints_table.setItem(
                    row, 0, QTableWidgetItem(str(complaint.id))
                )

                # –ñ–∞–ª–æ–±—â–∏–∫
                complainant = (
                    db.query(User).filter(User.id == complaint.complainant_id).first()
                )
                if complainant and complainant.username:
                    complainant_name = f"@{complainant.username}"
                elif complainant and complainant.first_name:
                    complainant_name = complainant.first_name
                else:
                    complainant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                self.complaints_table.setItem(
                    row, 1, QTableWidgetItem(complainant_name)
                )

                # –¢–∏–ø –∂–∞–ª–æ–±—ã
                self.complaints_table.setItem(
                    row,
                    2,
                    QTableWidgetItem(
                        complaint.reason[:30] + "..."
                        if len(complaint.reason) > 30
                        else complaint.reason
                    ),
                )

                # –û–ø–∏—Å–∞–Ω–∏–µ (–æ–±—Ä–µ–∑–∞–µ–º)
                description = (
                    complaint.reason[:50] + "..."
                    if len(complaint.reason) > 50
                    else complaint.reason
                )
                self.complaints_table.setItem(row, 3, QTableWidgetItem(description))

                # –°—Ç–∞—Ç—É—Å
                status = "–†–µ—à–µ–Ω–∞" if complaint.is_resolved else "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
                self.complaints_table.setItem(row, 4, QTableWidgetItem(status))

                # –î–∞—Ç–∞
                created_date = format_local_time(complaint.created_at)
                self.complaints_table.setItem(row, 5, QTableWidgetItem(created_date))

                # –î–µ–π—Å—Ç–≤–∏—è
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(0, 0, 0, 0)

                resolve_btn = QPushButton("–†–µ—à–∏—Ç—å")
                resolve_btn.clicked.connect(
                    lambda checked, complaint_id=complaint.id: self.resolve_complaint(
                        complaint_id
                    )
                )
                resolve_btn.setStyleSheet("background-color: #3498db; color: white;")
                actions_layout.addWidget(resolve_btn)

                view_btn = QPushButton("–ü—Ä–æ—Å–º–æ—Ç—Ä")
                view_btn.clicked.connect(
                    lambda checked, complaint_id=complaint.id: self.view_complaint(
                        complaint_id
                    )
                )
                actions_layout.addWidget(view_btn)

                self.complaints_table.setCellWidget(row, 6, actions_widget)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        finally:
            db.close()

    def refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        db = SessionLocal()
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            pending_lots = db.query(Lot).filter(Lot.status == LotStatus.PENDING).count()
            approved_lots = db.query(Lot).filter(Lot.status == LotStatus.ACTIVE).count()
            rejected_lots = (
                db.query(Lot).filter(Lot.status == LotStatus.CANCELLED).count()
            )
            pending_complaints = (
                db.query(Complaint).filter(Complaint.is_resolved == False).count()
            )
            resolved_complaints = (
                db.query(Complaint).filter(Complaint.is_resolved == True).count()
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
            self.pending_lots_count.setText(str(pending_lots))
            self.approved_lots_count.setText(str(approved_lots))
            self.rejected_lots_count.setText(str(rejected_lots))
            self.pending_complaints_count.setText(str(pending_complaints))
            self.resolved_complaints_count.setText(str(resolved_complaints))

            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_processed = approved_lots + rejected_lots
            approval_rate = (
                (approved_lots / total_processed * 100) if total_processed > 0 else 0
            )

            stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞ {datetime.now().strftime('%d.%m.%Y')}:

üì¶ –õ–æ—Ç—ã:
‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_lots}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_lots}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_lots}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_rate:.1f}%

üìù –ñ–∞–ª–æ–±—ã:
‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_complaints}
‚Ä¢ –†–µ—à–µ–Ω–æ: {resolved_complaints}
‚Ä¢ –í—Å–µ–≥–æ: {pending_complaints + resolved_complaints}

‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ª–æ—Ç–∞: ~5 –º–∏–Ω—É—Ç
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: ~2 —á–∞—Å–∞
            """

            self.moderation_stats_text.setText(stats_text.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            db.close()

    def refresh_support_questions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            questions = (
                db.query(SupportQuestion)
                .order_by(SupportQuestion.created_at.desc())
                .all()
            )

            self.support_questions_table.setRowCount(len(questions))

            for row, question in enumerate(questions):
                # ID
                self.support_questions_table.setItem(
                    row, 0, QTableWidgetItem(str(question.id))
                )

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                user = db.query(User).filter(User.id == question.user_id).first()
                user_text = (
                    f"@{user.username}"
                    if user and user.username
                    else f"ID: {question.user_id}"
                )
                self.support_questions_table.setItem(
                    row, 1, QTableWidgetItem(user_text)
                )

                # –í–æ–ø—Ä–æ—Å (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
                question_text = (
                    question.question[:50] + "..."
                    if len(question.question) > 50
                    else question.question
                )
                self.support_questions_table.setItem(
                    row, 2, QTableWidgetItem(question_text)
                )

                # –°—Ç–∞—Ç—É—Å
                status_text = {
                    "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                    "answered": "‚úÖ –û—Ç–≤–µ—á–µ–Ω",
                    "closed": "üîí –ó–∞–∫—Ä—ã—Ç",
                }.get(question.status, question.status)
                self.support_questions_table.setItem(
                    row, 3, QTableWidgetItem(status_text)
                )

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                created_date = format_local_time(question.created_at)
                self.support_questions_table.setItem(
                    row, 4, QTableWidgetItem(created_date)
                )

                # –û—Ç–≤–µ—Ç–∏–ª
                if question.answered_by:
                    moderator = (
                        db.query(User).filter(User.id == question.answered_by).first()
                    )
                    moderator_text = (
                        f"@{moderator.username}"
                        if moderator and moderator.username
                        else f"ID: {question.answered_by}"
                    )
                else:
                    moderator_text = "‚Äî"
                self.support_questions_table.setItem(
                    row, 5, QTableWidgetItem(moderator_text)
                )

                # –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                if question.answered_at:
                    answered_date = format_local_time(question.answered_at)
                else:
                    answered_date = "‚Äî"
                self.support_questions_table.setItem(
                    row, 6, QTableWidgetItem(answered_date)
                )

                # –î–µ–π—Å—Ç–≤–∏—è
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(0, 0, 0, 0)

                if question.status == "pending":
                    answer_btn = QPushButton("–û—Ç–≤–µ—Ç–∏—Ç—å")
                    answer_btn.clicked.connect(
                        lambda checked, q_id=question.id: self.answer_support_question(
                            q_id
                        )
                    )
                    answer_btn.setStyleSheet(
                        """
                        QPushButton {
                            background-color: #3498db;
                            color: white;
                            padding: 4px 8px;
                            border-radius: 3px;
                        }
                        QPushButton:hover {
                            background-color: #2980b9;
                        }
                    """
                    )
                    actions_layout.addWidget(answer_btn)

                view_btn = QPushButton("–ü—Ä–æ—Å–º–æ—Ç—Ä")
                view_btn.clicked.connect(
                    lambda checked, q_id=question.id: self.view_support_question(q_id)
                )
                view_btn.setStyleSheet(
                    """
                    QPushButton {
                        background-color: #95a5a6;
                        color: white;
                        padding: 4px 8px;
                        border-radius: 3px;
                    }
                    QPushButton:hover {
                        background-color: #7f8c8d;
                    }
                """
                )
                actions_layout.addWidget(view_btn)

                self.support_questions_table.setCellWidget(row, 7, actions_widget)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}"
            )
        finally:
            db.close()

    def approve_lot(self, lot_id: int):
        """–û–¥–æ–±—Ä—è–µ—Ç –ª–æ—Ç"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if lot:
                current_time = datetime.now()

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (start_time = None), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                if lot.start_time is None:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                    lot.start_time = current_time
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
                    lot.end_time = current_time + timedelta(hours=24)

                # –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ—Ç –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
                lot.status = LotStatus.ACTIVE
                lot.approved_by = self.main_window.get_current_user()["name"]
                lot.approved_at = datetime.utcnow()
                db.commit()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ
                if lot.start_time <= current_time:
                    # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
                    from management.core.telegram_publisher_sync import (
                        telegram_publisher_sync,
                    )

                    telegram_publisher_sync.publish_lot(lot_id)

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–õ–æ—Ç {lot_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!\n"
                        f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {format_local_time(lot.start_time)}\n"
                        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_local_time(lot.end_time)}",
                    )
                else:
                    # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ –±—É–¥—É—â–µ–º - –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                    from management.core.lot_scheduler import lot_scheduler

                    lot_scheduler.schedule_lot_publication(lot.id, lot.start_time)

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–õ–æ—Ç {lot_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n"
                        f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {format_local_time(lot.start_time)}\n"
                        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_local_time(lot.end_time)}\n\n"
                        f"–õ–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª –≤ {format_local_time(lot.start_time)}",
                    )

                self.refresh_pending_lots()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                if hasattr(self.main_window, "refresh_system_stats"):
                    self.main_window.refresh_system_stats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    def reject_lot(self, lot_id: int):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ª–æ—Ç"""
        reason, ok = QInputDialog.getText(
            self, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ª–æ—Ç–∞", "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:"
        )
        if ok and reason:
            db = SessionLocal()
            try:
                lot = db.query(Lot).filter(Lot.id == lot_id).first()
                if lot:
                    lot.status = LotStatus.CANCELLED
                    lot.rejection_reason = reason
                    db.commit()

                    self.refresh_pending_lots()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                    if hasattr(self.main_window, "refresh_system_stats"):
                        self.main_window.refresh_system_stats()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–õ–æ—Ç {lot_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
            finally:
                db.close()

    def view_lot(self, lot_id: int):
        """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ—Ç"""
        db = SessionLocal()
        try:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if lot:
                # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞
                lot_detail_dialog = LotDetailDialog(lot, self)
                lot_detail_dialog.exec_()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    def resolve_complaint(self, complaint_id: int):
        """–†–µ—à–∞–µ—Ç –∂–∞–ª–æ–±—É"""
        db = SessionLocal()
        try:
            complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
            if complaint:
                complaint.is_resolved = True
                db.commit()

                self.refresh_complaints()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ñ–∞–ª–æ–±–∞ {complaint_id} —Ä–µ—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        finally:
            db.close()

    def answer_support_question(self, question_id: int):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        answer, ok = QInputDialog.getMultiLineText(
            self, "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å", "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        if ok and answer:
            db = SessionLocal()
            try:
                question = (
                    db.query(SupportQuestion)
                    .filter(SupportQuestion.id == question_id)
                    .first()
                )
                if question:
                    current_user = self.main_window.get_current_user()

                    question.answer = answer
                    question.status = "answered"
                    question.answered_by = current_user["id"]
                    question.answered_at = datetime.now()
                    db.commit()

                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    # –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º

                    self.refresh_support_questions()
                    QMessageBox.information(
                        self, "–£—Å–ø–µ—Ö", f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
                QMessageBox.critical(
                    self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}"
                )
            finally:
                db.close()

    def view_support_question(self, question_id: int):
        """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        db = SessionLocal()
        try:
            question = (
                db.query(SupportQuestion)
                .filter(SupportQuestion.id == question_id)
                .first()
            )
            if question:
                user = db.query(User).filter(User.id == question.user_id).first()
                user_name = (
                    f"@{user.username}"
                    if user and user.username
                    else f"ID: {question.user_id}"
                )

                moderator = None
                if question.answered_by:
                    moderator = (
                        db.query(User).filter(User.id == question.answered_by).first()
                    )
                moderator_name = (
                    f"@{moderator.username}"
                    if moderator and moderator.username
                    else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )

                details = f"""
üìû **–î–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #{question_id}**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name}
üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {format_local_time(question.created_at)}
üìä **–°—Ç–∞—Ç—É—Å:** {question.status}

‚ùì **–í–æ–ø—Ä–æ—Å:**
{question.question}

"""

                if question.answer:
                    details += f"""
‚úÖ **–û—Ç–≤–µ—Ç:**
{question.answer}

üë®‚Äçüíº **–û—Ç–≤–µ—Ç–∏–ª:** {moderator_name}
üìÖ **–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:** {format_local_time(question.answered_at)}
"""
                else:
                    details += "\n‚è≥ **–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞**"

                QMessageBox.information(self, f"–í–æ–ø—Ä–æ—Å #{question_id}", details)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        finally:
            db.close()

    def view_complaint(self, complaint_id: int):
        """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∂–∞–ª–æ–±—É"""
        db = SessionLocal()
        try:
            complaint = db.query(Complaint).filter(Complaint.id == complaint_id).first()
            if complaint:
                complainant = (
                    db.query(User).filter(User.id == complaint.complainant_id).first()
                )
                if complainant and complainant.username:
                    complainant_name = f"@{complainant.username}"
                elif complainant and complainant.first_name:
                    complainant_name = complainant.first_name
                else:
                    complainant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                details = f"""
–î–µ—Ç–∞–ª–∏ –∂–∞–ª–æ–±—ã {complaint_id}:

üë§ –ñ–∞–ª–æ–±—â–∏–∫: {complainant_name}
üìù –ü—Ä–∏—á–∏–Ω–∞: {complaint.reason}
{f'üìÑ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {complaint.evidence}' if complaint.evidence else 'üìÑ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}
üìÖ –î–∞—Ç–∞: {format_local_time(complaint.created_at)}
‚úÖ –°—Ç–∞—Ç—É—Å: {'–†–µ—à–µ–Ω–∞' if complaint.is_resolved else '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'}
                """

                QMessageBox.information(self, f"–ñ–∞–ª–æ–±–∞ {complaint_id}", details.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∂–∞–ª–æ–±—ã: {e}")
        finally:
            db.close()

    def approve_all_lots(self):
        """–û–¥–æ–±—Ä—è–µ—Ç –≤—Å–µ –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        reply = QMessageBox.question(
            self,
            "–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply == QMessageBox.Yes:
            db = SessionLocal()
            try:
                pending_lots = (
                    db.query(Lot).filter(Lot.status == LotStatus.PENDING).all()
                )
                approved_count = 0
                current_time = datetime.now()

                for lot in pending_lots:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (start_time = None), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                    if lot.start_time is None:
                        lot.start_time = current_time
                        lot.end_time = current_time + timedelta(hours=24)

                    lot.status = LotStatus.ACTIVE
                    lot.approved_by = self.main_window.get_current_user()["name"]
                    lot.approved_at = datetime.utcnow()
                    approved_count += 1

                db.commit()

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –ª–æ—Ç–æ–≤ —Å –±—É–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞—Ä—Ç–∞
                for lot in pending_lots:
                    if lot.start_time is None:
                        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
                        from management.core.telegram_publisher_sync import (
                            telegram_publisher_sync,
                        )

                        telegram_publisher_sync.publish_lot(lot.id)
                    elif lot.start_time > current_time:
                        # –ë—É–¥—É—â–µ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                        from management.core.lot_scheduler import lot_scheduler

                        lot_scheduler.schedule_lot_publication(lot.id, lot.start_time)
                    else:
                        # –ü—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
                        from management.core.telegram_publisher_sync import (
                            telegram_publisher_sync,
                        )

                        telegram_publisher_sync.publish_lot(lot.id)

                self.refresh_pending_lots()
                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", f"–û–¥–æ–±—Ä–µ–Ω–æ {approved_count} –ª–æ—Ç–æ–≤"
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
                QMessageBox.critical(
                    self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}"
                )
            finally:
                db.close()
