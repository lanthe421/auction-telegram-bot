import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from bot.handlers.admin import is_admin
from bot.utils.finance_manager import finance_manager
from bot.utils.fsm_utils import clear_bid_state_if_needed
from bot.utils.keyboards import get_main_keyboard, get_user_profile_keyboard
from database.db import SessionLocal
from database.models import Bid, Lot, LotStatus, User

router = Router()
logger = logging.getLogger(__name__)


class TopUpStates(StatesGroup):
    waiting_for_amount = State()


class WithdrawStates(StatesGroup):
    waiting_for_amount = State()


async def _ensure_user(message: Message) -> User | None:
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s", user.telegram_id)
        return user
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        return None
    finally:
        db.close()


@router.message(Command("profile"))
@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_profile(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await clear_bid_state_if_needed(state)
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        return

    text = (
        f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"–ò–º—è: {user.first_name or '‚Äî'}\n"
        f"Username: @{user.username or 'N/A'}\n"
        f"Telegram ID: {user.telegram_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.balance:,.2f} ‚ÇΩ\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {user.successful_payments}\n"
        f"–°—Ç—Ä–∞–π–∫–∏: {user.strikes}/3\n"
    )

    await message.answer(
        text, reply_markup=get_user_profile_keyboard(), parse_mode="HTML"
    )


@router.message(F.text == "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å")
@router.message(Command("balance"))
async def show_my_balance(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        return
    await message.answer(
        f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n" f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} ‚ÇΩ",
        reply_markup=get_user_profile_keyboard(),
        parse_mode="HTML",
    )


@router.message(F.text == "üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")
async def show_my_bids(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        return

    db = SessionLocal()
    try:
        bids = (
            db.query(Bid)
            .filter(Bid.bidder_id == user.id)
            .order_by(Bid.created_at.desc())
            .limit(10)
            .all()
        )
        if not bids:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫")
            return
        text = "üìã <b>–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</b>\n\n"
        for b in bids:
            lot = db.query(Lot).filter(Lot.id == b.lot_id).first()
            if not lot:
                continue
            text += (
                f"üè∑Ô∏è {lot.title}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {b.amount:,.2f} ‚ÇΩ\n"
                f"üìÖ {b.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        await message.answer(text, parse_mode="HTML")
    finally:
        db.close()


@router.message(F.text == "üéØ –ú–æ–µ —É—á–∞—Å—Ç–∏–µ")
async def show_my_participation(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        return
    db = SessionLocal()
    try:
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_lot_ids = (
            db.query(Bid.lot_id)
            .distinct()
            .join(Lot, Lot.id == Bid.lot_id)
            .filter(Bid.bidder_id == user.id, Lot.status == LotStatus.ACTIVE)
            .all()
        )
        active_lot_ids = [lid[0] for lid in active_lot_ids]
        if not active_lot_ids:
            await message.answer("üéØ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è")
            return
        text = "üéØ <b>–ú–æ–µ —É—á–∞—Å—Ç–∏–µ</b>\n\n"
        for lot_id in active_lot_ids[:10]:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                continue
            text += (
                f"üè∑Ô∏è {lot.title}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ\n"
                f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {lot.end_time.strftime('%d.%m.%Y %H:%M') if lot.end_time else '‚Äî'}\n\n"
            )
        await message.answer(text, parse_mode="HTML")
    finally:
        db.close()


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤")
async def show_trade_history(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        return
    db = SessionLocal()
    try:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã, –≥–¥–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        won_bids = (
            db.query(Bid)
            .join(Lot, Lot.id == Bid.lot_id)
            .filter(Bid.bidder_id == user.id, Lot.status == LotStatus.SOLD)
            .order_by(Bid.created_at.desc())
            .limit(10)
            .all()
        )
        if not won_bids:
            await message.answer("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ —Å –≤–∞—à–∏–º —É—á–∞—Å—Ç–∏–µ–º")
            return
        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤</b>\n\n"
        for b in won_bids:
            lot = db.query(Lot).filter(Lot.id == b.lot_id).first()
            if not lot:
                continue
            text += (
                f"üè∑Ô∏è {lot.title}\n"
                f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {b.amount:,.2f} ‚ÇΩ\n"
                f"üìÖ {b.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        await message.answer(text, parse_mode="HTML")
    finally:
        db.close()


@router.message(Command("support"))
@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def user_support_entry(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    await message.answer(
        "üìù <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É.",
        parse_mode="HTML",
    )
    try:
        from bot.handlers.support import SupportStates

        await state.set_state(SupportStates.waiting_for_question)
    except Exception:
        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        await message.answer("‚ùå –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@router.callback_query(F.data == "top_up_balance")
async def top_up_info(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ‚Äú‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å‚Äù –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É."
    )


@router.callback_query(F.data == "start_top_up")
async def start_top_up(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)",
        parse_mode="HTML",
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    await state.set_state(TopUpStates.waiting_for_amount)


@router.callback_query(F.data == "start_withdraw")
async def start_withdraw(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "üèß <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)",
        parse_mode="HTML",
    )
    await state.set_state(WithdrawStates.waiting_for_amount)


@router.callback_query(F.data == "my_participation")
async def my_participation_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await clear_bid_state_if_needed(state)
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        active_lot_ids = (
            db.query(Bid.lot_id)
            .distinct()
            .join(Lot, Lot.id == Bid.lot_id)
            .filter(Bid.bidder_id == user.id, Lot.status == LotStatus.ACTIVE)
            .all()
        )
        active_lot_ids = [lid[0] for lid in active_lot_ids]
        if not active_lot_ids:
            await callback.message.answer("üéØ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è")
            return
        text = "üéØ <b>–ú–æ–µ —É—á–∞—Å—Ç–∏–µ</b>\n\n"
        for lot_id in active_lot_ids[:10]:
            lot = db.query(Lot).filter(Lot.id == lot_id).first()
            if not lot:
                continue
            text += (
                f"üè∑Ô∏è {lot.title}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price:,.2f} ‚ÇΩ\n"
                f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {lot.end_time.strftime('%d.%m.%Y %H:%M') if lot.end_time else '‚Äî'}\n\n"
            )
        await callback.message.answer(text, parse_mode="HTML")
    finally:
        db.close()


@router.callback_query(F.data == "user_stats")
async def user_stats_callback(callback: CallbackQuery):
    await callback.answer()
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        stats = finance_manager.get_user_financial_summary(user.id)
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {stats.get('successful_payments', 0)}\n"
            f"–°—Ç—Ä–∞–π–∫–∏: {stats.get('strikes', 0)}/3\n"
        )
        await callback.message.answer(text, parse_mode="HTML")
    finally:
        db.close()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def user_settings(message: Message, state: FSMContext):
    await clear_bid_state_if_needed(state)
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
    if is_admin(message.from_user.id):
        return
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        parse_mode="HTML",
    )


@router.message(TopUpStates.waiting_for_amount)
async def process_top_up_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
    text_input = (message.text or "").strip()
    if text_input.startswith("/"):
        await state.clear()
        if text_input.lower().startswith("/balance"):
            await show_my_balance(message, state)
        else:
            await message.answer("‚ùå –í–≤–æ–¥ —Å—É–º–º—ã –æ—Ç–º–µ–Ω—ë–Ω.")
        return
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        return
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    try:
        amount_text = text_input.replace(" ", "").replace(",", ".")
        amount = float(amount_text)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000")
        return
    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    if amount > 1_000_000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Ä–∞–∑: 1 000 000 ‚ÇΩ")
        return

    # –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    from database.db import SessionLocal as _SessionLocal

    db = _SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ id, —Ç.–∫. user –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏
        u = db.query(User).filter(User.id == user.id).first()
        if not u:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        ok = finance_manager.add_balance(u.id, amount, reason="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
        if ok:
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:,.2f} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ—Ç—Ä–∞–∂—ë–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    finally:
        db.close()
        await state.clear()


@router.message(WithdrawStates.waiting_for_amount)
async def process_withdraw_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞"""
    text_input = (message.text or "").strip()
    if text_input.startswith("/"):
        await state.clear()
        if text_input.lower().startswith("/balance"):
            await show_my_balance(message, state)
        else:
            await message.answer("‚ùå –í–≤–æ–¥ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        return
    user = await _ensure_user(message)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        return
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    try:
        amount_text = text_input.replace(" ", "").replace(",", ".")
        amount = float(amount_text)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000")
        return
    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    if amount > 1_000_000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –∑–∞ —Ä–∞–∑: 1 000 000 ‚ÇΩ")
        return

    from database.db import SessionLocal as _SessionLocal

    db = _SessionLocal()
    try:
        u = db.query(User).filter(User.id == user.id).first()
        if not u:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        ok = finance_manager.deduct_balance(u.id, amount, reason="–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
        if ok:
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:,.2f} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞.",
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            )
    finally:
        db.close()
        await state.clear()


@router.message(Command("topup"))
async def cmd_topup(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: /topup"""
    await message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)",
        parse_mode="HTML",
    )
    await state.set_state(TopUpStates.waiting_for_amount)
