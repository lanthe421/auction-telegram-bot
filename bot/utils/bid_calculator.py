import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
)

# –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ (—Ü–µ–Ω–∞ -> –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥)
# –°—Ö–µ–º–∞: 1,2,5,10, –∑–∞—Ç–µ–º 10,20,50,100 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
BID_INCREMENT_RULES = {
    0: 1,  # 0-99‚ÇΩ -> —à–∞–≥ 1‚ÇΩ
    100: 2,  # 100-499‚ÇΩ -> —à–∞–≥ 2‚ÇΩ
    500: 5,  # 500-999‚ÇΩ -> —à–∞–≥ 5‚ÇΩ
    1000: 10,  # 1000-4999‚ÇΩ -> —à–∞–≥ 10‚ÇΩ
    5000: 20,  # 5000-9999‚ÇΩ -> —à–∞–≥ 20‚ÇΩ
    10000: 50,  # 10000-49999‚ÇΩ -> —à–∞–≥ 50‚ÇΩ
    50000: 100,  # 50000-99999‚ÇΩ -> —à–∞–≥ 100‚ÇΩ
    100000: 200,  # 100000-499999‚ÇΩ -> —à–∞–≥ 200‚ÇΩ
    500000: 500,  # 500000-999999‚ÇΩ -> —à–∞–≥ 500‚ÇΩ
    1000000: 1000,  # 1000000-4999999‚ÇΩ -> —à–∞–≥ 1000‚ÇΩ
    5000000: 2000,  # 5000000+‚ÇΩ -> —à–∞–≥ 2000‚ÇΩ
}


def calculate_min_bid(current_price: float) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞

    Returns:
        float: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞
    """
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
    min_increment = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    for price_threshold, increment in sorted(BID_INCREMENT_RULES.items()):
        if current_price >= price_threshold:
            min_increment = increment
        else:
            break

    return current_price + min_increment


def get_bid_increment_info(current_price: float) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö
    """
    min_bid = calculate_min_bid(current_price)
    increment = min_bid - current_price

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    current_rule = None
    next_rule = None

    sorted_rules = sorted(BID_INCREMENT_RULES.items())

    for i, (threshold, step) in enumerate(sorted_rules):
        if current_price >= threshold:
            current_rule = (threshold, step)
            if i + 1 < len(sorted_rules):
                next_rule = sorted_rules[i + 1]

    return {
        "current_price": current_price,
        "min_bid": min_bid,
        "increment": increment,
        "current_rule": current_rule,
        "next_rule": next_rule,
    }


def format_bid_info(current_price: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    info = get_bid_increment_info(current_price)

    text = f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price}‚ÇΩ\n"
    text += f"üìà <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> {info['min_bid']}‚ÇΩ\n"
    text += f"üìä <b>–®–∞–≥ —Å—Ç–∞–≤–∫–∏:</b> {info['increment']}‚ÇΩ\n\n"

    if info["next_rule"]:
        next_threshold, next_step = info["next_rule"]
        text += f"‚ÑπÔ∏è –ü—Ä–∏ —Ü–µ–Ω–µ {next_threshold}‚ÇΩ —à–∞–≥ —É–≤–µ–ª–∏—á–∏—Ç—Å—è –¥–æ {next_step}‚ÇΩ"

    return text


def validate_bid(current_price: float, bid_amount: float) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–≤–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π

    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞
        bid_amount: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞

    Returns:
        tuple: (is_valid, error_message)
    """
    min_bid = calculate_min_bid(current_price)

    if bid_amount < min_bid:
        return False, f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_bid}‚ÇΩ"

    if bid_amount <= current_price:
        return False, f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ({current_price}‚ÇΩ)"

    return True, "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"


def get_quick_bid_options(current_price: float) -> list[float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫

    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞

    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç–∞–≤–æ–∫
    """
    info = get_bid_increment_info(current_price)
    min_bid = info["min_bid"]
    increment = info["increment"]

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, +2 —à–∞–≥–∞, +5 —à–∞–≥–æ–≤
    options = [
        min_bid,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        min_bid + increment,  # +1 —à–∞–≥
        min_bid + increment * 2,  # +2 —à–∞–≥–∞
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –ª–æ—Ç–æ–≤
    if current_price >= 1000:
        options.append(min_bid + increment * 5)  # +5 —à–∞–≥–æ–≤

    return options
