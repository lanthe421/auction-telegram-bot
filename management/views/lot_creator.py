"""
–°–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ—Ç–æ–≤
"""

import json
import logging
from datetime import datetime, timedelta
from typing import List

from PyQt5.QtCore import QDateTime, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import (
    QComboBox,
    QDateEdit,
    QFileDialog,
    QFormLayout,
    QFrame,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QListWidgetItem,
    QMessageBox,
    QPushButton,
    QSpinBox,
    QTextEdit,
    QTimeEdit,
    QVBoxLayout,
    QWidget,
)

from database.db import SessionLocal
from database.models import DocumentType, Lot, LotStatus, User, UserRole

logger = logging.getLogger(__name__)


class LotCreator(QWidget):
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ—Ç–æ–≤"""

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.selected_images = []
        self.selected_files = []
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        form_group = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        form_layout = QFormLayout(form_group)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
        self.title_edit = QLineEdit()
        self.title_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", self.title_edit)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(100)
        self.description_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", self.description_edit)

        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
        self.starting_price_spin = QSpinBox()
        self.starting_price_spin.setRange(1, 10000000)
        self.starting_price_spin.setValue(1000)
        self.starting_price_spin.setSuffix(" ‚ÇΩ")
        form_layout.addRow("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:", self.starting_price_spin)

        # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.document_type_combo = QComboBox()
        self.document_type_combo.addItems(
            ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"]
        )
        form_layout.addRow("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", self.document_type_combo)

        layout.addWidget(form_group)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        schedule_group = QGroupBox("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        schedule_layout = QFormLayout(schedule_group)

        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        self.start_date_edit = QDateEdit()
        self.start_date_edit.setDate(datetime.now().date())
        schedule_layout.addRow("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:", self.start_date_edit)

        self.start_time_edit = QTimeEdit()
        self.start_time_edit.setTime(datetime.now().time())
        schedule_layout.addRow("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", self.start_time_edit)

        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞
        self.duration_spin = QSpinBox()
        self.duration_spin.setRange(1, 30)
        self.duration_spin.setValue(7)
        self.duration_spin.setSuffix(" –¥–Ω–µ–π")
        schedule_layout.addRow("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", self.duration_spin)

        layout.addWidget(schedule_group)

        # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        media_group = QGroupBox("–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã")
        media_layout = QVBoxLayout(media_group)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_layout = QHBoxLayout()
        add_image_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        add_image_btn.clicked.connect(self.add_images)
        images_layout.addWidget(add_image_btn)

        clear_images_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_images_btn.clicked.connect(self.clear_images)
        images_layout.addWidget(clear_images_btn)

        media_layout.addLayout(images_layout)

        self.images_list = QListWidget()
        self.images_list.setMaximumHeight(100)
        media_layout.addWidget(QLabel("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"))
        media_layout.addWidget(self.images_list)

        # –§–∞–π–ª—ã
        files_layout = QHBoxLayout()
        add_files_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        add_files_btn.clicked.connect(self.add_files)
        files_layout.addWidget(add_files_btn)

        clear_files_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_files_btn.clicked.connect(self.clear_files)
        files_layout.addWidget(clear_files_btn)

        media_layout.addLayout(files_layout)

        self.files_list = QListWidget()
        self.files_list.setMaximumHeight(100)
        media_layout.addWidget(QLabel("–§–∞–π–ª—ã:"))
        media_layout.addWidget(self.files_list)

        layout.addWidget(media_group)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_group = QGroupBox("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        additional_layout = QFormLayout(additional_group)

        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        self.location_edit = QLineEdit()
        self.location_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        additional_layout.addRow("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", self.location_edit)

        # Username –ø—Ä–æ–¥–∞–≤—Ü–∞
        self.seller_username_edit = QLineEdit()
        self.seller_username_edit.setPlaceholderText("@username –∏–ª–∏ username")
        additional_layout.addRow("Username –ø—Ä–æ–¥–∞–≤—Ü–∞:", self.seller_username_edit)

        layout.addWidget(additional_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ—Ç")
        save_btn.clicked.connect(self.save_lot)
        save_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #27ae60;
                color: white;
                padding: 10px;
                border-radius: 5px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """
        )
        btn_layout.addWidget(save_btn)

        save_draft_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")
        save_draft_btn.clicked.connect(self.save_draft)
        save_draft_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #f39c12;
                color: white;
                padding: 10px;
                border-radius: 5px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
        """
        )
        btn_layout.addWidget(save_draft_btn)

        back_btn = QPushButton("–ù–∞–∑–∞–¥")
        back_btn.clicked.connect(self.go_back)
        btn_layout.addWidget(back_btn)

        layout.addLayout(btn_layout)

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_group = QGroupBox("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_layout = QVBoxLayout(preview_group)

        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        self.preview_text.setMaximumHeight(150)
        preview_layout.addWidget(self.preview_text)

        layout.addWidget(preview_group)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        self.update_preview()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.title_edit.textChanged.connect(self.update_preview)
        self.description_edit.textChanged.connect(self.update_preview)
        self.starting_price_spin.valueChanged.connect(self.update_preview)

    def add_images(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.jpg *.jpeg *.png *.gif *.bmp)",
        )

        if files:
            for file_path in files:
                self.selected_images.append(file_path)
                item = QListWidgetItem(file_path.split("/")[-1])
                self.images_list.addItem(item)

    def clear_images(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.selected_images.clear()
        self.images_list.clear()

    def add_files(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã"""
        files, _ = QFileDialog.getOpenFileNames(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )

        if files:
            for file_path in files:
                self.selected_files.append(file_path)
                item = QListWidgetItem(file_path.split("/")[-1])
                self.files_list.addItem(item)

    def clear_files(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        self.selected_files.clear()
        self.files_list.clear()

    def update_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
        title = self.title_edit.text() or "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞"
        description = self.description_edit.toPlainText() or "–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞"
        price = self.starting_price_spin.value()
        doc_type = self.document_type_combo.currentText()

        preview_text = f"""
üè∑Ô∏è {title}

üìù {description}

üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {price:,} ‚ÇΩ
üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}
üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {self.start_date_edit.date().toString('dd.MM.yyyy')} –≤ {self.start_time_edit.time().toString('HH:mm')}
‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.duration_spin.value()} –¥–Ω–µ–π

üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(self.selected_images)}
üìé –§–∞–π–ª–æ–≤: {len(self.selected_files)}
        """

        self.preview_text.setText(preview_text.strip())

    def save_lot(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ—Ç"""
        if not self.validate_form():
            return

        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = self.main_window.get_current_user()
            if not current_user:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            user = db.query(User).filter(User.role == UserRole.MODERATOR).first()
            if not user:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            start_date = self.start_date_edit.date().toPyDate()
            start_time = self.start_time_edit.time().toPyTime()
            start_datetime = datetime.combine(start_date, start_time)

            # Make timezone-aware
            from datetime import timezone

            start_datetime = start_datetime.replace(tzinfo=timezone.utc)

            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_datetime = start_datetime + timedelta(days=self.duration_spin.value())

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type_map = {
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": DocumentType.STANDARD,
                "–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è": DocumentType.JEWELRY,
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏": DocumentType.HISTORICAL,
            }
            document_type = doc_type_map.get(
                self.document_type_combo.currentText(), DocumentType.STANDARD
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ—Ç
            lot = Lot(
                title=self.title_edit.text(),
                description=self.description_edit.toPlainText(),
                starting_price=self.starting_price_spin.value(),
                current_price=self.starting_price_spin.value(),
                seller_id=user.id,
                start_time=start_datetime,
                end_time=end_datetime,
                status=LotStatus.PENDING,  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                document_type=document_type,
                images=(
                    json.dumps(self.selected_images) if self.selected_images else None
                ),
                files=json.dumps(self.selected_files) if self.selected_files else None,
                location=self.location_edit.text() or None,
                seller_link=self._format_seller_link(self.seller_username_edit.text())
                or None,
                min_bid_increment=1.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏
            )

            db.add(lot)
            db.commit()

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–õ–æ—Ç '{lot.title}' —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {start_datetime.strftime('%d.%m.%Y –≤ %H:%M')}",
            )

            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.clear_form()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    def save_draft(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫"""
        if not self.title_edit.text():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
            return

        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = self.main_window.get_current_user()
            if not current_user:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            user = db.query(User).filter(User.role == UserRole.MODERATOR).first()
            if not user:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            lot = Lot(
                title=self.title_edit.text(),
                description=self.description_edit.toPlainText(),
                starting_price=self.starting_price_spin.value(),
                current_price=self.starting_price_spin.value(),
                seller_id=user.id,
                status=LotStatus.DRAFT,  # –ß–µ—Ä–Ω–æ–≤–∏–∫
                images=(
                    json.dumps(self.selected_images) if self.selected_images else None
                ),
                files=json.dumps(self.selected_files) if self.selected_files else None,
                location=self.location_edit.text() or None,
                seller_link=self._format_seller_link(self.seller_username_edit.text())
                or None,
                min_bid_increment=1.0,
            )

            db.add(lot)
            db.commit()

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–ß–µ—Ä–Ω–æ–≤–∏–∫ '{lot.title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.",
            )

            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.clear_form()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}"
            )
        finally:
            db.close()

    def validate_form(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã"""
        if not self.title_edit.text().strip():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
            return False

        if not self.description_edit.toPlainText().strip():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
            return False

        if self.starting_price_spin.value() <= 0:
            QMessageBox.warning(
                self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            )
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        start_date = self.start_date_edit.date().toPyDate()
        start_time = self.start_time_edit.time().toPyTime()
        start_datetime = datetime.combine(start_date, start_time)

        if start_datetime < datetime.now():
            QMessageBox.warning(
                self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º"
            )
            return False

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: –¥–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ –∏–ª–∏ https://t.me/<username>
        seller_username = (self.seller_username_edit.text() or "").strip()
        if seller_username:
            # –£–±–µ—Ä–µ–º –ø—Ä–æ–±–µ–ª—ã/—Å–ª—É–∂–µ–±–Ω—ã–µ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É
            import re

            cleaned = seller_username.lstrip("@ ")
            # username: –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á–µ—Ä–∫, 5-32 —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ Telegram)
            if not re.fullmatch(r"[A-Za-z0-9_]{5,32}", cleaned):
                QMessageBox.warning(
                    self,
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "Username –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–æ–≤: –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ",
                )
                return False
        return True

    def clear_form(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É"""
        self.title_edit.clear()
        self.description_edit.clear()
        self.starting_price_spin.setValue(1000)
        self.document_type_combo.setCurrentIndex(0)
        self.start_date_edit.setDate(datetime.now().date())
        self.start_time_edit.setTime(datetime.now().time())
        self.duration_spin.setValue(7)
        self.location_edit.clear()
        self.seller_username_edit.clear()
        self.clear_images()
        self.clear_files()
        self.update_preview()

    def _format_seller_link(self, username: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç username –≤ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        if not username:
            return None

        # –û—á–∏—â–∞–µ–º username –æ—Ç @ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_username = username.lstrip("@")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ –ø—É—Å—Ç–æ–π
        if not clean_username:
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/username
        return f"https://t.me/{clean_username}"

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏"""
        current_user = self.main_window.get_current_user()
        if current_user:
            if current_user["role"] == UserRole.MODERATOR:
                self.main_window.content_stack.setCurrentIndex(
                    1
                )  # –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            elif current_user["role"] == UserRole.SUPPORT:
                self.main_window.content_stack.setCurrentIndex(2)  # –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            elif current_user["role"] == UserRole.SUPER_ADMIN:
                self.main_window.content_stack.setCurrentIndex(
                    3
                )  # –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        else:
            self.main_window.content_stack.setCurrentIndex(0)  # –ü–∞–Ω–µ–ª—å –≤—Ö–æ–¥–∞
