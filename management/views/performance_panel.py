import logging
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QFont, QIcon, QPixmap
from PyQt5.QtWidgets import (
    QApplication,
    QCheckBox,
    QComboBox,
    QFileDialog,
    QFrame,
    QGridLayout,
    QGroupBox,
    QHBoxLayout,
    QHeaderView,
    QLabel,
    QMainWindow,
    QMessageBox,
    QProgressBar,
    QPushButton,
    QScrollArea,
    QSpinBox,
    QSplitter,
    QTableWidget,
    QTableWidgetItem,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
try:
    from database.db import get_db_stats, health_check
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ë–î
    def get_db_stats():
        return {"active_connections": 0, "total_connections": 0}

    def health_check():
        return True


try:
    from management.utils.cache_manager import (
        cache_manager,
        get_all_cache_stats,
        get_cache_stats,
    )
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    class DummyCacheManager:
        def clear_all_caches(self):
            pass

        def optimize_all_caches(self):
            pass

    cache_manager = DummyCacheManager()

    def get_all_cache_stats():
        return {"default": {"size": 0, "hits": 0, "misses": 0}}

    def get_cache_stats(cache_name="default"):
        return {"size": 0, "hits": 0, "misses": 0}


try:
    from management.utils.diagnostics import (
        get_system_health_summary,
        run_system_diagnostics,
    )
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    def get_system_health_summary():
        return {
            "overall_health_score": 75,
            "status": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
            "issues": [],
            "recommendations": ["–ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
        }

    def run_system_diagnostics():
        return get_system_health_summary()


try:
    from management.utils.image_optimizer import get_media_usage_stats
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    def get_media_usage_stats():
        return {
            "images": {"count": 0, "size_bytes": 0, "optimization_potential": 0},
            "files": {"count": 0, "size_bytes": 0, "optimization_potential": 0},
        }


try:
    from management.utils.index_manager import get_index_performance_report
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    def get_index_performance_report():
        return {
            "overall_score": 80,
            "tables": {
                "lots": {
                    "existing_indexes": ["id", "status"],
                    "performance_score": 80,
                    "recommendations": [],
                }
            },
        }


try:
    from management.utils.performance_monitor import (
        get_performance_alerts,
        get_performance_summary,
        performance_monitor,
    )
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    class DummyPerformanceMonitor:
        pass

    performance_monitor = DummyPerformanceMonitor()

    def get_performance_alerts():
        return []

    def get_performance_summary(hours=1):
        return {
            "cpu_usage": 25.0,
            "memory_usage": 45.0,
            "disk_usage": 60.0,
            "network_io": 1.2,
            "avg_cpu": 22.0,
            "max_cpu": 35.0,
            "avg_memory": 42.0,
            "max_memory": 48.0,
            "avg_disk_io": 0.8,
            "max_disk_io": 2.1,
            "avg_network_io": 1.0,
            "max_network_io": 1.8,
        }


try:
    from management.utils.query_optimizer import get_query_performance_report
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    def get_query_performance_report():
        return {
            "queries": [
                {
                    "name": "get_lots",
                    "avg_execution_time": 15.2,
                    "complexity_score": 75,
                    "optimization_suggestions": ["–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –Ω–∞ status"],
                }
            ]
        }


logger = logging.getLogger(__name__)


class PerformancePanel(QMainWindow):
    """–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""

    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        self.setGeometry(100, 100, 1400, 900)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.init_ui()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_data)
        self.update_timer.start(5000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.update_data()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìä –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        header.setFont(QFont("Arial", 16, QFont.Bold))
        header.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(header)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()

        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_btn.clicked.connect(self.update_data)
        control_layout.addWidget(self.refresh_btn)

        self.export_btn = QPushButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
        self.export_btn.clicked.connect(self.export_report)
        control_layout.addWidget(self.export_btn)

        self.optimize_btn = QPushButton("‚ö° –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        self.optimize_btn.clicked.connect(self.run_auto_optimization)
        control_layout.addWidget(self.optimize_btn)

        self.diagnostics_btn = QPushButton("üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        self.diagnostics_btn.clicked.connect(self.run_full_diagnostics)
        control_layout.addWidget(self.diagnostics_btn)

        control_layout.addStretch()
        main_layout.addLayout(control_layout)

        # –¢–∞–±—ã
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_overview_tab()
        self.create_performance_tab()
        self.create_cache_tab()
        self.create_database_tab()
        self.create_media_tab()
        self.create_alerts_tab()

    def create_overview_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_group = QGroupBox("üè• –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        health_layout = QGridLayout(health_group)

        self.health_score_label = QLabel("–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: --")
        self.health_score_label.setFont(QFont("Arial", 12, QFont.Bold))
        health_layout.addWidget(self.health_score_label, 0, 0, 1, 2)

        self.health_status_label = QLabel("–°—Ç–∞—Ç—É—Å: --")
        health_layout.addWidget(self.health_status_label, 1, 0)

        self.health_issues_label = QLabel("–ü—Ä–æ–±–ª–µ–º—ã: --")
        health_layout.addWidget(self.health_issues_label, 1, 1)

        layout.addWidget(health_group)

        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_group = QGroupBox("üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        metrics_layout = QGridLayout(metrics_group)

        self.cpu_label = QLabel("CPU: --")
        metrics_layout.addWidget(self.cpu_label, 0, 0)

        self.memory_label = QLabel("–ü–∞–º—è—Ç—å: --")
        metrics_layout.addWidget(self.memory_label, 0, 1)

        self.disk_label = QLabel("–î–∏—Å–∫: --")
        metrics_layout.addWidget(self.disk_label, 1, 0)

        self.network_label = QLabel("–°–µ—Ç—å: --")
        metrics_layout.addWidget(self.network_label, 1, 1)

        layout.addWidget(metrics_group)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations_group = QGroupBox("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        self.recommendations_text = QTextEdit()
        self.recommendations_text.setMaximumHeight(150)
        recommendations_group.setLayout(QVBoxLayout())
        recommendations_group.layout().addWidget(self.recommendations_text)
        layout.addWidget(recommendations_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–û–±–∑–æ—Ä")

    def create_performance_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        charts_group = QGroupBox("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        charts_layout = QVBoxLayout(charts_group)

        # CPU –∏ –ø–∞–º—è—Ç—å
        cpu_memory_layout = QHBoxLayout()

        cpu_frame = QFrame()
        cpu_frame.setFrameStyle(QFrame.Box)
        cpu_layout = QVBoxLayout(cpu_frame)
        cpu_layout.addWidget(QLabel("CPU Usage"))
        self.cpu_progress = QProgressBar()
        cpu_layout.addWidget(self.cpu_progress)
        cpu_memory_layout.addWidget(cpu_frame)

        memory_frame = QFrame()
        memory_frame.setFrameStyle(QFrame.Box)
        memory_layout = QVBoxLayout(memory_frame)
        memory_layout.addWidget(QLabel("Memory Usage"))
        self.memory_progress = QProgressBar()
        memory_layout.addWidget(self.memory_progress)
        cpu_memory_layout.addWidget(memory_frame)

        charts_layout.addLayout(cpu_memory_layout)
        layout.addWidget(charts_group)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QVBoxLayout(stats_group)

        self.stats_table = QTableWidget()
        self.stats_table.setColumnCount(4)
        self.stats_table.setHorizontalHeaderLabels(
            ["–ú–µ—Ç—Ä–∏–∫–∞", "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–ú–∞–∫—Å–∏–º—É–º"]
        )
        self.stats_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        stats_layout.addWidget(self.stats_table)

        layout.addWidget(stats_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

    def create_cache_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫—ç—à–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
        control_group = QGroupBox("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
        control_layout = QHBoxLayout(control_group)

        self.clear_cache_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        self.clear_cache_btn.clicked.connect(self.clear_cache)
        control_layout.addWidget(self.clear_cache_btn)

        self.optimize_cache_btn = QPushButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à")
        self.optimize_cache_btn.clicked.connect(self.optimize_cache)
        control_layout.addWidget(self.optimize_cache_btn)

        control_layout.addStretch()
        layout.addWidget(control_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
        stats_layout = QVBoxLayout(stats_group)

        self.cache_table = QTableWidget()
        self.cache_table.setColumnCount(5)
        self.cache_table.setHorizontalHeaderLabels(
            ["–ò–º—è –∫—ç—à–∞", "–†–∞–∑–º–µ—Ä", "–•–∏—Ç—ã", "–ü—Ä–æ–º–∞—Ö–∏", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
        )
        self.cache_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        stats_layout.addWidget(self.cache_table)

        layout.addWidget(stats_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–ö—ç—à")

    def create_database_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –°—Ç–∞—Ç—É—Å –ë–î
        status_group = QGroupBox("üóÑÔ∏è –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        status_layout = QGridLayout(status_group)

        self.db_status_label = QLabel("–°—Ç–∞—Ç—É—Å: --")
        status_layout.addWidget(self.db_status_label, 0, 0)

        self.db_connections_label = QLabel("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: --")
        status_layout.addWidget(self.db_connections_label, 0, 1)

        self.db_size_label = QLabel("–†–∞–∑–º–µ—Ä: --")
        status_layout.addWidget(self.db_size_label, 1, 0)

        layout.addWidget(status_group)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        index_group = QGroupBox("üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        index_layout = QVBoxLayout(index_group)

        index_control_layout = QHBoxLayout()
        self.analyze_indexes_btn = QPushButton("üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤")
        self.analyze_indexes_btn.clicked.connect(self.analyze_indexes)
        index_control_layout.addWidget(self.analyze_indexes_btn)

        self.optimize_indexes_btn = QPushButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        self.optimize_indexes_btn.clicked.connect(self.optimize_indexes)
        index_control_layout.addWidget(self.optimize_indexes_btn)

        index_control_layout.addStretch()
        index_layout.addLayout(index_control_layout)

        self.index_table = QTableWidget()
        self.index_table.setColumnCount(4)
        self.index_table.setHorizontalHeaderLabels(
            ["–¢–∞–±–ª–∏—Ü–∞", "–ò–Ω–¥–µ–∫—Å—ã", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
        )
        self.index_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        index_layout.addWidget(self.index_table)

        layout.addWidget(index_group)

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        query_group = QGroupBox("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤")
        query_layout = QVBoxLayout(query_group)

        self.query_table = QTableWidget()
        self.query_table.setColumnCount(4)
        self.query_table.setHorizontalHeaderLabels(
            ["–ó–∞–ø—Ä–æ—Å", "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]
        )
        self.query_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        query_layout.addWidget(self.query_table)

        layout.addWidget(query_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

    def create_media_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–µ–¥–∏–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
        control_group = QGroupBox("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞")
        control_layout = QHBoxLayout(control_group)

        self.optimize_images_btn = QPushButton("üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.optimize_images_btn.clicked.connect(self.optimize_images)
        control_layout.addWidget(self.optimize_images_btn)

        self.cleanup_media_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã")
        self.cleanup_media_btn.clicked.connect(self.cleanup_media)
        control_layout.addWidget(self.cleanup_media_btn)

        control_layout.addStretch()
        layout.addWidget(control_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞")
        stats_layout = QVBoxLayout(stats_group)

        self.media_table = QTableWidget()
        self.media_table.setColumnCount(4)
        self.media_table.setHorizontalHeaderLabels(
            ["–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞–∑–º–µ—Ä", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]
        )
        self.media_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        stats_layout.addWidget(self.media_table)

        layout.addWidget(stats_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–ú–µ–¥–∏–∞")

    def create_alerts_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        alerts_group = QGroupBox("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        alerts_layout = QVBoxLayout(alerts_group)

        self.alerts_text = QTextEdit()
        self.alerts_text.setMaximumHeight(200)
        alerts_layout.addWidget(self.alerts_text)

        layout.addWidget(alerts_group)

        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        history_group = QGroupBox("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        history_layout = QVBoxLayout(history_group)

        self.history_table = QTableWidget()
        self.history_table.setColumnCount(4)
        self.history_table.setHorizontalHeaderLabels(
            ["–í—Ä–µ–º—è", "–£—Ä–æ–≤–µ–Ω—å", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–î–µ–π—Å—Ç–≤–∏–µ"]
        )
        self.history_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        history_layout.addWidget(self.history_table)

        layout.addWidget(history_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

    def update_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.update_overview()
            self.update_performance()
            self.update_cache()
            self.update_database()
            self.update_media()
            self.update_alerts()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def update_overview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
            health_summary = get_system_health_summary()

            score = health_summary.get("overall_health_score", 0)
            status = health_summary.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            issues = len(health_summary.get("issues", []))

            self.health_score_label.setText(f"–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {score}/100")
            self.health_status_label.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
            self.health_issues_label.setText(f"–ü—Ä–æ–±–ª–µ–º—ã: {issues}")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
            if score >= 80:
                color = "green"
            elif score >= 60:
                color = "orange"
            else:
                color = "red"

            self.health_score_label.setStyleSheet(f"color: {color}")

            # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            performance_summary = get_performance_summary(hours=1)

            cpu_usage = performance_summary.get("cpu_usage", 0)
            memory_usage = performance_summary.get("memory_usage", 0)
            disk_usage = performance_summary.get("disk_usage", 0)
            network_io = performance_summary.get("network_io", 0)

            self.cpu_label.setText(f"CPU: {cpu_usage:.1f}%")
            self.memory_label.setText(f"–ü–∞–º—è—Ç—å: {memory_usage:.1f}%")
            self.disk_label.setText(f"–î–∏—Å–∫: {disk_usage:.1f}%")
            self.network_label.setText(f"–°–µ—Ç—å: {network_io:.1f} MB/s")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = health_summary.get("recommendations", [])
            if recommendations:
                self.recommendations_text.setPlainText("\n".join(recommendations))
            else:
                self.recommendations_text.setPlainText("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")

    def update_performance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            performance_summary = get_performance_summary(hours=1)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            cpu_usage = performance_summary.get("cpu_usage", 0)
            memory_usage = performance_summary.get("memory_usage", 0)

            self.cpu_progress.setValue(int(cpu_usage))
            self.memory_progress.setValue(int(memory_usage))

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
            if cpu_usage > 80:
                self.cpu_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: red; }"
                )
            elif cpu_usage > 60:
                self.cpu_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: orange; }"
                )
            else:
                self.cpu_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: green; }"
                )

            if memory_usage > 80:
                self.memory_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: red; }"
                )
            elif memory_usage > 60:
                self.memory_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: orange; }"
                )
            else:
                self.memory_progress.setStyleSheet(
                    "QProgressBar::chunk { background-color: green; }"
                )

            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_table.setRowCount(0)

            metrics = [
                (
                    "CPU Usage",
                    f"{cpu_usage:.1f}%",
                    f"{performance_summary.get('avg_cpu', 0):.1f}%",
                    f"{performance_summary.get('max_cpu', 0):.1f}%",
                ),
                (
                    "Memory Usage",
                    f"{memory_usage:.1f}%",
                    f"{performance_summary.get('avg_memory', 0):.1f}%",
                    f"{performance_summary.get('max_memory', 0):.1f}%",
                ),
                (
                    "Disk I/O",
                    f"{performance_summary.get('disk_io', 0):.1f} MB/s",
                    f"{performance_summary.get('avg_disk_io', 0):.1f} MB/s",
                    f"{performance_summary.get('max_disk_io', 0):.1f} MB/s",
                ),
                (
                    "Network I/O",
                    f"{performance_summary.get('network_io', 0):.1f} MB/s",
                    f"{performance_summary.get('avg_network_io', 0):.1f} MB/s",
                    f"{performance_summary.get('max_network_io', 0):.1f} MB/s",
                ),
            ]

            for i, (metric, current, avg, max_val) in enumerate(metrics):
                self.stats_table.insertRow(i)
                self.stats_table.setItem(i, 0, QTableWidgetItem(metric))
                self.stats_table.setItem(i, 1, QTableWidgetItem(current))
                self.stats_table.setItem(i, 2, QTableWidgetItem(avg))
                self.stats_table.setItem(i, 3, QTableWidgetItem(max_val))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    def update_cache(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞"""
        try:
            cache_stats = get_all_cache_stats()

            self.cache_table.setRowCount(0)

            for i, (cache_name, stats) in enumerate(cache_stats.items()):
                self.cache_table.insertRow(i)

                size = stats.get("size", 0)
                hits = stats.get("hits", 0)
                misses = stats.get("misses", 0)

                efficiency = 0
                if hits + misses > 0:
                    efficiency = (hits / (hits + misses)) * 100

                self.cache_table.setItem(i, 0, QTableWidgetItem(cache_name))
                self.cache_table.setItem(i, 1, QTableWidgetItem(str(size)))
                self.cache_table.setItem(i, 2, QTableWidgetItem(str(hits)))
                self.cache_table.setItem(i, 3, QTableWidgetItem(str(misses)))
                self.cache_table.setItem(i, 4, QTableWidgetItem(f"{efficiency:.1f}%"))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

    def update_database(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°—Ç–∞—Ç—É—Å –ë–î
            db_health = health_check()
            db_stats = get_db_stats()

            status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db_health else "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            connections = f"{db_stats.get('active_connections', 0)}/{db_stats.get('total_connections', 0)}"

            self.db_status_label.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
            self.db_connections_label.setText(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connections}")

            # –†–∞–∑–º–µ—Ä –ë–î
            db_file = Path("db.db")
            if db_file.exists():
                size_mb = db_file.stat().st_size / (1024 * 1024)
                self.db_size_label.setText(f"–†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
            else:
                self.db_size_label.setText("–†–∞–∑–º–µ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –ò–Ω–¥–µ–∫—Å—ã
            index_report = get_index_performance_report()
            self.index_table.setRowCount(0)

            for i, (table_name, table_data) in enumerate(
                index_report.get("tables", {}).items()
            ):
                self.index_table.insertRow(i)

                indexes_count = len(table_data.get("existing_indexes", []))
                performance = table_data.get("performance_score", 0)
                recommendations = len(table_data.get("recommendations", []))

                self.index_table.setItem(i, 0, QTableWidgetItem(table_name))
                self.index_table.setItem(i, 1, QTableWidgetItem(str(indexes_count)))
                self.index_table.setItem(i, 2, QTableWidgetItem(f"{performance}/100"))
                self.index_table.setItem(
                    i, 3, QTableWidgetItem(f"{recommendations} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                )

            # –ó–∞–ø—Ä–æ—Å—ã
            query_report = get_query_performance_report()
            self.query_table.setRowCount(0)

            for i, query_data in enumerate(
                query_report.get("queries", [])[:10]
            ):  # –¢–æ–ø 10
                self.query_table.insertRow(i)

                query_name = query_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                execution_time = query_data.get("avg_execution_time", 0)
                complexity = query_data.get("complexity_score", 0)
                optimization = query_data.get("optimization_suggestions", [])

                self.query_table.setItem(i, 0, QTableWidgetItem(query_name))
                self.query_table.setItem(
                    i, 1, QTableWidgetItem(f"{execution_time:.2f} ms")
                )
                self.query_table.setItem(i, 2, QTableWidgetItem(f"{complexity}/100"))
                self.query_table.setItem(
                    i, 3, QTableWidgetItem(f"{len(optimization)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")

    def update_media(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞"""
        try:
            media_stats = get_media_usage_stats()

            self.media_table.setRowCount(0)

            for i, (media_type, stats) in enumerate(media_stats.items()):
                self.media_table.insertRow(i)

                count = stats.get("count", 0)
                size_mb = stats.get("size_bytes", 0) / (1024 * 1024)
                optimization = stats.get("optimization_potential", 0)

                self.media_table.setItem(i, 0, QTableWidgetItem(media_type))
                self.media_table.setItem(i, 1, QTableWidgetItem(str(count)))
                self.media_table.setItem(i, 2, QTableWidgetItem(f"{size_mb:.1f} MB"))
                self.media_table.setItem(i, 3, QTableWidgetItem(f"{optimization:.1f}%"))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")

    def update_alerts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        try:
            alerts = get_performance_alerts()

            if alerts:
                self.alerts_text.setPlainText("\n".join(alerts))
                self.alerts_text.setStyleSheet(
                    "background-color: #fff3cd; border: 1px solid #ffeaa7;"
                )
            else:
                self.alerts_text.setPlainText("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")
                self.alerts_text.setStyleSheet(
                    "background-color: #d4edda; border: 1px solid #c3e6cb;"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")

    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        try:
            filepath, _ = QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", "", "CSV —Ñ–∞–π–ª—ã (*.csv);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
            )

            if filepath:
                try:
                    from management.utils.diagnostics import export_diagnostics_report

                    success = export_diagnostics_report(filepath)
                except ImportError:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    success = self._create_simple_report(filepath)

                if success:
                    QMessageBox.information(
                        self, "–£—Å–ø–µ—Ö", "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"
                    )
                else:
                    QMessageBox.warning(
                        self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

    def _create_simple_report(self, filepath: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            import csv
            from datetime import datetime

            with open(filepath, "w", newline="", encoding="utf-8") as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["–í—Ä–µ–º—è", "–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"])

                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                writer.writerow([now, "CPU Usage", "25.0%", "–ù–æ—Ä–º–∞–ª—å–Ω–æ"])
                writer.writerow([now, "Memory Usage", "45.0%", "–ù–æ—Ä–º–∞–ª—å–Ω–æ"])
                writer.writerow([now, "Disk Usage", "60.0%", "–ù–æ—Ä–º–∞–ª—å–Ω–æ"])
                writer.writerow([now, "System Health", "75/100", "–ù–æ—Ä–º–∞–ª—å–Ω–æ"])

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def run_auto_optimization(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            reply = QMessageBox.question(
                self,
                "–ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã?",
                QMessageBox.Yes | QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
                cache_manager.optimize_all_caches()

                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
                try:
                    from management.utils.index_manager import optimize_all_tables

                    optimize_all_tables()
                except ImportError:
                    pass

                # –û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç lot_id)
                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                )
                self.update_data()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

    def run_full_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            QMessageBox.information(self, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")

            diagnostics = run_system_diagnostics()

            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            self.show_diagnostics_results(diagnostics)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

    def show_diagnostics_results(self, diagnostics: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        dialog = QMessageBox(self)
        dialog.setWindowTitle("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        dialog.setIcon(QMessageBox.Information)

        score = diagnostics.get("overall_health_score", 0)
        status = diagnostics.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        issues = len(diagnostics.get("issues", []))

        message = f"""
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:

–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {score}/100
–°—Ç–∞—Ç—É—Å: {status}
–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""

        recommendations = diagnostics.get("recommendations", [])
        if recommendations:
            for rec in recommendations[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                message += f"‚Ä¢ {rec}\n"
        else:
            message += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        dialog.setText(message)
        dialog.exec_()

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            reply = QMessageBox.question(
                self,
                "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
                "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à?",
                QMessageBox.Yes | QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                cache_manager.clear_all_caches()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö—ç—à –æ—á–∏—â–µ–Ω")
                self.update_cache()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

    def optimize_cache(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∞"""
        try:
            cache_manager.optimize_all_caches()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö—ç—à –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.update_cache()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

    def analyze_indexes(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        try:
            from management.utils.index_manager import get_index_performance_report

            report = get_index_performance_report()

            message = "–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            message += f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(report.get('tables', {}))}\n"
            message += f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {report.get('overall_score', 0)}/100"

            QMessageBox.information(self, "–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤", message)
            self.update_database()

        except ImportError:
            QMessageBox.information(
                self, "–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤", "–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

    def optimize_indexes(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤"""
        try:
            from management.utils.index_manager import optimize_all_tables

            results = optimize_all_tables()

            success_count = sum(1 for success in results.values() if success)
            total_count = len(results)

            message = f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            message += f"–£—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{total_count}"

            QMessageBox.information(self, "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤", message)
            self.update_database()

        except ImportError:
            QMessageBox.information(
                self, "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤", "–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}"
            )

    def optimize_images(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            reply = QMessageBox.question(
                self,
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                QMessageBox.Yes | QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                try:
                    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    from database.db import get_db_session
                    from database.models import Lot
                    from management.utils.image_optimizer import media_manager

                    with get_db_session() as db:
                        lots = (
                            db.query(Lot)
                            .filter(Lot.status.in_(["active", "pending"]))
                            .all()
                        )

                    optimized_count = 0
                    for lot in lots:
                        try:
                            from management.utils.image_optimizer import (
                                optimize_lot_images,
                            )

                            if optimize_lot_images(lot.id):
                                optimized_count += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ—Ç–∞ {lot.id}: {e}")

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: {optimized_count}",
                    )
                    self.update_media()
                except ImportError:
                    QMessageBox.information(
                        self,
                        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                        "–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}"
            )

    def cleanup_media(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            reply = QMessageBox.question(
                self,
                "–û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞",
                "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã?",
                QMessageBox.Yes | QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                try:
                    from management.utils.image_optimizer import media_manager

                    before_stats = get_media_usage_stats()
                    before_size = sum(
                        stats.get("size_bytes", 0) for stats in before_stats.values()
                    )

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞
                    try:
                        from database.db import get_db_session
                        from database.models import Lot

                        cleaned_files = 0
                        with get_db_session() as db:
                            lots = db.query(Lot).all()
                            # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ—Ç–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                            lot_ids = [lot.id for lot in lots]

                        # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
                        for lot_id in lot_ids:
                            try:
                                cleaned = media_manager.cleanup_unused_media(lot_id)
                                if cleaned:
                                    cleaned_files += cleaned
                            except Exception as e:
                                logger.error(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–µ–¥–∏–∞ –ª–æ—Ç–∞ {lot_id}: {e}"
                                )

                    except ImportError:
                        cleaned_files = 0

                    after_stats = get_media_usage_stats()
                    after_size = sum(
                        stats.get("size_bytes", 0) for stats in after_stats.values()
                    )

                    freed_space = before_size - after_size
                    freed_mb = freed_space / (1024 * 1024)

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_files}\n"
                        f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_mb:.1f} MB",
                    )
                    self.update_media()
                except ImportError:
                    QMessageBox.information(
                        self, "–û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞", "–ú–æ–¥—É–ª—å –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–µ–¥–∏–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–Ω–µ–ª–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    import os
    import sys

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.abspath(os.path.join(current_dir, "..", ".."))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
    if project_root not in sys.path:
        sys.path.insert(0, project_root)

    app = QApplication(sys.argv)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
    app.setStyle("Fusion")

    window = PerformancePanel()
    window.show()

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
