import json
import logging
from datetime import datetime, timedelta
from functools import partial

from PyQt5.QtCore import QDateTime, Qt, QTimer
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtWidgets import (
    QComboBox,
    QDateTimeEdit,
    QDialog,
    QDialogButtonBox,
    QDoubleSpinBox,
    QFileDialog,
    QFormLayout,
    QFrame,
    QGroupBox,
    QHBoxLayout,
    QInputDialog,
    QLabel,
    QLineEdit,
    QMenu,
    QMessageBox,
    QPushButton,
    QRadioButton,
    QScrollArea,
    QTableWidget,
    QTableWidgetItem,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)
from sqlalchemy.orm import joinedload

from bot.utils.finance_manager import finance_manager
from database.db import SessionLocal
from database.models import AutoBid, Bid, DocumentType, Lot, LotStatus, User
from management.utils.document_utils import (
    DocumentGenerator,
    ImageManager,
    LotValidator,
    format_local_time,
)

logger = logging.getLogger(__name__)


class LotDetailDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞"""

    def __init__(self, lot: Lot, parent=None):
        super().__init__(parent)
        self.lot = lot
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle(f"üì¶ –î–µ—Ç–∞–ª–∏ –ª–æ—Ç–∞: {self.lot.title}")
        self.setMinimumSize(700, 600)

        layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ
        info_group = QGroupBox("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ")
        info_layout = QFormLayout()

        info_layout.addRow("ID:", QLabel(str(self.lot.id)))
        info_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", QLabel(self.lot.title))

        # –û–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –≤–∏–¥–∂–µ—Ç–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        description_label = QLabel(self.lot.description)
        description_label.setWordWrap(True)
        description_label.setStyleSheet(
            "QLabel { padding: 10px; background-color: #f8f9fa; border-radius: 5px; }"
        )
        info_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_label)

        info_layout.addRow(
            "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:", QLabel(f"{self.lot.starting_price:,.2f} ‚ÇΩ")
        )
        info_layout.addRow("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:", QLabel(f"{self.lot.current_price:,.2f} ‚ÇΩ"))

        status_text = {
            LotStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            LotStatus.PENDING: "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            LotStatus.ACTIVE: "–ê–∫—Ç–∏–≤–µ–Ω",
            LotStatus.SOLD: "–ü—Ä–æ–¥–∞–Ω",
            LotStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω",
            LotStatus.EXPIRED: "–ò—Å—Ç–µ–∫",
        }.get(self.lot.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        status_label = QLabel(status_text)
        if self.lot.status == LotStatus.PENDING:
            status_label.setStyleSheet(
                "QLabel { color: #856404; background-color: #fff3cd; padding: 5px; border-radius: 3px; }"
            )
        elif self.lot.status == LotStatus.ACTIVE:
            status_label.setStyleSheet(
                "QLabel { color: #155724; background-color: #d4edda; padding: 5px; border-radius: 3px; }"
            )
        elif self.lot.status == LotStatus.SOLD:
            status_label.setStyleSheet(
                "QLabel { color: #721c24; background-color: #f8d7da; padding: 5px; border-radius: 3px; }"
            )

        info_layout.addRow("–°—Ç–∞—Ç—É—Å:", status_label)
        info_layout.addRow(
            "–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:", QLabel(format_local_time(self.lot.start_time))
        )
        info_layout.addRow(
            "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", QLabel(format_local_time(self.lot.end_time))
        )
        info_layout.addRow("–°–æ–∑–¥–∞–Ω:", QLabel(format_local_time(self.lot.created_at)))

        if self.lot.location:
            info_layout.addRow("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", QLabel(self.lot.location))
        if self.lot.seller_link:
            info_layout.addRow("–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:", QLabel(self.lot.seller_link))

        info_group.setLayout(info_layout)
        scroll_layout.addWidget(info_group)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞
        images_data = ImageManager.get_lot_images(self.lot)
        if images_data:
            images_group = QGroupBox("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞")
            images_layout = QVBoxLayout()

            for i, image_path in enumerate(images_data):
                try:
                    from pathlib import Path

                    if Path(image_path).exists():
                        image_label = QLabel()
                        pixmap = QPixmap(image_path)
                        if not pixmap.isNull():
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            scaled_pixmap = pixmap.scaled(
                                400, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation
                            )
                            image_label.setPixmap(scaled_pixmap)
                            image_label.setAlignment(Qt.AlignCenter)
                            image_label.setStyleSheet(
                                "QLabel { border: 1px solid #ddd; border-radius: 5px; padding: 5px; }"
                            )
                            images_layout.addWidget(image_label)
                        else:
                            images_layout.addWidget(
                                QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}")
                            )
                    else:
                        images_layout.addWidget(QLabel(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"))
                except Exception as e:
                    images_layout.addWidget(
                        QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
                    )

            images_group.setLayout(images_layout)
            scroll_layout.addWidget(images_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫
        if self.lot.bids:
            bids_group = QGroupBox("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫")
            bids_layout = QFormLayout()

            total_bids = len(self.lot.bids)
            max_bid = max([bid.amount for bid in self.lot.bids]) if self.lot.bids else 0
            unique_bidders = len(set([bid.bidder_id for bid in self.lot.bids]))

            bids_layout.addRow("–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:", QLabel(str(total_bids)))
            bids_layout.addRow("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:", QLabel(f"{max_bid:,.2f} ‚ÇΩ"))
            bids_layout.addRow("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", QLabel(str(unique_bidders)))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            recent_bids = sorted(
                self.lot.bids, key=lambda x: x.created_at, reverse=True
            )[:5]
            if recent_bids:
                bids_layout.addRow("", QLabel(""))  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                bids_layout.addRow("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:", QLabel(""))
                for i, bid in enumerate(recent_bids):
                    bid_text = f"{i+1}. {bid.amount:,.2f} ‚ÇΩ ({format_local_time(bid.created_at)})"
                    bids_layout.addRow("", QLabel(bid_text))

            bids_group.setLayout(bids_layout)
            scroll_layout.addWidget(bids_group)

        scroll_widget.setLayout(scroll_layout)
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self.export_lot)
        buttons_layout.addWidget(export_btn)

        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(close_btn)

        layout.addLayout(buttons_layout)

        self.setLayout(layout)

    def export_lot(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        try:
            pass

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
            file_dialog = QFileDialog()
            file_dialog.setNameFilter("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (*.txt);;HTML —Ñ–∞–π–ª (*.html)")
            file_dialog.setDefaultSuffix("txt")
            file_dialog.setAcceptMode(QFileDialog.AcceptSave)

            if file_dialog.exec_():
                file_path = file_dialog.selectedFiles()[0]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                format_type = "html" if file_path.endswith(".html") else "txt"
                content = DocumentGenerator.generate_lot_report(self.lot, format_type)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)

                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", f"–õ–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª:\n{file_path}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


class EditLotDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞"""

    def __init__(self, lot: Lot, parent=None):
        super().__init__(parent)
        self.lot = lot
        self.new_images = []  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.new_files = []  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.init_ui()
        self.load_lot_data()

    def init_ui(self):
        self.setWindowTitle(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {self.lot.title}")
        self.setMinimumSize(600, 500)

        layout = QVBoxLayout()

        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        form_layout = QFormLayout()

        self.title_input = QLineEdit()
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", self.title_input)

        self.description_input = QTextEdit()
        self.description_input.setMaximumHeight(100)
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", self.description_input)

        self.starting_price_input = QDoubleSpinBox()
        self.starting_price_input.setRange(1, 1000000)
        self.starting_price_input.setSuffix(" ‚ÇΩ")
        form_layout.addRow("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:", self.starting_price_input)

        self.document_type_combo = QComboBox()
        self.document_type_combo.addItems(
            ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç", "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"]
        )
        form_layout.addRow("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", self.document_type_combo)

        # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        start_time_group = QGroupBox("‚è∞ –¢–∏–ø –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞")
        start_time_layout = QVBoxLayout()

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞
        self.immediate_start_radio = QRadioButton(
            "üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)"
        )
        self.immediate_start_radio.setChecked(True)
        self.scheduled_start_radio = QRadioButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫")

        start_time_layout.addWidget(self.immediate_start_radio)
        start_time_layout.addWidget(self.scheduled_start_radio)

        # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–≤–∏–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        self.start_time_input = QDateTimeEdit()
        self.start_time_input.setDateTime(
            QDateTime.currentDateTime().addSecs(3600)
        )  # +1 —á–∞—Å
        self.start_time_input.setCalendarPopup(True)
        self.start_time_input.setEnabled(False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é
        self.immediate_start_radio.toggled.connect(self.on_start_type_changed)
        self.scheduled_start_radio.toggled.connect(self.on_start_type_changed)

        start_time_layout.addWidget(QLabel("–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:"))
        start_time_layout.addWidget(self.start_time_input)

        start_time_group.setLayout(start_time_layout)
        form_layout.addRow("", start_time_group)

        self.location_input = QLineEdit()
        form_layout.addRow("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", self.location_input)

        self.seller_link_input = QLineEdit()
        form_layout.addRow("–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:", self.seller_link_input)

        layout.addLayout(form_layout)

        # –°–µ–∫—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_group = QGroupBox("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        images_layout = QVBoxLayout()

        # –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.current_images_label = QLabel("–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        images_layout.addWidget(self.current_images_label)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_buttons_layout = QHBoxLayout()
        add_image_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        add_image_btn.clicked.connect(self.add_images)
        images_buttons_layout.addWidget(add_image_btn)

        clear_images_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ")
        clear_images_btn.clicked.connect(self.clear_new_images)
        images_buttons_layout.addWidget(clear_images_btn)

        images_layout.addLayout(images_buttons_layout)

        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.new_images_label = QLabel("–ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ—Ç")
        images_layout.addWidget(self.new_images_label)

        images_group.setLayout(images_layout)
        layout.addWidget(images_group)

        # –°–µ–∫—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        files_group = QGroupBox("üìÑ –§–∞–π–ª—ã")
        files_layout = QVBoxLayout()

        # –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã
        self.current_files_label = QLabel("–¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã:")
        files_layout.addWidget(self.current_files_label)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        files_buttons_layout = QHBoxLayout()
        add_file_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        add_file_btn.clicked.connect(self.add_files)
        files_buttons_layout.addWidget(add_file_btn)

        clear_files_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ")
        clear_files_btn.clicked.connect(self.clear_new_files)
        files_buttons_layout.addWidget(clear_files_btn)

        files_layout.addLayout(files_buttons_layout)

        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.new_files_label = QLabel("–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã: –Ω–µ—Ç")
        files_layout.addWidget(self.new_files_label)

        files_group.setLayout(files_layout)
        layout.addWidget(files_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

        self.setLayout(layout)

    def load_lot_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º—É"""
        self.title_input.setText(self.lot.title)
        self.description_input.setPlainText(self.lot.description)
        self.starting_price_input.setValue(self.lot.starting_price)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_map = {
            DocumentType.STANDARD: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç",
            DocumentType.JEWELRY: "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            DocumentType.HISTORICAL: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
        }
        index = self.document_type_combo.findText(
            doc_type_map.get(self.lot.document_type, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç")
        )
        if index >= 0:
            self.document_type_combo.setCurrentIndex(index)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        if self.lot.start_time is None:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
            self.immediate_start_radio.setChecked(True)
            self.scheduled_start_radio.setChecked(False)
            self.start_time_input.setEnabled(False)
            self.start_time_input.setDateTime(QDateTime.currentDateTime().addSecs(3600))
        else:
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
            self.immediate_start_radio.setChecked(False)
            self.scheduled_start_radio.setChecked(True)
            self.start_time_input.setEnabled(True)
            self.start_time_input.setDateTime(
                QDateTime.fromString(
                    format_local_time(self.lot.start_time), "dd.MM.yyyy HH:mm"
                )
            )

        if self.lot.location:
            self.location_input.setText(self.lot.location)
        if self.lot.seller_link:
            self.seller_link_input.setText(self.lot.seller_link)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        current_images = ImageManager.get_lot_images(self.lot)
        if current_images:
            self.current_images_label.setText(
                f"–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(current_images)} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            self.current_images_label.setText("–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ—Ç")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã
        current_files = ImageManager.get_lot_files(self.lot)
        if current_files:
            self.current_files_label.setText(
                f"–¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã: {len(current_files)} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            self.current_files_label.setText("–¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã: –Ω–µ—Ç")

    def add_images(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        from PyQt5.QtWidgets import QFileDialog

        file_paths, _ = QFileDialog.getOpenFileNames(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.gif *.bmp)",
        )

        if file_paths:
            self.new_images.extend(file_paths)
            self.update_new_images_label()

    def clear_new_images(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.new_images.clear()
        self.update_new_images_label()

    def update_new_images_label(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if self.new_images:
            self.new_images_label.setText(
                f"–ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(self.new_images)} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            self.new_images_label.setText("–ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ—Ç")

    def add_files(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        from PyQt5.QtWidgets import QFileDialog

        file_paths, _ = QFileDialog.getOpenFileNames(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )

        if file_paths:
            self.new_files.extend(file_paths)
            self.update_new_files_label()

    def clear_new_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.new_files.clear()
        self.update_new_files_label()

    def update_new_files_label(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.new_files:
            self.new_files_label.setText(f"–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {len(self.new_files)} —Ñ–∞–π–ª–æ–≤")
        else:
            self.new_files_label.setText("–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã: –Ω–µ—Ç")

    def on_start_type_changed(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        if self.scheduled_start_radio.isChecked():
            self.start_time_input.setEnabled(True)
        else:
            self.start_time_input.setEnabled(False)

    def get_updated_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞"""
        doc_type_map = {
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç": DocumentType.STANDARD,
            "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ": DocumentType.JEWELRY,
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å": DocumentType.HISTORICAL,
        }

        start_time = (
            None
            if self.immediate_start_radio.isChecked()
            else self.start_time_input.dateTime().toPyDateTime()
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ (–ú–°–ö) –≤—Ä–µ–º—è –≤ UTC –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if start_time is not None:
            try:
                from bot.utils.time_utils import moscow_to_utc

                if start_time.tzinfo is None:
                    start_time = moscow_to_utc(start_time)
            except Exception:
                if start_time.tzinfo is None:
                    from datetime import timezone

                    start_time = start_time.replace(tzinfo=timezone.utc)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        start_time_errors = LotValidator.validate_start_time(start_time)
        if start_time_errors:
            error_message = "\n".join(start_time_errors)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_message)
            return None

        return {
            "title": self.title_input.text().strip(),
            "description": self.description_input.toPlainText().strip(),
            "starting_price": self.starting_price_input.value(),
            "document_type": doc_type_map.get(
                self.document_type_combo.currentText(), DocumentType.STANDARD
            ),
            "start_time": start_time,
            "location": self.location_input.text().strip(),
            "seller_link": self.seller_link_input.text().strip(),
            "new_images": self.new_images,
            "new_files": self.new_files,
        }


class SellerPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ª–æ—Ç—ã"""

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.current_user = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None
        # –ë—É—Ñ–µ—Ä—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞
        self.selected_images = []
        self.selected_files = []
        self.init_ui()
        self.setup_timer()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üë§ –ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ - –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        self.setMinimumSize(1200, 800)

        # –ì–ª–∞–≤–Ω—ã–π layout
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        header = self.create_header()
        layout.addWidget(header)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.addTab(self.create_lot_creation_tab(), "üìù –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç")
        self.tabs.addTab(self.create_my_lots_tab(), "üì¶ –ú–æ–∏ –ª–æ—Ç—ã")
        self.tabs.addTab(self.create_profile_tab(), "üë§ –ü—Ä–æ—Ñ–∏–ª—å")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        self.tabs.currentChanged.connect(self.on_tab_changed)

        layout.addWidget(self.tabs)
        self.setLayout(layout)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.setup_timer()

    def create_header(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.StyledPanel)
        header_frame.setStyleSheet(
            "QFrame { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; }"
        )

        layout = QHBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if self.current_user:
            user_name = self.current_user["name"]
        else:
            user_name = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"

        user_info = QLabel(f"üë§ {user_name}")
        user_info.setFont(QFont("Segoe UI", 16, QFont.Bold))
        layout.addWidget(user_info)

        layout.addStretch()

        # –í—Ä–µ–º—è
        self.time_label = QLabel()
        self.time_label.setFont(QFont("Segoe UI", 12))
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–∑—É
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        self.time_label.setText(f"üïê {current_time}")
        layout.addWidget(self.time_label)

        header_frame.setLayout(layout)
        return header_frame

    def create_lot_creation_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞"""
        widget = QWidget()
        layout = QVBoxLayout()

        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞
        form_group = QGroupBox("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ")
        form_layout = QFormLayout()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
        self.title_input = QLineEdit()
        self.title_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", self.title_input)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.description_input = QTextEdit()
        self.description_input.setPlaceholderText("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞...")
        self.description_input.setMaximumHeight(100)
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", self.description_input)

        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
        self.starting_price_input = QDoubleSpinBox()
        self.starting_price_input.setRange(1, 1000000)
        self.starting_price_input.setSuffix(" ‚ÇΩ")
        self.starting_price_input.setValue(1000)
        form_layout.addRow("–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:", self.starting_price_input)

        # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.document_type_combo = QComboBox()
        self.document_type_combo.addItems(
            ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç", "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"]
        )
        form_layout.addRow("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", self.document_type_combo)

        # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        start_time_group = QGroupBox("‚è∞ –¢–∏–ø –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞")
        start_time_layout = QVBoxLayout()

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞
        self.immediate_start_radio = QRadioButton(
            "üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)"
        )
        self.immediate_start_radio.setChecked(True)
        self.scheduled_start_radio = QRadioButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫")

        start_time_layout.addWidget(self.immediate_start_radio)
        start_time_layout.addWidget(self.scheduled_start_radio)

        # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–≤–∏–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        self.start_time_input = QDateTimeEdit()
        self.start_time_input.setDateTime(
            QDateTime.currentDateTime().addSecs(3600)
        )  # +1 —á–∞—Å
        self.start_time_input.setCalendarPopup(True)
        self.start_time_input.setEnabled(False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é
        self.immediate_start_radio.toggled.connect(self.on_start_type_changed)
        self.scheduled_start_radio.toggled.connect(self.on_start_type_changed)

        start_time_layout.addWidget(QLabel("–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:"))
        start_time_layout.addWidget(self.start_time_input)

        start_time_group.setLayout(start_time_layout)
        form_layout.addRow("", start_time_group)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time_note = QLabel(
            "‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞"
        )
        end_time_note.setStyleSheet("QLabel { color: #6c757d; font-style: italic; }")
        form_layout.addRow("", end_time_note)

        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        self.location_input = QLineEdit()
        self.location_input.setPlaceholderText("–ê–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        form_layout.addRow("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", self.location_input)

        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        self.seller_link_input = QLineEdit()
        self.seller_link_input.setPlaceholderText("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        form_layout.addRow("–°—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:", self.seller_link_input)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_layout = QHBoxLayout()
        self.images_label = QLabel("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        images_layout.addWidget(self.images_label)

        add_images_btn = QPushButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        add_images_btn.clicked.connect(self.add_images)
        images_layout.addWidget(add_images_btn)

        clear_images_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_images_btn.clicked.connect(self.clear_images)
        images_layout.addWidget(clear_images_btn)

        form_layout.addRow("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", images_layout)

        # –°–µ–∫—Ü–∏—è —Ñ–∞–π–ª–æ–≤ (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è)
        files_layout = QHBoxLayout()
        self.files_label = QLabel("–§–∞–π–ª—ã: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        files_layout.addWidget(self.files_label)

        add_files_btn = QPushButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        add_files_btn.clicked.connect(self.add_files)
        files_layout.addWidget(add_files_btn)

        clear_files_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_files_btn.clicked.connect(self.clear_files)
        files_layout.addWidget(clear_files_btn)

        form_layout.addRow("–§–∞–π–ª—ã:", files_layout)

        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.selected_images = []

        form_group.setLayout(form_layout)
        layout.addWidget(form_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        create_draft_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")
        create_draft_btn.setStyleSheet("background-color: #6c757d;")
        create_draft_btn.clicked.connect(self.save_draft)
        buttons_layout.addWidget(create_draft_btn)

        submit_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        submit_btn.setStyleSheet("background-color: #28a745;")
        submit_btn.clicked.connect(self.submit_for_moderation)
        buttons_layout.addWidget(submit_btn)

        layout.addLayout(buttons_layout)
        layout.addStretch()

        widget.setLayout(layout)
        return widget

    def create_my_lots_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –ª–æ—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        widget = QWidget()
        layout = QVBoxLayout()

        # –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filters_layout = QHBoxLayout()

        self.lots_status_filter = QComboBox()
        self.lots_status_filter.addItems(
            [
                "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
                "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                "–ê–∫—Ç–∏–≤–µ–Ω",
                "–ü—Ä–æ–¥–∞–Ω",
                "–û—Ç–º–µ–Ω–µ–Ω",
                "–ò—Å—Ç–µ–∫",
            ]
        )
        filters_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        filters_layout.addWidget(self.lots_status_filter)

        self.lots_sort_combo = QComboBox()
        self.lots_sort_combo.addItems(
            [
                "–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)",
                "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)",
                "–ü–æ —Ü–µ–Ω–µ (–¥–æ—Ä–æ–∂–µ)",
                "–ü–æ —Ü–µ–Ω–µ (–¥–µ—à–µ–≤–ª–µ)",
                "–ü–æ —Å—Ç–∞—Ç—É—Å—É",
            ]
        )
        filters_layout.addWidget(QLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:"))
        filters_layout.addWidget(self.lots_sort_combo)

        self.lots_search_input = QLineEdit()
        self.lots_search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        filters_layout.addWidget(self.lots_search_input)

        apply_lot_filters_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        apply_lot_filters_btn.clicked.connect(self.refresh_my_lots)
        filters_layout.addWidget(apply_lot_filters_btn)

        reset_lot_filters_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å")
        reset_lot_filters_btn.clicked.connect(self.reset_lot_filters)
        filters_layout.addWidget(reset_lot_filters_btn)

        layout.addLayout(filters_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ—Ç–æ–≤
        self.lots_table = QTableWidget()
        self.lots_table.setColumnCount(9)
        self.lots_table.setHorizontalHeaderLabels(
            [
                "ID",
                "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "–°—Ç–∞—Ç—É—Å",
                "–¶–µ–Ω–∞",
                "–°–æ–∑–¥–∞–Ω",
                "–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞",
                "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                "–î–µ–π—Å—Ç–≤–∏—è",
                "",
            ]
        )
        self.lots_table.horizontalHeader().setStretchLastSection(True)
        self.lots_table.setColumnWidth(0, 50)  # ID
        self.lots_table.setColumnWidth(1, 200)  # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.lots_table.setColumnWidth(2, 100)  # –°—Ç–∞—Ç—É—Å
        self.lots_table.setColumnWidth(3, 100)  # –¶–µ–Ω–∞
        self.lots_table.setColumnWidth(4, 120)  # –°–æ–∑–¥–∞–Ω
        self.lots_table.setColumnWidth(5, 120)  # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        self.lots_table.setColumnWidth(6, 120)  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        self.lots_table.setColumnWidth(7, 200)  # –î–µ–π—Å—Ç–≤–∏—è

        # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.lots_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.lots_table.customContextMenuRequested.connect(self.show_context_menu)

        layout.addWidget(self.lots_table)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.refresh_my_lots)
        buttons_layout.addWidget(refresh_btn)

        buttons_layout.addStretch()

        layout.addLayout(buttons_layout)

        widget.setLayout(layout)
        return widget

    def create_profile_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
        widget = QWidget()
        layout = QVBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_group = QGroupBox("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ")
        profile_layout = QFormLayout()

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.name_label = QLabel("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        self.username_label = QLabel("–ù–µ —É–∫–∞–∑–∞–Ω")
        self.role_label = QLabel("–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        profile_layout.addRow("–ò–º—è:", self.name_label)
        profile_layout.addRow("Telegram Username:", self.username_label)
        profile_layout.addRow("–†–æ–ª—å:", self.role_label)

        profile_group.setLayout(profile_layout)
        layout.addWidget(profile_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QVBoxLayout()

        self.stats_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats_layout.addWidget(self.stats_label)

        stats_group.setLayout(stats_layout)
        layout.addWidget(stats_group)

        # –§–∏–Ω–∞–Ω—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞
        finance_group = QGroupBox("üí≥ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞")
        finance_layout = QFormLayout()

        self.seller_balance_label = QLabel("0 ‚ÇΩ")
        finance_layout.addRow("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", self.seller_balance_label)

        buttons_layout = QHBoxLayout()
        top_up_btn = QPushButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
        withdraw_btn = QPushButton("‚ûñ –í—ã–≤–µ—Å—Ç–∏")
        top_up_btn.clicked.connect(self.top_up_seller_balance)
        withdraw_btn.clicked.connect(self.withdraw_seller_balance)
        buttons_layout.addWidget(top_up_btn)
        buttons_layout.addWidget(withdraw_btn)
        finance_layout.addRow(buttons_layout)

        finance_group.setLayout(finance_layout)
        layout.addWidget(finance_group)

        layout.addStretch()

        widget.setLayout(layout)
        return widget

    def setup_timer(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_time)
            self.timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            logger.info("–¢–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")

    def update_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è"""
        try:
            if hasattr(self, "time_label") and self.time_label:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                self.time_label.setText(f"üïê {current_time}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
                self.time_label.repaint()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def on_start_type_changed(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        if self.scheduled_start_radio.isChecked():
            self.start_time_input.setEnabled(True)
        else:
            self.start_time_input.setEnabled(False)

    def save_draft(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ª–æ—Ç–∞"""
        if not self.current_user:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            title = self.title_input.text().strip()
            description = self.description_input.toPlainText().strip()
            starting_price = self.starting_price_input.value()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.immediate_start_radio.isChecked():
                start_time = None  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            else:
                start_time = self.start_time_input.dateTime().toPyDateTime()

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            lot_data = {
                "title": title,
                "description": description,
                "starting_price": starting_price,
                "start_time": start_time,
            }

            errors = LotValidator.validate_lot_data(lot_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
            start_time_errors = LotValidator.validate_start_time(start_time)
            errors.extend(start_time_errors)

            if errors:
                error_message = "\n".join(errors)
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_message)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type_map = {
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç": DocumentType.STANDARD,
                "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ": DocumentType.JEWELRY,
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å": DocumentType.HISTORICAL,
            }
            document_type = doc_type_map.get(
                self.document_type_combo.currentText(), DocumentType.STANDARD
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
            db = SessionLocal()
            try:
                new_lot = Lot(
                    title=title,
                    description=description,
                    starting_price=starting_price,
                    current_price=starting_price,
                    min_bid_increment=1.0,
                    seller_id=self.current_user["id"],
                    status=LotStatus.DRAFT,
                    document_type=document_type,
                    start_time=start_time,
                    end_time=start_time + timedelta(hours=24) if start_time else None,
                    location=self.location_input.text().strip(),
                    seller_link=self.seller_link_input.text().strip(),
                )

                db.add(new_lot)
                db.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if self.selected_images:
                    saved_paths = ImageManager.save_images_for_lot(
                        new_lot.id, self.selected_images
                    )
                    if saved_paths:
                        new_lot.images = json.dumps(saved_paths)
                        db.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
                if hasattr(self, "selected_files") and self.selected_files:
                    file_paths = ImageManager.save_files_for_lot(
                        new_lot.id, self.selected_files
                    )
                    if file_paths:
                        new_lot.files = json.dumps(file_paths)
                        db.commit()

                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –ª–æ—Ç–∞ '{title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nID –ª–æ—Ç–∞: {new_lot.id}",
                )

                # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                self.clear_form()
                self.refresh_my_lots()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                if hasattr(self.main_window, "refresh_system_stats"):
                    self.main_window.refresh_system_stats()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            finally:
                db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    def submit_for_moderation(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        if not self.current_user:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            title = self.title_input.text().strip()
            description = self.description_input.toPlainText().strip()
            starting_price = self.starting_price_input.value()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.immediate_start_radio.isChecked():
                start_time = None  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            else:
                start_time = self.start_time_input.dateTime().toPyDateTime()
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ú–°–ö -> UTC –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                try:
                    from bot.utils.time_utils import moscow_to_utc

                    if start_time.tzinfo is None:
                        start_time = moscow_to_utc(start_time)
                except Exception:
                    if start_time.tzinfo is None:
                        from datetime import timezone

                        start_time = start_time.replace(tzinfo=timezone.utc)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            lot_data = {
                "title": title,
                "description": description,
                "starting_price": starting_price,
                "start_time": start_time,
            }

            errors = LotValidator.validate_lot_data(lot_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
            start_time_errors = LotValidator.validate_start_time(start_time)
            errors.extend(start_time_errors)

            if errors:
                error_message = "\n".join(errors)
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_message)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type_map = {
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ—Ç": DocumentType.STANDARD,
                "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ": DocumentType.JEWELRY,
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å": DocumentType.HISTORICAL,
            }
            document_type = doc_type_map.get(
                self.document_type_combo.currentText(), DocumentType.STANDARD
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            db = SessionLocal()
            try:
                new_lot = Lot(
                    title=title,
                    description=description,
                    starting_price=starting_price,
                    current_price=starting_price,
                    min_bid_increment=1.0,
                    seller_id=self.current_user["id"],
                    status=LotStatus.PENDING,
                    document_type=document_type,
                    start_time=start_time,
                    end_time=start_time + timedelta(hours=24) if start_time else None,
                    location=self.location_input.text().strip(),
                    seller_link=self.seller_link_input.text().strip(),
                )

                db.add(new_lot)
                db.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if self.selected_images:
                    saved_paths = ImageManager.save_images_for_lot(
                        new_lot.id, self.selected_images
                    )
                    if saved_paths:
                        new_lot.images = json.dumps(saved_paths)
                        db.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
                if hasattr(self, "selected_files") and self.selected_files:
                    file_paths = ImageManager.save_files_for_lot(
                        new_lot.id, self.selected_files
                    )
                    if file_paths:
                        new_lot.files = json.dumps(file_paths)
                        db.commit()

                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–õ–æ—Ç '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\nID –ª–æ—Ç–∞: {new_lot.id}\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                )

                # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                self.clear_form()
                self.refresh_my_lots()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                if hasattr(self.main_window, "refresh_system_stats"):
                    self.main_window.refresh_system_stats()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            finally:
                db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    def add_images(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ª–æ—Ç—É"""
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.gif *.bmp)")
        file_dialog.setFileMode(QFileDialog.ExistingFiles)

        if file_dialog.exec_():
            files = file_dialog.selectedFiles()
            self.selected_images.extend(files)
            self.update_images_label()

    def add_files(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ –ª–æ—Ç—É"""
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")
        file_dialog.setFileMode(QFileDialog.ExistingFiles)

        if file_dialog.exec_():
            files = file_dialog.selectedFiles()
            self.selected_files.extend(files)
            self.update_files_label()

    def clear_images(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.selected_images.clear()
        self.update_images_label()

    def clear_files(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        self.selected_files.clear()
        self.update_files_label()

    def update_images_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if self.selected_images:
            self.images_label.setText(
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(self.selected_images)} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            self.images_label.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")

    def update_files_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤"""
        if self.selected_files:
            self.files_label.setText(f"–§–∞–π–ª—ã: {len(self.selected_files)} —à—Ç.")
        else:
            self.files_label.setText("–§–∞–π–ª—ã: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")

    def clear_form(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞"""
        self.title_input.clear()
        self.description_input.clear()
        self.starting_price_input.setValue(1000)
        self.document_type_combo.setCurrentIndex(0)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        self.immediate_start_radio.setChecked(True)
        self.scheduled_start_radio.setChecked(False)
        self.start_time_input.setEnabled(False)
        self.start_time_input.setDateTime(QDateTime.currentDateTime().addSecs(3600))

        self.location_input.clear()
        self.seller_link_input.clear()
        self.clear_images()
        self.clear_files()

    def refresh_my_lots(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        if not self.current_user:
            self.lots_table.setRowCount(0)
            return

        db = SessionLocal()
        try:
            query = db.query(Lot).filter(Lot.seller_id == self.current_user["id"])

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if hasattr(self, "lots_status_filter"):
                status_text = self.lots_status_filter.currentText()
                status_map = {
                    "–ß–µ—Ä–Ω–æ–≤–∏–∫": LotStatus.DRAFT,
                    "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏": LotStatus.PENDING,
                    "–ê–∫—Ç–∏–≤–µ–Ω": LotStatus.ACTIVE,
                    "–ü—Ä–æ–¥–∞–Ω": LotStatus.SOLD,
                    "–û—Ç–º–µ–Ω–µ–Ω": LotStatus.CANCELLED,
                    "–ò—Å—Ç–µ–∫": LotStatus.EXPIRED,
                }
                if status_text and status_text != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
                    query = query.filter(Lot.status == status_map[status_text])

            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if hasattr(self, "lots_search_input"):
                term = self.lots_search_input.text().strip()
                if term:
                    like = f"%{term}%"
                    query = query.filter(Lot.title.ilike(like))

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            if hasattr(self, "lots_sort_combo"):
                sort_text = self.lots_sort_combo.currentText()
                if sort_text == "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)":
                    query = query.order_by(Lot.created_at.asc())
                elif sort_text == "–ü–æ —Ü–µ–Ω–µ (–¥–æ—Ä–æ–∂–µ)":
                    query = query.order_by(Lot.current_price.desc())
                elif sort_text == "–ü–æ —Ü–µ–Ω–µ (–¥–µ—à–µ–≤–ª–µ)":
                    query = query.order_by(Lot.current_price.asc())
                elif sort_text == "–ü–æ —Å—Ç–∞—Ç—É—Å—É":
                    query = query.order_by(Lot.status.asc(), Lot.created_at.desc())
                else:  # –ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)
                    query = query.order_by(Lot.created_at.desc())

            lots = query.all()

            self.lots_table.setRowCount(len(lots))

            for row, lot in enumerate(lots):
                # ID
                self.lots_table.setItem(row, 0, QTableWidgetItem(str(lot.id)))

                # –ù–∞–∑–≤–∞–Ω–∏–µ
                self.lots_table.setItem(row, 1, QTableWidgetItem(lot.title))

                # –°—Ç–∞—Ç—É—Å
                status_text = {
                    LotStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                    LotStatus.PENDING: "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    LotStatus.ACTIVE: "–ê–∫—Ç–∏–≤–µ–Ω",
                    LotStatus.SOLD: "–ü—Ä–æ–¥–∞–Ω",
                    LotStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω",
                    LotStatus.EXPIRED: "–ò—Å—Ç–µ–∫",
                }.get(lot.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                status_item = QTableWidgetItem(status_text)
                if lot.status == LotStatus.PENDING:
                    status_item.setBackground(Qt.yellow)
                elif lot.status == LotStatus.ACTIVE:
                    status_item.setBackground(Qt.green)
                elif lot.status == LotStatus.SOLD:
                    status_item.setBackground(Qt.blue)

                self.lots_table.setItem(row, 2, status_item)

                # –¶–µ–Ω–∞
                self.lots_table.setItem(
                    row, 3, QTableWidgetItem(f"{lot.current_price:,.2f} ‚ÇΩ")
                )

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                created_date = format_local_time(lot.created_at)
                self.lots_table.setItem(row, 4, QTableWidgetItem(created_date))

                # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
                start_date = format_local_time(lot.start_time)
                self.lots_table.setItem(row, 5, QTableWidgetItem(start_date))

                # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                end_date = format_local_time(lot.end_time)
                self.lots_table.setItem(row, 6, QTableWidgetItem(end_date))

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                actions_widget = QWidget()
                actions_layout = QHBoxLayout()
                actions_layout.setContentsMargins(2, 2, 2, 2)

                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                view_btn = QPushButton("üëÅÔ∏è")
                view_btn.setToolTip("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏")
                view_btn.setMaximumSize(30, 25)
                view_btn.clicked.connect(
                    lambda checked, lot_ref=lot: self.view_lot(lot_ref)
                )
                actions_layout.addWidget(view_btn)

                # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if lot.status == LotStatus.DRAFT:
                    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    edit_btn = QPushButton("‚úèÔ∏è")
                    edit_btn.setToolTip("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    edit_btn.setMaximumSize(30, 25)
                    edit_btn.clicked.connect(
                        lambda checked, lot_ref=lot: self.edit_lot(lot_ref)
                    )
                    actions_layout.addWidget(edit_btn)

                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    delete_btn = QPushButton("üóëÔ∏è")
                    delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å")
                    delete_btn.setMaximumSize(30, 25)
                    delete_btn.setStyleSheet("background-color: #dc3545; color: white;")
                    delete_btn.clicked.connect(
                        lambda checked, lot_ref=lot: self.delete_lot(lot_ref)
                    )
                    actions_layout.addWidget(delete_btn)

                    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                    submit_btn = QPushButton("üì§")
                    submit_btn.setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                    submit_btn.setMaximumSize(30, 25)
                    submit_btn.setStyleSheet("background-color: #28a745; color: white;")
                    submit_btn.clicked.connect(
                        lambda checked, lot_ref=lot: self.submit_lot_for_moderation(
                            lot_ref
                        )
                    )
                    actions_layout.addWidget(submit_btn)

                elif lot.status == LotStatus.PENDING:
                    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
                    cancel_btn = QPushButton("‚ùå")
                    cancel_btn.setToolTip("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
                    cancel_btn.setMaximumSize(30, 25)
                    cancel_btn.setStyleSheet("background-color: #ffc107; color: black;")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º functools.partial –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    cancel_btn.clicked.connect(partial(self.cancel_submission, lot))
                    actions_layout.addWidget(cancel_btn)

                elif lot.status == LotStatus.ACTIVE:
                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–∞
                    delete_btn = QPushButton("üóëÔ∏è")
                    delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –ª–æ—Ç")
                    delete_btn.setMaximumSize(30, 25)
                    delete_btn.setStyleSheet("background-color: #dc3545; color: white;")
                    delete_btn.clicked.connect(
                        lambda checked, lot_ref=lot: self.delete_active_lot(lot_ref)
                    )
                    actions_layout.addWidget(delete_btn)

                actions_layout.addStretch()
                actions_widget.setLayout(actions_layout)
                self.lots_table.setCellWidget(row, 7, actions_widget)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤: {e}")
        finally:
            db.close()

    def reset_lot_filters(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ª–æ—Ç–æ–≤"""
        try:
            if hasattr(self, "lots_status_filter"):
                self.lots_status_filter.setCurrentIndex(0)
            if hasattr(self, "lots_sort_combo"):
                self.lots_sort_combo.setCurrentIndex(0)
            if hasattr(self, "lots_search_input"):
                self.lots_search_input.clear()
        except Exception:
            pass
        self.refresh_my_lots()

    def view_lot(self, lot: Lot):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞"""
        db = SessionLocal()
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç —Å –∂–∞–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç–∞–≤–æ–∫
            fetched_lot = (
                db.query(Lot)
                .options(joinedload(Lot.bids))
                .filter(Lot.id == lot.id)
                .first()
            )
            if fetched_lot:
                dialog = LotDetailDialog(fetched_lot, self)
                dialog.exec_()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ—Ç–∞: {e}")
        finally:
            db.close()

    def edit_lot(self, lot: Lot):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞"""
        if not LotValidator.can_edit_lot(lot):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
            return

        dialog = EditLotDialog(lot, self)
        if dialog.exec_() == QDialog.Accepted:
            try:
                updated_data = dialog.get_updated_data()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                if updated_data is None:
                    return  # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º

                db = SessionLocal()
                try:
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db_lot = db.query(Lot).filter(Lot.id == lot.id).first()
                    if not db_lot:
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                        return

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç
                    db_lot.title = updated_data["title"]
                    db_lot.description = updated_data["description"]
                    db_lot.starting_price = updated_data["starting_price"]
                    db_lot.current_price = updated_data[
                        "starting_price"
                    ]  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    db_lot.document_type = updated_data["document_type"]
                    db_lot.start_time = updated_data["start_time"]
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∫ start_time + 24 —á–∞—Å–∞
                    if updated_data["start_time"] is not None:
                        db_lot.end_time = updated_data["start_time"] + timedelta(
                            hours=24
                        )
                    else:
                        db_lot.end_time = None
                    db_lot.location = updated_data["location"]
                    db_lot.seller_link = updated_data["seller_link"]
                    db_lot.updated_at = datetime.now()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if updated_data.get("new_images"):
                        new_image_paths = ImageManager.save_images_for_lot(
                            db_lot.id, updated_data["new_images"]
                        )
                        if new_image_paths:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                            current_images = ImageManager.get_lot_images(db_lot)
                            all_images = current_images + new_image_paths
                            db_lot.images = json.dumps(all_images)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                    if updated_data.get("new_files"):
                        new_file_paths = ImageManager.save_files_for_lot(
                            db_lot.id, updated_data["new_files"]
                        )
                        if new_file_paths:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                            current_files = ImageManager.get_lot_files(db_lot)
                            all_files = current_files + new_file_paths
                            db_lot.files = json.dumps(all_files)

                    db.commit()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    self.refresh_my_lots()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                    if hasattr(self.main_window, "refresh_system_stats"):
                        self.main_window.refresh_system_stats()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    def delete_lot(self, lot: Lot):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞"""
        if not LotValidator.can_delete_lot(lot):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
            return

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç '{lot.title}'?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply == QMessageBox.Yes:
            try:
                db = SessionLocal()
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞
                    ImageManager.delete_lot_images(lot.id)

                    db.delete(lot)
                    db.commit()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    self.refresh_my_lots()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                    if hasattr(self.main_window, "refresh_system_stats"):
                        self.main_window.refresh_system_stats()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    def submit_lot_for_moderation(self, lot: Lot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not lot:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if not LotValidator.can_submit_for_moderation(lot):
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                )
                return

            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ—Ç '{lot.title}' –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                db = SessionLocal()
                try:
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db_lot = db.query(Lot).filter(Lot.id == lot.id).first()
                    if not db_lot:
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                        return

                    if not LotValidator.can_submit_for_moderation(db_lot):
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                        )
                        return

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞
                    db_lot.status = LotStatus.PENDING
                    db_lot.updated_at = datetime.now()
                    db.commit()

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–õ–æ—Ç '{db_lot.title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                    )
                    self.refresh_my_lots()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                    if hasattr(self.main_window, "refresh_system_stats"):
                        self.main_window.refresh_system_stats()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ—Ç–∞: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                finally:
                    db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    def cancel_submission(self, lot: Lot):
        """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if not lot:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if lot.status != LotStatus.PENDING:
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
                )
                return

            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã",
                f"–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ—Ç–∞ '{lot.title}' –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No,
            )

            if reply == QMessageBox.Yes:
                db = SessionLocal()
                try:
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db_lot = db.query(Lot).filter(Lot.id == lot.id).first()
                    if not db_lot:
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                        return

                    if db_lot.status != LotStatus.PENDING:
                        QMessageBox.warning(
                            self,
                            "–û—à–∏–±–∫–∞",
                            "–°—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                        )
                        return

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞
                    db_lot.status = LotStatus.DRAFT
                    db_lot.updated_at = datetime.now()
                    db.commit()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
                    self.refresh_my_lots()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
                finally:
                    db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

    def stop_auction(self, lot: Lot):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        if lot.status != LotStatus.ACTIVE:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã"
            )
            return

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
            f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç–∞ '{lot.title}'?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply == QMessageBox.Yes:
            try:
                db = SessionLocal()
                try:
                    lot.status = LotStatus.CANCELLED
                    lot.updated_at = datetime.now()
                    db.commit()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ê—É–∫—Ü–∏–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    self.refresh_my_lots()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    def delete_active_lot(self, lot: Lot):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤ Telegram"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–£–¥–∞–ª–∏—Ç—å –ª–æ—Ç '{lot.title}'?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n–õ–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply == QMessageBox.Yes:
            try:
                db = SessionLocal()
                try:
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
                    db_lot = db.query(Lot).filter(Lot.id == lot.id).first()
                    if not db_lot:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return

                    if db_lot.status != LotStatus.ACTIVE:
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã"
                        )
                        return

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ 5% –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥–∫–µ
                    from bot.utils.finance_manager import finance_manager

                    if not finance_manager.process_lot_deletion(
                        db_lot.id, db_lot.seller_id
                    ):
                        QMessageBox.critical(
                            self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —à—Ç—Ä–∞—Ñ 5% —Å –ø—Ä–æ–¥–∞–≤—Ü–∞"
                        )
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª–æ—Ç
                    bids_count = db.query(Bid).filter(Bid.lot_id == db_lot.id).count()
                    had_bids = bids_count > 0

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª–æ—Ç
                    db.query(Bid).filter(Bid.lot_id == db_lot.id).delete()

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–≤—Ç–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª–æ—Ç (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ NOT NULL constraints)
                    db.query(AutoBid).filter(AutoBid.lot_id == db_lot.id).delete()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    lot_id = db_lot.id
                    lot_title = db_lot.title
                    telegram_message_id = db_lot.telegram_message_id

                    # –£–¥–∞–ª—è–µ–º —Å–∞–º –ª–æ—Ç
                    db.delete(db_lot)
                    db.commit()

                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
                    try:
                        from management.core.telegram_publisher_sync import (
                            telegram_publisher_sync,
                        )

                        if telegram_message_id:
                            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if had_bids:
                                edit_text = f"""
‚ùå <b>–õ–û–¢ –£–î–ê–õ–ï–ù</b>

üì¶ <b>–õ–æ—Ç #{lot_id}: {lot_title}</b>

‚ö†Ô∏è <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ</b>
üìä <b>–ë—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —Å—Ç–∞–≤–∫–∏</b>

üí° <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –õ–æ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                                """
                            else:
                                edit_text = f"""
‚ùå <b>–õ–û–¢ –£–î–ê–õ–ï–ù</b>

üì¶ <b>–õ–æ—Ç #{lot_id}: {lot_title}</b>

‚ö†Ô∏è <b>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b>
üìä <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç</b>

üí° <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –õ–æ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                                """

                            telegram_publisher_sync.edit_lot_message(
                                lot_id, telegram_message_id, edit_text.strip()
                            )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω
                            telegram_publisher_sync.send_lot_deleted_message(
                                lot_id, lot_title, had_bids
                            )
                    except Exception as telegram_error:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {telegram_error}"
                        )

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"–õ–æ—Ç '{lot_title}' —É–¥–∞–ª–µ–Ω! –®—Ç—Ä–∞—Ñ 5% —Å–ø–∏—Å–∞–Ω.\n"
                        f"–°—Ç–∞–≤–æ–∫ –Ω–∞ –ª–æ—Ç: {bids_count}\n"
                        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∫–∞–Ω–∞–ª.",
                    )
                    self.refresh_my_lots()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_user = self.main_window.get_current_user()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if hasattr(self, "tabs"):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if self.layout().count() > 0:
                old_header = self.layout().itemAt(0).widget()
                if old_header:
                    old_header.deleteLater()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            new_header = self.create_header()
            self.layout().insertWidget(0, new_header)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        if self.current_user:
            self.setWindowTitle(f"üë§ –ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ - {self.current_user['name']}")
        else:
            self.setWindowTitle("üë§ –ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ - –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        self.refresh_my_lots()
        self.update_profile_stats()

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if hasattr(self, "name_label") and self.current_user:
            self.name_label.setText(self.current_user["name"])
            username = self.current_user.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
            self.username_label.setText(
                f"@{username}" if username != "–ù–µ —É–∫–∞–∑–∞–Ω" else username
            )
            self.role_label.setText(self.current_user.get("role", "–ü—Ä–æ–¥–∞–≤–µ—Ü"))

    def update_profile_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_user = self.main_window.get_current_user()

        if not self.current_user:
            self.stats_label.setText("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
            if hasattr(self, "name_label"):
                self.name_label.setText("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                self.username_label.setText("–ù–µ —É–∫–∞–∑–∞–Ω")
                self.role_label.setText("–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if hasattr(self, "name_label"):
            self.name_label.setText(self.current_user["name"])
            username = self.current_user.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
            self.username_label.setText(
                f"@{username}" if username != "–ù–µ —É–∫–∞–∑–∞–Ω" else username
            )
            self.role_label.setText(self.current_user.get("role", "–ü—Ä–æ–¥–∞–≤–µ—Ü"))

        db = SessionLocal()
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_lots = (
                db.query(Lot).filter(Lot.seller_id == self.current_user["id"]).count()
            )
            active_lots = (
                db.query(Lot)
                .filter(
                    Lot.seller_id == self.current_user["id"],
                    Lot.status == LotStatus.ACTIVE,
                )
                .count()
            )
            sold_lots = (
                db.query(Lot)
                .filter(
                    Lot.seller_id == self.current_user["id"],
                    Lot.status == LotStatus.SOLD,
                )
                .count()
            )
            pending_lots = (
                db.query(Lot)
                .filter(
                    Lot.seller_id == self.current_user["id"],
                    Lot.status == LotStatus.PENDING,
                )
                .count()
            )

            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:

üì¶ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {total_lots}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_lots}
üí∞ –ü—Ä–æ–¥–∞–Ω–Ω—ã—Ö: {sold_lots}
‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_lots}
            """

            self.stats_label.setText(stats_text.strip())

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            user = db.query(User).filter(User.id == self.current_user["id"]).first()
            if user:
                self.seller_balance_label.setText(f"{user.balance:,.2f} ‚ÇΩ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            db.close()

    def top_up_seller_balance(self):
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–≤–≤–æ–¥ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥)"""
        if not self.current_user:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return
        amount, ok = QInputDialog.getDouble(
            self, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", "–°—É–º–º–∞ (‚ÇΩ):", 100.0, 1.0, 1_000_000.0, 2
        )
        if not ok:
            return
        if amount <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        success = finance_manager.add_balance(
            self.current_user["id"], amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞"
        )
        if success:
            QMessageBox.information(
                self, "–£—Å–ø–µ—Ö", f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:,.2f} ‚ÇΩ"
            )
            self.update_profile_stats()
            if hasattr(self.main_window, "refresh_system_stats"):
                self.main_window.refresh_system_stats()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")

    def withdraw_seller_balance(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–µ–º–æ, –±–µ–∑ –≤—ã–ø–ª–∞—Ç)"""
        if not self.current_user:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return
        amount, ok = QInputDialog.getDouble(
            self, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "–°—É–º–º–∞ (‚ÇΩ):", 100.0, 1.0, 1_000_000.0, 2
        )
        if not ok:
            return
        if amount <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        success = finance_manager.deduct_balance(
            self.current_user["id"], amount, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (–¥–µ–º–æ)"
        )
        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°–ø–∏—Å–∞–Ω–æ {amount:,.2f} ‚ÇΩ")
            self.update_profile_stats()
            if hasattr(self.main_window, "refresh_system_stats"):
                self.main_window.refresh_system_stats()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞")

    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–æ—Ç–æ–≤"""
        if not self.current_user:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
        row = self.lots_table.rowAt(position.y())
        if row < 0:
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        lot_id_item = self.lots_table.item(row, 0)
        if not lot_id_item:
            return

        try:
            lot_id = int(lot_id_item.text())

            # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = SessionLocal()
            try:
                lot = db.query(Lot).filter(Lot.id == lot_id).first()
                if not lot or lot.seller_id != self.current_user["id"]:
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                menu = QMenu(self)

                # –î–µ–π—Å—Ç–≤–∏–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
                view_action = menu.addAction("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏")
                view_action.triggered.connect(lambda: self.view_lot(lot))

                menu.addSeparator()

                # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if lot.status == LotStatus.DRAFT:
                    edit_action = menu.addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    edit_action.triggered.connect(lambda: self.edit_lot(lot))

                    delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
                    delete_action.triggered.connect(lambda: self.delete_lot(lot))

                    submit_action = menu.addAction("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                    submit_action.triggered.connect(
                        lambda: self.submit_lot_for_moderation(lot)
                    )

                elif lot.status == LotStatus.PENDING:
                    cancel_action = menu.addAction("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
                    cancel_action.triggered.connect(
                        partial(self.cancel_submission, lot)
                    )

                elif lot.status == LotStatus.ACTIVE:
                    delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç")
                    delete_action.triggered.connect(lambda: self.delete_active_lot(lot))

                # –≠–∫—Å–ø–æ—Ä—Ç
                menu.addSeparator()
                export_action = menu.addAction("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ—Ç–∞")
                export_action.triggered.connect(lambda: self.export_lot_from_menu(lot))

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                menu.exec_(self.lots_table.mapToGlobal(position))

            finally:
                db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def export_lot_from_menu(self, lot: Lot):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            pass

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
            file_dialog = QFileDialog()
            file_dialog.setNameFilter("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (*.txt);;HTML —Ñ–∞–π–ª (*.html)")
            file_dialog.setDefaultSuffix("txt")
            file_dialog.setAcceptMode(QFileDialog.AcceptSave)
            file_dialog.setWindowTitle(f"–≠–∫—Å–ø–æ—Ä—Ç –ª–æ—Ç–∞: {lot.title}")

            if file_dialog.exec_():
                file_path = file_dialog.selectedFiles()[0]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                format_type = "html" if file_path.endswith(".html") else "txt"
                content = DocumentGenerator.generate_lot_report(lot, format_type)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)

                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–õ–æ—Ç '{lot.title}' —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª:\n{file_path}",
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è (–∏–Ω–¥–µ–∫—Å 2)
        if index == 2:  # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            self.update_profile_stats()
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è (–∏–Ω–¥–µ–∫—Å 2)
        if index == 2:  # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            self.update_profile_stats()
