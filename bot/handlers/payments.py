import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from bot.utils.finance_manager import finance_manager
from bot.utils.notifications import notification_service
from database.db import SessionLocal
from database.models import Lot, Payment, User

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data.startswith("pay_card:"))
async def pay_with_card(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"""
    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not lot or not user:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            user_id=user.id,
            lot_id=lot_id,
            amount=lot.current_price,
            payment_type="card",
            status="pending",
        )
        db.add(payment)
        db.commit()

        await callback.message.answer(
            f"üí≥ **–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π**\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –°—É–º–º–∞: {lot.current_price:,.2f} ‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n\n"
            f"‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
        )

        await callback.answer("üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã
        try:
            await notification_service.notify_purchase_started(lot_id, user.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        db.rollback()
    finally:
        db.close()


@router.callback_query(F.data.startswith("pay_sbp:"))
async def pay_with_sbp(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü"""
    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not lot or not user:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            user_id=user.id,
            lot_id=lot_id,
            amount=lot.current_price,
            payment_type="sbp",
            status="pending",
        )
        db.add(payment)
        db.commit()

        await callback.message.answer(
            f"üì± **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü**\n\n"
            f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            f"üí∞ –°—É–º–º–∞: {lot.current_price:,.2f} ‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n\n"
            f"‚ÑπÔ∏è QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
        )

        await callback.answer("üì± –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã
        try:
            await notification_service.notify_purchase_started(lot_id, user.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        db.rollback()
    finally:
        db.close()


@router.callback_query(F.data.startswith("pay_balance:"))
async def pay_with_balance(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: —Å–ø–∏—Å–∞–Ω–∏–µ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É 95%, 5% —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º"""
    db = SessionLocal()
    try:
        lot_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lot = db.query(Lot).filter(Lot.id == lot_id).first()
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        seller = db.query(User).filter(User.id == lot.seller_id).first()

        if not lot or not user or not seller:
            await callback.answer("‚ùå –õ–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è
        amount = lot.current_price
        if finance_manager.process_lot_sale(lot.id, user.id, amount):
            await callback.message.answer(
                f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞</b>\n\n"
                f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.2f} ‚ÇΩ\n"
                f"üìä –ö–æ–º–∏—Å—Å–∏—è –ø–ª–æ—â–∞–¥–∫–∏: {amount*0.05:,.2f} ‚ÇΩ\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞—á–∏—Å–ª–µ–Ω–æ: {amount*0.95:,.2f} ‚ÇΩ",
                parse_mode="HTML",
            )
            await callback.answer("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                await notification_service.notify_purchase_completed(
                    lot_id, user.id, amount
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")
        else:
            await callback.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä—è–º–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        db.rollback()
    finally:
        db.close()


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.message.edit_text(
        "‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n" "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ"
    )
    await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")


@router.message(Command("payments"))
async def show_payments(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        recent_payments = (
            db.query(Payment)
            .filter(Payment.user_id == user.id)
            .order_by(Payment.created_at.desc())
            .limit(10)
            .all()
        )

        if not recent_payments:
            await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
            return

        text = "üí≥ **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:**\n\n"
        for payment in recent_payments:
            lot = db.query(Lot).filter(Lot.id == payment.lot_id).first()
            status_emoji = (
                "‚úÖ"
                if payment.status == "completed"
                else "‚è≥" if payment.status == "pending" else "‚ùå"
            )

            text += f"{status_emoji} **{payment.payment_type.upper()}**\n"
            if lot:
                text += f"üè∑Ô∏è –õ–æ—Ç: {lot.title}\n"
            text += f"üí∞ –°—É–º–º–∞: {payment.amount:,.2f} ‚ÇΩ\n"
            text += f"üìÖ –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()
